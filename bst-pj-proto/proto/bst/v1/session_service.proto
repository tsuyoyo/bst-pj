syntax = "proto3";

package bst.v1;

import "bst/v1/communication.proto";
import "bst/v1/content.proto";
import "bst/v1/location.proto";
import "bst/v1/session.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tsuyoyo/bst-pj-proto/gen/go/bst/v1;bstv1";

service SessionService {
  // Session Management
  // POST /sessions
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  // GET /sessions/{id}
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
  // PUT /sessions/{id}
  rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse);
  // PUT /sessions/{id}/status
  rpc UpdateSessionStatus(UpdateSessionStatusRequest)
      returns (UpdateSessionStatusResponse);
  // PUT /sessions/{id}/cancel
  rpc CancelSession(CancelSessionRequest) returns (CancelSessionResponse);
  // POST /sessions/{id}/duplicate
  rpc DuplicateSession(DuplicateSessionRequest)
      returns (DuplicateSessionResponse);

  // Parts Management
  // POST /sessions/{id}/parts
  rpc AddSessionPart(AddSessionPartRequest) returns (AddSessionPartResponse);
  // PUT /sessions/{id}/parts/{partId}
  rpc UpdateSessionPart(UpdateSessionPartRequest)
      returns (UpdateSessionPartResponse);
  // DELETE /sessions/{id}/parts/{partId}
  rpc DeleteSessionPart(DeleteSessionPartRequest)
      returns (DeleteSessionPartResponse);

  // Schedule & Location
  // PUT /sessions/{id}/schedule
  rpc UpdateSessionSchedule(UpdateSessionScheduleRequest)
      returns (UpdateSessionScheduleResponse);
  // PUT /sessions/{id}/location
  rpc UpdateSessionLocation(UpdateSessionLocationRequest)
      returns (UpdateSessionLocationResponse);

  // Participants
  // GET /sessions/{id}/participants
  rpc ListSessionParticipants(ListSessionParticipantsRequest)
      returns (ListSessionParticipantsResponse);
  // POST /sessions/{id}/participants
  rpc AddSessionParticipant(AddSessionParticipantRequest)
      returns (AddSessionParticipantResponse);
  // PUT /sessions/{id}/participants/{participantId}
  rpc UpdateSessionParticipant(UpdateSessionParticipantRequest)
      returns (UpdateSessionParticipantResponse);

  // Song Management
  // GET /sessions/{id}/songs
  rpc ListSessionSongs(ListSessionSongsRequest)
      returns (ListSessionSongsResponse);
  // GET /sessions/{id}/songs/{songId}
  rpc GetSessionSong(GetSessionSongRequest) returns (GetSessionSongResponse);
  // PUT /sessions/{id}/songs/{songId}
  rpc UpdateSessionSong(UpdateSessionSongRequest)
      returns (UpdateSessionSongResponse);
  // DELETE /sessions/{id}/songs/{songId}
  rpc DeleteSessionSong(DeleteSessionSongRequest)
      returns (DeleteSessionSongResponse);

  // Song Entries
  // POST /sessions/{id}/songs/{songId}/entries
  rpc AddSongEntry(AddSongEntryRequest) returns (AddSongEntryResponse);
  // DELETE /sessions/{id}/songs/{songId}/entries/{entryId}
  rpc DeleteSongEntry(DeleteSongEntryRequest) returns (DeleteSongEntryResponse);

  // Song Resources
  // POST /sessions/{id}/songs/{songId}/resources
  rpc AddSessionSongResource(AddSessionSongResourceRequest)
      returns (AddSessionSongResourceResponse);
  // GET /sessions/{id}/songs/{songId}/resources
  rpc ListSessionSongResources(ListSessionSongResourcesRequest)
      returns (ListSessionSongResourcesResponse);
  // DELETE /sessions/{id}/songs/{songId}/resources
  rpc DeleteSessionSongResource(DeleteSessionSongResourceRequest)
      returns (DeleteSessionSongResourceResponse);

  // Organizers
  // GET /sessions/{id}/organizers
  rpc ListSessionOrganizers(ListSessionOrganizersRequest)
      returns (ListSessionOrganizersResponse);
  // POST /sessions/{id}/organizers
  rpc AddSessionOrganizer(AddSessionOrganizerRequest)
      returns (AddSessionOrganizerResponse);
  // DELETE /sessions/{id}/organizers/{userId}
  rpc DeleteSessionOrganizer(DeleteSessionOrganizerRequest)
      returns (DeleteSessionOrganizerResponse);

  // Communication
  // POST /sessions/{id}/threads
  rpc CreateSessionThread(CreateSessionThreadRequest)
      returns (CreateSessionThreadResponse);
  // GET /sessions/{id}/threads
  rpc ListSessionThreads(ListSessionThreadsRequest)
      returns (ListSessionThreadsResponse);
  // POST /sessions/{id}/songs/{songId}/threads
  rpc CreateSongThread(CreateSongThreadRequest)
      returns (CreateSongThreadResponse);
  // GET /sessions/{id}/threads/{id}
  rpc GetSessionThread(GetSessionThreadRequest)
      returns (GetSessionThreadResponse);
  // DELETE /sessions/{id}/threads/{id}
  rpc DeleteSessionThread(DeleteSessionThreadRequest)
      returns (DeleteSessionThreadResponse);
  // POST /sessions/{id}/notifications
  rpc CreateSessionNotification(CreateSessionNotificationRequest)
      returns (CreateSessionNotificationResponse);

  // Timetable
  // GET /sessions/{id}/timetable
  rpc GetSessionTimetable(GetSessionTimetableRequest)
      returns (GetSessionTimetableResponse);
  // PUT /sessions/{id}/timetable
  rpc UpdateSessionTimetable(UpdateSessionTimetableRequest)
      returns (UpdateSessionTimetableResponse);
  // GET /sessions/{id}/timetable/optimized
  rpc GetOptimizedTimetable(GetOptimizedTimetableRequest)
      returns (GetOptimizedTimetableResponse);
  // GET /sessions/{id}/timetable/progress
  rpc GetTimetableProgress(GetTimetableProgressRequest)
      returns (GetTimetableProgressResponse);
  // PUT /sessions/{id}/timetable/progress
  rpc UpdateTimetableProgress(UpdateTimetableProgressRequest)
      returns (UpdateTimetableProgressResponse);

  // Session Resources
  // POST /sessions/{id}/resources
  rpc AddSessionResource(AddSessionResourceRequest)
      returns (AddSessionResourceResponse);
  // GET /sessions/{id}/resources
  rpc ListSessionResources(ListSessionResourcesRequest)
      returns (ListSessionResourcesResponse);
  // DELETE /sessions/{id}/resources
  rpc DeleteSessionResource(DeleteSessionResourceRequest)
      returns (DeleteSessionResourceResponse);

  // Feedbacks
  // POST /sessions/{id}/feedbacks
  rpc AddSessionFeedback(AddSessionFeedbackRequest)
      returns (AddSessionFeedbackResponse);
  // GET /sessions/{id}/ratings
  rpc ListSessionFeedbacks(ListSessionFeedbacksRequest)
      returns (ListSessionFeedbacksResponse);

  // Related Sessions
  // GET /sessions/{id}/related-sessions
  rpc ListRelatedSessions(ListRelatedSessionsRequest)
      returns (ListRelatedSessionsResponse);
  // POST /sessions/{id}/related-sessions
  rpc AddRelatedSession(AddRelatedSessionRequest)
      returns (AddRelatedSessionResponse);
}

// Session Management
message CreateSessionRequest {
  string                    title       = 1;
  string                    description = 2;
  google.protobuf.Timestamp event_date  = 3;
}

message CreateSessionResponse {
  Session session = 1;
}

message GetSessionRequest {
  int32 session_id = 1;
}

message GetSessionResponse {
  SessionDetail session = 1;
}

message UpdateSessionRequest {
  int32                     session_id  = 1;
  string                    title       = 2;
  string                    description = 3;
  google.protobuf.Timestamp event_date  = 4;
}

message UpdateSessionResponse {
  SessionDetail session = 1;
}

message UpdateSessionStatusRequest {
  int32         session_id = 1;
  SessionStatus status     = 2;
}

message UpdateSessionStatusResponse {
  SessionDetail session = 1;
}

message CancelSessionRequest {
  int32  session_id = 1;
  string reason     = 2;
}

message CancelSessionResponse {
  SessionDetail session = 1;
}

message DuplicateSessionRequest {
  int32                     session_id     = 1;
  google.protobuf.Timestamp new_event_date = 2;
}

message DuplicateSessionResponse {
  SessionDetail session = 1;
}

// Parts Management
message AddSessionPartRequest {
  int32       session_id = 1;
  SessionPart part       = 2;
}

message AddSessionPartResponse {
  SessionPart part = 1;
}

message UpdateSessionPartRequest {
  int32       session_id = 1;
  int32       part_id    = 2;
  SessionPart part       = 3;
}

message UpdateSessionPartResponse {
  SessionPart part = 1;
}

message DeleteSessionPartRequest {
  int32 session_id = 1;
  int32 part_id    = 2;
}

message DeleteSessionPartResponse {
  bool success = 1;
}

// Schedule & Location
message UpdateSessionScheduleRequest {
  int32     session_id = 1;
  Timetable timetable  = 2;
}

message UpdateSessionScheduleResponse {
  Timetable timetable = 1;
}

message UpdateSessionLocationRequest {
  int32    session_id = 1;
  Location location   = 2;
}

message UpdateSessionLocationResponse {
  Location location = 1;
}

// Participants
message ListSessionParticipantsRequest {
  int32 session_id = 1;
}

message ListSessionParticipantsResponse {
  repeated SessionParticipant participants = 1;
}

message AddSessionParticipantRequest {
  int32              session_id  = 1;
  SessionParticipant participant = 2;
}

message AddSessionParticipantResponse {
  SessionParticipant participant = 1;
}

message UpdateSessionParticipantRequest {
  int32              session_id     = 1;
  int32              participant_id = 2;
  SessionParticipant participant    = 3;
}

message UpdateSessionParticipantResponse {
  SessionParticipant participant = 1;
}

// Song Management
message ListSessionSongsRequest {
  int32 session_id = 1;
}

message ListSessionSongsResponse {
  repeated SongPerformance songs = 1;
}

message GetSessionSongRequest {
  int32 session_id = 1;
  int32 song_id    = 2;
}

message GetSessionSongResponse {
  SongPerformance song = 1;
}

message UpdateSessionSongRequest {
  int32           session_id = 1;
  int32           song_id    = 2;
  SongPerformance song       = 3;
}

message UpdateSessionSongResponse {
  SongPerformance song = 1;
}

message DeleteSessionSongRequest {
  int32 session_id = 1;
  int32 song_id    = 2;
}

message DeleteSessionSongResponse {
  bool success = 1;
}

// Song Entries
message AddSongEntryRequest {
  int32                session_id = 1;
  int32                song_id    = 2;
  SongPerformanceEntry entry      = 3;
}

message AddSongEntryResponse {
  SongPerformanceEntry entry = 1;
}

message DeleteSongEntryRequest {
  int32 session_id = 1;
  int32 song_id    = 2;
  int32 entry_id   = 3;
}

message DeleteSongEntryResponse {
  bool success = 1;
}

// Song Resources
message AddSessionSongResourceRequest {
  int32    session_id = 1;
  int32    song_id    = 2;
  Resource resource   = 3;
}

message AddSessionSongResourceResponse {
  Resource resource = 1;
}

message ListSessionSongResourcesRequest {
  int32 session_id = 1;
  int32 song_id    = 2;
}

message ListSessionSongResourcesResponse {
  repeated Resource resources       = 1;
  string            next_page_token = 2;
  int32             total_size      = 3;
}

message DeleteSessionSongResourceRequest {
  int32 session_id  = 1;
  int32 song_id     = 2;
  int32 resource_id = 3;
}

message DeleteSessionSongResourceResponse {
  bool success = 1;
}

// Organizers
message ListSessionOrganizersRequest {
  int32 session_id = 1;
}

message ListSessionOrganizersResponse {
  repeated SessionParticipant organizers = 1;
}

message AddSessionOrganizerRequest {
  int32 session_id = 1;
  int32 user_id    = 2;
}

message AddSessionOrganizerResponse {
  SessionParticipant organizer = 1;
}

message DeleteSessionOrganizerRequest {
  int32 session_id = 1;
  int32 user_id    = 2;
}

message DeleteSessionOrganizerResponse {
  bool success = 1;
}

// Communication
message CreateSessionThreadRequest {
  int32  session_id = 1;
  Thread thread     = 2;
}

message CreateSessionThreadResponse {
  Thread thread = 1;
}

message ListSessionThreadsRequest {
  int32 session_id = 1;
}

message ListSessionThreadsResponse {
  repeated Thread threads = 1;
}

message CreateSongThreadRequest {
  int32  session_id = 1;
  int32  song_id    = 2;
  Thread thread     = 3;
}

message CreateSongThreadResponse {
  Thread thread = 1;
}

message GetSessionThreadRequest {
  int32 session_id = 1;
  int32 thread_id  = 2;
}

message GetSessionThreadResponse {
  Thread thread = 1;
}

message DeleteSessionThreadRequest {
  int32 session_id = 1;
  int32 thread_id  = 2;
}

message DeleteSessionThreadResponse {
  bool success = 1;
}

message CreateSessionNotificationRequest {
  int32          session_id = 1;
  string         content    = 2;
  repeated int32 user_ids   = 3;
}

message CreateSessionNotificationResponse {
  bool success = 1;
}

// Timetable
message GetSessionTimetableRequest {
  int32 session_id = 1;
}

message GetSessionTimetableResponse {
  Timetable timetable = 1;
}

message UpdateSessionTimetableRequest {
  int32     session_id = 1;
  Timetable timetable  = 2;
}

message UpdateSessionTimetableResponse {
  Timetable timetable = 1;
}

message GetOptimizedTimetableRequest {
  int32           session_id         = 1;
  repeated string optimization_rules = 2;
}

message GetOptimizedTimetableResponse {
  Timetable timetable = 1;
}

message GetTimetableProgressRequest {
  int32 session_id = 1;
}

message GetTimetableProgressResponse {
  repeated TimetableEntry completed_entries = 1;
  TimetableEntry          current_entry     = 2;
}

message UpdateTimetableProgressRequest {
  int32 session_id       = 1;
  int32 current_entry_id = 2;
}

message UpdateTimetableProgressResponse {
  bool success = 1;
}

// Session Resources
message AddSessionResourceRequest {
  int32    session_id = 1;
  Resource resource   = 2;
}

message AddSessionResourceResponse {
  Resource resource = 1;
}

message ListSessionResourcesRequest {
  int32 session_id = 1;
}

message ListSessionResourcesResponse {
  repeated Resource resources = 1;
}

message DeleteSessionResourceRequest {
  int32 session_id  = 1;
  int32 resource_id = 2;
}

message DeleteSessionResourceResponse {
  bool success = 1;
}

// Ratings
message AddSessionFeedbackRequest {
  SessionFeedback feedback = 1;
}

message AddSessionFeedbackResponse {
  bool success = 1;
}

message ListSessionFeedbacksRequest {
  int32 session_id = 1;
}

message ListSessionFeedbacksResponse {
  repeated SessionFeedback feedbacks = 1;
}

// Related Sessions
message ListRelatedSessionsRequest {
  int32 session_id = 1;
}

message ListRelatedSessionsResponse {
  repeated Session sessions = 1;
}

message AddRelatedSessionRequest {
  int32 session_id         = 1;
  int32 related_session_id = 2;
}

message AddRelatedSessionResponse {
  bool success = 1;
}



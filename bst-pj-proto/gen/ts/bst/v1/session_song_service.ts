// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session_song_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { SessionSong } from "./session";

export const protobufPackage = "bst.v1";

/** List Session Songs */
export interface ListSessionSongsRequest {
}

export interface ListSessionSongsResponse {
  songs: SessionSong[];
}

/** Add Session Song */
export interface AddSessionSongRequest {
  songId: number;
  mandatoryPartIds: number[];
}

export interface AddSessionSongResponse {
  song: SessionSong | undefined;
}

/** Get Session Song */
export interface GetSessionSongRequest {
}

export interface GetSessionSongResponse {
  song: SessionSong | undefined;
}

/** Update Session Song */
export interface UpdateSessionSongRequest {
  song: SessionSong | undefined;
}

export interface UpdateSessionSongResponse {
  song: SessionSong | undefined;
}

/** Delete Session Song */
export interface DeleteSessionSongRequest {
}

export interface DeleteSessionSongResponse {
  success: boolean;
}

function createBaseListSessionSongsRequest(): ListSessionSongsRequest {
  return {};
}

export const ListSessionSongsRequest = {
  encode(_: ListSessionSongsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionSongsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionSongsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListSessionSongsRequest {
    return {};
  },

  toJSON(_: ListSessionSongsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionSongsRequest>, I>>(base?: I): ListSessionSongsRequest {
    return ListSessionSongsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionSongsRequest>, I>>(_: I): ListSessionSongsRequest {
    const message = createBaseListSessionSongsRequest();
    return message;
  },
};

function createBaseListSessionSongsResponse(): ListSessionSongsResponse {
  return { songs: [] };
}

export const ListSessionSongsResponse = {
  encode(message: ListSessionSongsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.songs) {
      SessionSong.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionSongsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionSongsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.songs.push(SessionSong.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionSongsResponse {
    return {
      songs: globalThis.Array.isArray(object?.songs) ? object.songs.map((e: any) => SessionSong.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSessionSongsResponse): unknown {
    const obj: any = {};
    if (message.songs?.length) {
      obj.songs = message.songs.map((e) => SessionSong.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionSongsResponse>, I>>(base?: I): ListSessionSongsResponse {
    return ListSessionSongsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionSongsResponse>, I>>(object: I): ListSessionSongsResponse {
    const message = createBaseListSessionSongsResponse();
    message.songs = object.songs?.map((e) => SessionSong.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSessionSongRequest(): AddSessionSongRequest {
  return { songId: 0, mandatoryPartIds: [] };
}

export const AddSessionSongRequest = {
  encode(message: AddSessionSongRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.songId !== 0) {
      writer.uint32(8).int32(message.songId);
    }
    writer.uint32(18).fork();
    for (const v of message.mandatoryPartIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionSongRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionSongRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.songId = reader.int32();
          continue;
        case 2:
          if (tag === 16) {
            message.mandatoryPartIds.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mandatoryPartIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionSongRequest {
    return {
      songId: isSet(object.songId) ? globalThis.Number(object.songId) : 0,
      mandatoryPartIds: globalThis.Array.isArray(object?.mandatoryPartIds)
        ? object.mandatoryPartIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: AddSessionSongRequest): unknown {
    const obj: any = {};
    if (message.songId !== 0) {
      obj.songId = Math.round(message.songId);
    }
    if (message.mandatoryPartIds?.length) {
      obj.mandatoryPartIds = message.mandatoryPartIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionSongRequest>, I>>(base?: I): AddSessionSongRequest {
    return AddSessionSongRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionSongRequest>, I>>(object: I): AddSessionSongRequest {
    const message = createBaseAddSessionSongRequest();
    message.songId = object.songId ?? 0;
    message.mandatoryPartIds = object.mandatoryPartIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddSessionSongResponse(): AddSessionSongResponse {
  return { song: undefined };
}

export const AddSessionSongResponse = {
  encode(message: AddSessionSongResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.song !== undefined) {
      SessionSong.encode(message.song, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionSongResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionSongResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.song = SessionSong.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionSongResponse {
    return { song: isSet(object.song) ? SessionSong.fromJSON(object.song) : undefined };
  },

  toJSON(message: AddSessionSongResponse): unknown {
    const obj: any = {};
    if (message.song !== undefined) {
      obj.song = SessionSong.toJSON(message.song);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionSongResponse>, I>>(base?: I): AddSessionSongResponse {
    return AddSessionSongResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionSongResponse>, I>>(object: I): AddSessionSongResponse {
    const message = createBaseAddSessionSongResponse();
    message.song = (object.song !== undefined && object.song !== null)
      ? SessionSong.fromPartial(object.song)
      : undefined;
    return message;
  },
};

function createBaseGetSessionSongRequest(): GetSessionSongRequest {
  return {};
}

export const GetSessionSongRequest = {
  encode(_: GetSessionSongRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSessionSongRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionSongRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSessionSongRequest {
    return {};
  },

  toJSON(_: GetSessionSongRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSessionSongRequest>, I>>(base?: I): GetSessionSongRequest {
    return GetSessionSongRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSessionSongRequest>, I>>(_: I): GetSessionSongRequest {
    const message = createBaseGetSessionSongRequest();
    return message;
  },
};

function createBaseGetSessionSongResponse(): GetSessionSongResponse {
  return { song: undefined };
}

export const GetSessionSongResponse = {
  encode(message: GetSessionSongResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.song !== undefined) {
      SessionSong.encode(message.song, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSessionSongResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionSongResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.song = SessionSong.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionSongResponse {
    return { song: isSet(object.song) ? SessionSong.fromJSON(object.song) : undefined };
  },

  toJSON(message: GetSessionSongResponse): unknown {
    const obj: any = {};
    if (message.song !== undefined) {
      obj.song = SessionSong.toJSON(message.song);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSessionSongResponse>, I>>(base?: I): GetSessionSongResponse {
    return GetSessionSongResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSessionSongResponse>, I>>(object: I): GetSessionSongResponse {
    const message = createBaseGetSessionSongResponse();
    message.song = (object.song !== undefined && object.song !== null)
      ? SessionSong.fromPartial(object.song)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionSongRequest(): UpdateSessionSongRequest {
  return { song: undefined };
}

export const UpdateSessionSongRequest = {
  encode(message: UpdateSessionSongRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.song !== undefined) {
      SessionSong.encode(message.song, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionSongRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionSongRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.song = SessionSong.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionSongRequest {
    return { song: isSet(object.song) ? SessionSong.fromJSON(object.song) : undefined };
  },

  toJSON(message: UpdateSessionSongRequest): unknown {
    const obj: any = {};
    if (message.song !== undefined) {
      obj.song = SessionSong.toJSON(message.song);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionSongRequest>, I>>(base?: I): UpdateSessionSongRequest {
    return UpdateSessionSongRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionSongRequest>, I>>(object: I): UpdateSessionSongRequest {
    const message = createBaseUpdateSessionSongRequest();
    message.song = (object.song !== undefined && object.song !== null)
      ? SessionSong.fromPartial(object.song)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionSongResponse(): UpdateSessionSongResponse {
  return { song: undefined };
}

export const UpdateSessionSongResponse = {
  encode(message: UpdateSessionSongResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.song !== undefined) {
      SessionSong.encode(message.song, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionSongResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionSongResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.song = SessionSong.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionSongResponse {
    return { song: isSet(object.song) ? SessionSong.fromJSON(object.song) : undefined };
  },

  toJSON(message: UpdateSessionSongResponse): unknown {
    const obj: any = {};
    if (message.song !== undefined) {
      obj.song = SessionSong.toJSON(message.song);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionSongResponse>, I>>(base?: I): UpdateSessionSongResponse {
    return UpdateSessionSongResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionSongResponse>, I>>(object: I): UpdateSessionSongResponse {
    const message = createBaseUpdateSessionSongResponse();
    message.song = (object.song !== undefined && object.song !== null)
      ? SessionSong.fromPartial(object.song)
      : undefined;
    return message;
  },
};

function createBaseDeleteSessionSongRequest(): DeleteSessionSongRequest {
  return {};
}

export const DeleteSessionSongRequest = {
  encode(_: DeleteSessionSongRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionSongRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionSongRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteSessionSongRequest {
    return {};
  },

  toJSON(_: DeleteSessionSongRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionSongRequest>, I>>(base?: I): DeleteSessionSongRequest {
    return DeleteSessionSongRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionSongRequest>, I>>(_: I): DeleteSessionSongRequest {
    const message = createBaseDeleteSessionSongRequest();
    return message;
  },
};

function createBaseDeleteSessionSongResponse(): DeleteSessionSongResponse {
  return { success: false };
}

export const DeleteSessionSongResponse = {
  encode(message: DeleteSessionSongResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionSongResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionSongResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionSongResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteSessionSongResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionSongResponse>, I>>(base?: I): DeleteSessionSongResponse {
    return DeleteSessionSongResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionSongResponse>, I>>(object: I): DeleteSessionSongResponse {
    const message = createBaseDeleteSessionSongResponse();
    message.success = object.success ?? false;
    return message;
  },
};

/** Session Song Service */
export interface SessionSongService {
  /** GET /sessions/{id}/songs */
  ListSessionSongs(request: ListSessionSongsRequest): Promise<ListSessionSongsResponse>;
  /** GET /sessions/{id}/songs/{songId} */
  GetSessionSong(request: GetSessionSongRequest): Promise<GetSessionSongResponse>;
  /** POST /sessions/{id}/songs */
  AddSessionSong(request: AddSessionSongRequest): Promise<AddSessionSongResponse>;
  /** PUT /sessions/{id}/songs/{songId} */
  UpdateSessionSong(request: UpdateSessionSongRequest): Promise<UpdateSessionSongResponse>;
  /** DELETE /sessions/{id}/songs/{songId} */
  DeleteSessionSong(request: DeleteSessionSongRequest): Promise<DeleteSessionSongResponse>;
}

export const SessionSongServiceServiceName = "bst.v1.SessionSongService";
export class SessionSongServiceClientImpl implements SessionSongService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionSongServiceServiceName;
    this.rpc = rpc;
    this.ListSessionSongs = this.ListSessionSongs.bind(this);
    this.GetSessionSong = this.GetSessionSong.bind(this);
    this.AddSessionSong = this.AddSessionSong.bind(this);
    this.UpdateSessionSong = this.UpdateSessionSong.bind(this);
    this.DeleteSessionSong = this.DeleteSessionSong.bind(this);
  }
  ListSessionSongs(request: ListSessionSongsRequest): Promise<ListSessionSongsResponse> {
    const data = ListSessionSongsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSessionSongs", data);
    return promise.then((data) => ListSessionSongsResponse.decode(_m0.Reader.create(data)));
  }

  GetSessionSong(request: GetSessionSongRequest): Promise<GetSessionSongResponse> {
    const data = GetSessionSongRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSessionSong", data);
    return promise.then((data) => GetSessionSongResponse.decode(_m0.Reader.create(data)));
  }

  AddSessionSong(request: AddSessionSongRequest): Promise<AddSessionSongResponse> {
    const data = AddSessionSongRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSessionSong", data);
    return promise.then((data) => AddSessionSongResponse.decode(_m0.Reader.create(data)));
  }

  UpdateSessionSong(request: UpdateSessionSongRequest): Promise<UpdateSessionSongResponse> {
    const data = UpdateSessionSongRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSessionSong", data);
    return promise.then((data) => UpdateSessionSongResponse.decode(_m0.Reader.create(data)));
  }

  DeleteSessionSong(request: DeleteSessionSongRequest): Promise<DeleteSessionSongResponse> {
    const data = DeleteSessionSongRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteSessionSong", data);
    return promise.then((data) => DeleteSessionSongResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Part, Song } from "./content";
import { Party } from "./party";
import { User } from "./user";

export const protobufPackage = "bst.v1";

export enum SessionStatus {
  SESSION_STATUS_UNSPECIFIED = 0,
  SESSION_STATUS_BEFORE_ENTRY = 1,
  SESSION_STATUS_ENTRY_OPEN = 2,
  SESSION_STATUS_ENTRY_CLOSE = 3,
  SESSION_STATUS_APPROACHING = 4,
  SESSION_STATUS_ONGOING = 5,
  SESSION_STATUS_COMPLETED = 6,
  SESSION_STATUS_CANCELLED = 7,
  UNRECOGNIZED = -1,
}

export function sessionStatusFromJSON(object: any): SessionStatus {
  switch (object) {
    case 0:
    case "SESSION_STATUS_UNSPECIFIED":
      return SessionStatus.SESSION_STATUS_UNSPECIFIED;
    case 1:
    case "SESSION_STATUS_BEFORE_ENTRY":
      return SessionStatus.SESSION_STATUS_BEFORE_ENTRY;
    case 2:
    case "SESSION_STATUS_ENTRY_OPEN":
      return SessionStatus.SESSION_STATUS_ENTRY_OPEN;
    case 3:
    case "SESSION_STATUS_ENTRY_CLOSE":
      return SessionStatus.SESSION_STATUS_ENTRY_CLOSE;
    case 4:
    case "SESSION_STATUS_APPROACHING":
      return SessionStatus.SESSION_STATUS_APPROACHING;
    case 5:
    case "SESSION_STATUS_ONGOING":
      return SessionStatus.SESSION_STATUS_ONGOING;
    case 6:
    case "SESSION_STATUS_COMPLETED":
      return SessionStatus.SESSION_STATUS_COMPLETED;
    case 7:
    case "SESSION_STATUS_CANCELLED":
      return SessionStatus.SESSION_STATUS_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionStatus.UNRECOGNIZED;
  }
}

export function sessionStatusToJSON(object: SessionStatus): string {
  switch (object) {
    case SessionStatus.SESSION_STATUS_UNSPECIFIED:
      return "SESSION_STATUS_UNSPECIFIED";
    case SessionStatus.SESSION_STATUS_BEFORE_ENTRY:
      return "SESSION_STATUS_BEFORE_ENTRY";
    case SessionStatus.SESSION_STATUS_ENTRY_OPEN:
      return "SESSION_STATUS_ENTRY_OPEN";
    case SessionStatus.SESSION_STATUS_ENTRY_CLOSE:
      return "SESSION_STATUS_ENTRY_CLOSE";
    case SessionStatus.SESSION_STATUS_APPROACHING:
      return "SESSION_STATUS_APPROACHING";
    case SessionStatus.SESSION_STATUS_ONGOING:
      return "SESSION_STATUS_ONGOING";
    case SessionStatus.SESSION_STATUS_COMPLETED:
      return "SESSION_STATUS_COMPLETED";
    case SessionStatus.SESSION_STATUS_CANCELLED:
      return "SESSION_STATUS_CANCELLED";
    case SessionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Participant model */
export enum SessionParticipantStatus {
  SESSION_PARTICIPANT_STATUS_UNSPECIFIED = 0,
  SESSION_PARTICIPANT_STATUS_CONFIRMED = 1,
  SESSION_PARTICIPANT_STATUS_CANCELLED = 2,
  UNRECOGNIZED = -1,
}

export function sessionParticipantStatusFromJSON(object: any): SessionParticipantStatus {
  switch (object) {
    case 0:
    case "SESSION_PARTICIPANT_STATUS_UNSPECIFIED":
      return SessionParticipantStatus.SESSION_PARTICIPANT_STATUS_UNSPECIFIED;
    case 1:
    case "SESSION_PARTICIPANT_STATUS_CONFIRMED":
      return SessionParticipantStatus.SESSION_PARTICIPANT_STATUS_CONFIRMED;
    case 2:
    case "SESSION_PARTICIPANT_STATUS_CANCELLED":
      return SessionParticipantStatus.SESSION_PARTICIPANT_STATUS_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionParticipantStatus.UNRECOGNIZED;
  }
}

export function sessionParticipantStatusToJSON(object: SessionParticipantStatus): string {
  switch (object) {
    case SessionParticipantStatus.SESSION_PARTICIPANT_STATUS_UNSPECIFIED:
      return "SESSION_PARTICIPANT_STATUS_UNSPECIFIED";
    case SessionParticipantStatus.SESSION_PARTICIPANT_STATUS_CONFIRMED:
      return "SESSION_PARTICIPANT_STATUS_CONFIRMED";
    case SessionParticipantStatus.SESSION_PARTICIPANT_STATUS_CANCELLED:
      return "SESSION_PARTICIPANT_STATUS_CANCELLED";
    case SessionParticipantStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Session model */
export interface Session {
  id: number;
  title: string;
  createdAt: Date | undefined;
  entryOpen: Date | undefined;
  entryClose: Date | undefined;
  eventDate: Date | undefined;
  status: SessionStatus;
  participantsNum: number;
}

export interface SessionDetail {
  session: Session | undefined;
  description: string;
  parts: SessionPart[];
  participants: SessionParticipant[];
}

export interface SessionPart {
  /** Instruments, Vocals, etc. */
  part:
    | Part
    | undefined;
  /** Part name in the session (e.g. "Gt1", "Gt2") */
  name: string;
  /** Display order in the session */
  displayOrder: number;
  /** Max number of entries user can make */
  maxEntry: number;
}

export interface SessionTask {
  name: string;
}

export interface SessionParticipant {
  id: number;
  user: User | undefined;
  parts: SessionPart[];
  primaryPartId: number;
  status: SessionParticipantStatus;
  isOrganizer: boolean;
  isPlayer: boolean;
}

export interface SessionSongEntry {
  user: User | undefined;
  part: SessionPart | undefined;
  comment: string;
}

export interface SessionSongPart {
  part:
    | SessionPart
    | undefined;
  /** Is required to play the song */
  isRequired: boolean;
}

export interface SessionSong {
  song: Song | undefined;
  entries: SessionSongEntry[];
  parts: SessionSongPart[];
}

export interface TimetableEntry {
  type: TimetableEntry_TimetableEntryType;
  /** Index of the entry in the entities array */
  index: number;
  start: Date | undefined;
  end: Date | undefined;
}

export enum TimetableEntry_TimetableEntryType {
  TIMETABLE_ENTRY_TYPE_UNSPECIFIED = 0,
  TIMETABLE_ENTRY_TYPE_TASK = 1,
  TIMETABLE_ENTRY_TYPE_PERFORMANCE = 2,
  TIMETABLE_ENTRY_TYPE_PARTY = 3,
  UNRECOGNIZED = -1,
}

export function timetableEntry_TimetableEntryTypeFromJSON(object: any): TimetableEntry_TimetableEntryType {
  switch (object) {
    case 0:
    case "TIMETABLE_ENTRY_TYPE_UNSPECIFIED":
      return TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_UNSPECIFIED;
    case 1:
    case "TIMETABLE_ENTRY_TYPE_TASK":
      return TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_TASK;
    case 2:
    case "TIMETABLE_ENTRY_TYPE_PERFORMANCE":
      return TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_PERFORMANCE;
    case 3:
    case "TIMETABLE_ENTRY_TYPE_PARTY":
      return TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_PARTY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimetableEntry_TimetableEntryType.UNRECOGNIZED;
  }
}

export function timetableEntry_TimetableEntryTypeToJSON(object: TimetableEntry_TimetableEntryType): string {
  switch (object) {
    case TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_UNSPECIFIED:
      return "TIMETABLE_ENTRY_TYPE_UNSPECIFIED";
    case TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_TASK:
      return "TIMETABLE_ENTRY_TYPE_TASK";
    case TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_PERFORMANCE:
      return "TIMETABLE_ENTRY_TYPE_PERFORMANCE";
    case TimetableEntry_TimetableEntryType.TIMETABLE_ENTRY_TYPE_PARTY:
      return "TIMETABLE_ENTRY_TYPE_PARTY";
    case TimetableEntry_TimetableEntryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Timetable {
  entries: TimetableEntry[];
  /** Entities of each timetable entry */
  tasks: SessionTask[];
  /** For TimetableEntryType.PERFORMANCE */
  sessionSongs: SessionSong[];
  /** For TimetableEntryType.PARTY */
  parties: Party[];
}

export interface SessionFeedback {
  score: number;
  comment: string;
  user: User | undefined;
  createdAt: Date | undefined;
}

function createBaseSession(): Session {
  return {
    id: 0,
    title: "",
    createdAt: undefined,
    entryOpen: undefined,
    entryClose: undefined,
    eventDate: undefined,
    status: 0,
    participantsNum: 0,
  };
}

export const Session = {
  encode(message: Session, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();
    }
    if (message.entryOpen !== undefined) {
      Timestamp.encode(toTimestamp(message.entryOpen), writer.uint32(34).fork()).ldelim();
    }
    if (message.entryClose !== undefined) {
      Timestamp.encode(toTimestamp(message.entryClose), writer.uint32(42).fork()).ldelim();
    }
    if (message.eventDate !== undefined) {
      Timestamp.encode(toTimestamp(message.eventDate), writer.uint32(50).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    if (message.participantsNum !== 0) {
      writer.uint32(64).int32(message.participantsNum);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Session {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.entryOpen = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.entryClose = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.eventDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.participantsNum = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      entryOpen: isSet(object.entryOpen) ? fromJsonTimestamp(object.entryOpen) : undefined,
      entryClose: isSet(object.entryClose) ? fromJsonTimestamp(object.entryClose) : undefined,
      eventDate: isSet(object.eventDate) ? fromJsonTimestamp(object.eventDate) : undefined,
      status: isSet(object.status) ? sessionStatusFromJSON(object.status) : 0,
      participantsNum: isSet(object.participantsNum) ? globalThis.Number(object.participantsNum) : 0,
    };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.entryOpen !== undefined) {
      obj.entryOpen = message.entryOpen.toISOString();
    }
    if (message.entryClose !== undefined) {
      obj.entryClose = message.entryClose.toISOString();
    }
    if (message.eventDate !== undefined) {
      obj.eventDate = message.eventDate.toISOString();
    }
    if (message.status !== 0) {
      obj.status = sessionStatusToJSON(message.status);
    }
    if (message.participantsNum !== 0) {
      obj.participantsNum = Math.round(message.participantsNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Session>, I>>(base?: I): Session {
    return Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Session>, I>>(object: I): Session {
    const message = createBaseSession();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.entryOpen = object.entryOpen ?? undefined;
    message.entryClose = object.entryClose ?? undefined;
    message.eventDate = object.eventDate ?? undefined;
    message.status = object.status ?? 0;
    message.participantsNum = object.participantsNum ?? 0;
    return message;
  },
};

function createBaseSessionDetail(): SessionDetail {
  return { session: undefined, description: "", parts: [], participants: [] };
}

export const SessionDetail = {
  encode(message: SessionDetail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.session !== undefined) {
      Session.encode(message.session, writer.uint32(10).fork()).ldelim();
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.parts) {
      SessionPart.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.participants) {
      SessionParticipant.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionDetail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.session = Session.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parts.push(SessionPart.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.participants.push(SessionParticipant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionDetail {
    return {
      session: isSet(object.session) ? Session.fromJSON(object.session) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      parts: globalThis.Array.isArray(object?.parts) ? object.parts.map((e: any) => SessionPart.fromJSON(e)) : [],
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => SessionParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SessionDetail): unknown {
    const obj: any = {};
    if (message.session !== undefined) {
      obj.session = Session.toJSON(message.session);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => SessionPart.toJSON(e));
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => SessionParticipant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionDetail>, I>>(base?: I): SessionDetail {
    return SessionDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionDetail>, I>>(object: I): SessionDetail {
    const message = createBaseSessionDetail();
    message.session = (object.session !== undefined && object.session !== null)
      ? Session.fromPartial(object.session)
      : undefined;
    message.description = object.description ?? "";
    message.parts = object.parts?.map((e) => SessionPart.fromPartial(e)) || [];
    message.participants = object.participants?.map((e) => SessionParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSessionPart(): SessionPart {
  return { part: undefined, name: "", displayOrder: 0, maxEntry: 0 };
}

export const SessionPart = {
  encode(message: SessionPart, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      Part.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.displayOrder !== 0) {
      writer.uint32(24).int32(message.displayOrder);
    }
    if (message.maxEntry !== 0) {
      writer.uint32(32).int32(message.maxEntry);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionPart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionPart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = Part.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.displayOrder = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxEntry = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionPart {
    return {
      part: isSet(object.part) ? Part.fromJSON(object.part) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayOrder: isSet(object.displayOrder) ? globalThis.Number(object.displayOrder) : 0,
      maxEntry: isSet(object.maxEntry) ? globalThis.Number(object.maxEntry) : 0,
    };
  },

  toJSON(message: SessionPart): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = Part.toJSON(message.part);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayOrder !== 0) {
      obj.displayOrder = Math.round(message.displayOrder);
    }
    if (message.maxEntry !== 0) {
      obj.maxEntry = Math.round(message.maxEntry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionPart>, I>>(base?: I): SessionPart {
    return SessionPart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionPart>, I>>(object: I): SessionPart {
    const message = createBaseSessionPart();
    message.part = (object.part !== undefined && object.part !== null) ? Part.fromPartial(object.part) : undefined;
    message.name = object.name ?? "";
    message.displayOrder = object.displayOrder ?? 0;
    message.maxEntry = object.maxEntry ?? 0;
    return message;
  },
};

function createBaseSessionTask(): SessionTask {
  return { name: "" };
}

export const SessionTask = {
  encode(message: SessionTask, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionTask {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionTask {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: SessionTask): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionTask>, I>>(base?: I): SessionTask {
    return SessionTask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionTask>, I>>(object: I): SessionTask {
    const message = createBaseSessionTask();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSessionParticipant(): SessionParticipant {
  return { id: 0, user: undefined, parts: [], primaryPartId: 0, status: 0, isOrganizer: false, isPlayer: false };
}

export const SessionParticipant = {
  encode(message: SessionParticipant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.parts) {
      SessionPart.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.primaryPartId !== 0) {
      writer.uint32(32).int32(message.primaryPartId);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.isOrganizer !== false) {
      writer.uint32(48).bool(message.isOrganizer);
    }
    if (message.isPlayer !== false) {
      writer.uint32(56).bool(message.isPlayer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionParticipant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parts.push(SessionPart.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.primaryPartId = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isOrganizer = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isPlayer = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionParticipant {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      parts: globalThis.Array.isArray(object?.parts) ? object.parts.map((e: any) => SessionPart.fromJSON(e)) : [],
      primaryPartId: isSet(object.primaryPartId) ? globalThis.Number(object.primaryPartId) : 0,
      status: isSet(object.status) ? sessionParticipantStatusFromJSON(object.status) : 0,
      isOrganizer: isSet(object.isOrganizer) ? globalThis.Boolean(object.isOrganizer) : false,
      isPlayer: isSet(object.isPlayer) ? globalThis.Boolean(object.isPlayer) : false,
    };
  },

  toJSON(message: SessionParticipant): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => SessionPart.toJSON(e));
    }
    if (message.primaryPartId !== 0) {
      obj.primaryPartId = Math.round(message.primaryPartId);
    }
    if (message.status !== 0) {
      obj.status = sessionParticipantStatusToJSON(message.status);
    }
    if (message.isOrganizer !== false) {
      obj.isOrganizer = message.isOrganizer;
    }
    if (message.isPlayer !== false) {
      obj.isPlayer = message.isPlayer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionParticipant>, I>>(base?: I): SessionParticipant {
    return SessionParticipant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionParticipant>, I>>(object: I): SessionParticipant {
    const message = createBaseSessionParticipant();
    message.id = object.id ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.parts = object.parts?.map((e) => SessionPart.fromPartial(e)) || [];
    message.primaryPartId = object.primaryPartId ?? 0;
    message.status = object.status ?? 0;
    message.isOrganizer = object.isOrganizer ?? false;
    message.isPlayer = object.isPlayer ?? false;
    return message;
  },
};

function createBaseSessionSongEntry(): SessionSongEntry {
  return { user: undefined, part: undefined, comment: "" };
}

export const SessionSongEntry = {
  encode(message: SessionSongEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    if (message.part !== undefined) {
      SessionPart.encode(message.part, writer.uint32(18).fork()).ldelim();
    }
    if (message.comment !== "") {
      writer.uint32(26).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionSongEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionSongEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.part = SessionPart.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionSongEntry {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      part: isSet(object.part) ? SessionPart.fromJSON(object.part) : undefined,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: SessionSongEntry): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.part !== undefined) {
      obj.part = SessionPart.toJSON(message.part);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionSongEntry>, I>>(base?: I): SessionSongEntry {
    return SessionSongEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionSongEntry>, I>>(object: I): SessionSongEntry {
    const message = createBaseSessionSongEntry();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.part = (object.part !== undefined && object.part !== null)
      ? SessionPart.fromPartial(object.part)
      : undefined;
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseSessionSongPart(): SessionSongPart {
  return { part: undefined, isRequired: false };
}

export const SessionSongPart = {
  encode(message: SessionSongPart, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      SessionPart.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    if (message.isRequired !== false) {
      writer.uint32(16).bool(message.isRequired);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionSongPart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionSongPart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = SessionPart.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isRequired = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionSongPart {
    return {
      part: isSet(object.part) ? SessionPart.fromJSON(object.part) : undefined,
      isRequired: isSet(object.isRequired) ? globalThis.Boolean(object.isRequired) : false,
    };
  },

  toJSON(message: SessionSongPart): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = SessionPart.toJSON(message.part);
    }
    if (message.isRequired !== false) {
      obj.isRequired = message.isRequired;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionSongPart>, I>>(base?: I): SessionSongPart {
    return SessionSongPart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionSongPart>, I>>(object: I): SessionSongPart {
    const message = createBaseSessionSongPart();
    message.part = (object.part !== undefined && object.part !== null)
      ? SessionPart.fromPartial(object.part)
      : undefined;
    message.isRequired = object.isRequired ?? false;
    return message;
  },
};

function createBaseSessionSong(): SessionSong {
  return { song: undefined, entries: [], parts: [] };
}

export const SessionSong = {
  encode(message: SessionSong, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.song !== undefined) {
      Song.encode(message.song, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.entries) {
      SessionSongEntry.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.parts) {
      SessionSongPart.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionSong {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionSong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.song = Song.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entries.push(SessionSongEntry.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parts.push(SessionSongPart.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionSong {
    return {
      song: isSet(object.song) ? Song.fromJSON(object.song) : undefined,
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => SessionSongEntry.fromJSON(e))
        : [],
      parts: globalThis.Array.isArray(object?.parts) ? object.parts.map((e: any) => SessionSongPart.fromJSON(e)) : [],
    };
  },

  toJSON(message: SessionSong): unknown {
    const obj: any = {};
    if (message.song !== undefined) {
      obj.song = Song.toJSON(message.song);
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => SessionSongEntry.toJSON(e));
    }
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => SessionSongPart.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionSong>, I>>(base?: I): SessionSong {
    return SessionSong.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionSong>, I>>(object: I): SessionSong {
    const message = createBaseSessionSong();
    message.song = (object.song !== undefined && object.song !== null) ? Song.fromPartial(object.song) : undefined;
    message.entries = object.entries?.map((e) => SessionSongEntry.fromPartial(e)) || [];
    message.parts = object.parts?.map((e) => SessionSongPart.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTimetableEntry(): TimetableEntry {
  return { type: 0, index: 0, start: undefined, end: undefined };
}

export const TimetableEntry = {
  encode(message: TimetableEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.index !== 0) {
      writer.uint32(16).int32(message.index);
    }
    if (message.start !== undefined) {
      Timestamp.encode(toTimestamp(message.start), writer.uint32(26).fork()).ldelim();
    }
    if (message.end !== undefined) {
      Timestamp.encode(toTimestamp(message.end), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TimetableEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimetableEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.start = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.end = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimetableEntry {
    return {
      type: isSet(object.type) ? timetableEntry_TimetableEntryTypeFromJSON(object.type) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      start: isSet(object.start) ? fromJsonTimestamp(object.start) : undefined,
      end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined,
    };
  },

  toJSON(message: TimetableEntry): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = timetableEntry_TimetableEntryTypeToJSON(message.type);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.start !== undefined) {
      obj.start = message.start.toISOString();
    }
    if (message.end !== undefined) {
      obj.end = message.end.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimetableEntry>, I>>(base?: I): TimetableEntry {
    return TimetableEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimetableEntry>, I>>(object: I): TimetableEntry {
    const message = createBaseTimetableEntry();
    message.type = object.type ?? 0;
    message.index = object.index ?? 0;
    message.start = object.start ?? undefined;
    message.end = object.end ?? undefined;
    return message;
  },
};

function createBaseTimetable(): Timetable {
  return { entries: [], tasks: [], sessionSongs: [], parties: [] };
}

export const Timetable = {
  encode(message: Timetable, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.entries) {
      TimetableEntry.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.tasks) {
      SessionTask.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.sessionSongs) {
      SessionSong.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.parties) {
      Party.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Timetable {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimetable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entries.push(TimetableEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tasks.push(SessionTask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sessionSongs.push(SessionSong.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parties.push(Party.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Timetable {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => TimetableEntry.fromJSON(e))
        : [],
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => SessionTask.fromJSON(e)) : [],
      sessionSongs: globalThis.Array.isArray(object?.sessionSongs)
        ? object.sessionSongs.map((e: any) => SessionSong.fromJSON(e))
        : [],
      parties: globalThis.Array.isArray(object?.parties) ? object.parties.map((e: any) => Party.fromJSON(e)) : [],
    };
  },

  toJSON(message: Timetable): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => TimetableEntry.toJSON(e));
    }
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => SessionTask.toJSON(e));
    }
    if (message.sessionSongs?.length) {
      obj.sessionSongs = message.sessionSongs.map((e) => SessionSong.toJSON(e));
    }
    if (message.parties?.length) {
      obj.parties = message.parties.map((e) => Party.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Timetable>, I>>(base?: I): Timetable {
    return Timetable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Timetable>, I>>(object: I): Timetable {
    const message = createBaseTimetable();
    message.entries = object.entries?.map((e) => TimetableEntry.fromPartial(e)) || [];
    message.tasks = object.tasks?.map((e) => SessionTask.fromPartial(e)) || [];
    message.sessionSongs = object.sessionSongs?.map((e) => SessionSong.fromPartial(e)) || [];
    message.parties = object.parties?.map((e) => Party.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSessionFeedback(): SessionFeedback {
  return { score: 0, comment: "", user: undefined, createdAt: undefined };
}

export const SessionFeedback = {
  encode(message: SessionFeedback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.score !== 0) {
      writer.uint32(8).int32(message.score);
    }
    if (message.comment !== "") {
      writer.uint32(18).string(message.comment);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(26).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionFeedback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionFeedback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.score = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.comment = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionFeedback {
    return {
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: SessionFeedback): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionFeedback>, I>>(base?: I): SessionFeedback {
    return SessionFeedback.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionFeedback>, I>>(object: I): SessionFeedback {
    const message = createBaseSessionFeedback();
    message.score = object.score ?? 0;
    message.comment = object.comment ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

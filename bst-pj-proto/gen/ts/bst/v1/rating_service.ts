// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/rating_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty";
import { Rating, RatingTargetType, ratingTargetTypeFromJSON, ratingTargetTypeToJSON } from "./rating";

export const protobufPackage = "bst.v1";

export interface CreateRatingRequest {
  userId: number;
  targetType: RatingTargetType;
  targetId: number;
  rating: number;
  comment: string;
}

export interface ListRatingsRequest {
  targetType: RatingTargetType;
  targetId: number;
  userId: number;
  page: number;
  pageSize: number;
}

export interface ListRatingsResponse {
  ratings: Rating[];
  totalCount: number;
  currentPage: number;
  totalPages: number;
}

export interface UpdateRatingRequest {
  id: number;
  rating: number;
  comment: string;
}

export interface DeleteRatingRequest {
  id: number;
}

function createBaseCreateRatingRequest(): CreateRatingRequest {
  return { userId: 0, targetType: 0, targetId: 0, rating: 0, comment: "" };
}

export const CreateRatingRequest = {
  encode(message: CreateRatingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.targetType !== 0) {
      writer.uint32(16).int32(message.targetType);
    }
    if (message.targetId !== 0) {
      writer.uint32(24).int32(message.targetId);
    }
    if (message.rating !== 0) {
      writer.uint32(32).int32(message.rating);
    }
    if (message.comment !== "") {
      writer.uint32(42).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateRatingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRatingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.targetType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.rating = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRatingRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      targetType: isSet(object.targetType) ? ratingTargetTypeFromJSON(object.targetType) : 0,
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: CreateRatingRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.targetType !== 0) {
      obj.targetType = ratingTargetTypeToJSON(message.targetType);
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRatingRequest>, I>>(base?: I): CreateRatingRequest {
    return CreateRatingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRatingRequest>, I>>(object: I): CreateRatingRequest {
    const message = createBaseCreateRatingRequest();
    message.userId = object.userId ?? 0;
    message.targetType = object.targetType ?? 0;
    message.targetId = object.targetId ?? 0;
    message.rating = object.rating ?? 0;
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseListRatingsRequest(): ListRatingsRequest {
  return { targetType: 0, targetId: 0, userId: 0, page: 0, pageSize: 0 };
}

export const ListRatingsRequest = {
  encode(message: ListRatingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetType !== 0) {
      writer.uint32(8).int32(message.targetType);
    }
    if (message.targetId !== 0) {
      writer.uint32(16).int32(message.targetId);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(32).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListRatingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRatingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRatingsRequest {
    return {
      targetType: isSet(object.targetType) ? ratingTargetTypeFromJSON(object.targetType) : 0,
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListRatingsRequest): unknown {
    const obj: any = {};
    if (message.targetType !== 0) {
      obj.targetType = ratingTargetTypeToJSON(message.targetType);
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRatingsRequest>, I>>(base?: I): ListRatingsRequest {
    return ListRatingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRatingsRequest>, I>>(object: I): ListRatingsRequest {
    const message = createBaseListRatingsRequest();
    message.targetType = object.targetType ?? 0;
    message.targetId = object.targetId ?? 0;
    message.userId = object.userId ?? 0;
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListRatingsResponse(): ListRatingsResponse {
  return { ratings: [], totalCount: 0, currentPage: 0, totalPages: 0 };
}

export const ListRatingsResponse = {
  encode(message: ListRatingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.ratings) {
      Rating.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.currentPage !== 0) {
      writer.uint32(24).int32(message.currentPage);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListRatingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRatingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ratings.push(Rating.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.currentPage = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRatingsResponse {
    return {
      ratings: globalThis.Array.isArray(object?.ratings) ? object.ratings.map((e: any) => Rating.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      currentPage: isSet(object.currentPage) ? globalThis.Number(object.currentPage) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListRatingsResponse): unknown {
    const obj: any = {};
    if (message.ratings?.length) {
      obj.ratings = message.ratings.map((e) => Rating.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.currentPage !== 0) {
      obj.currentPage = Math.round(message.currentPage);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRatingsResponse>, I>>(base?: I): ListRatingsResponse {
    return ListRatingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRatingsResponse>, I>>(object: I): ListRatingsResponse {
    const message = createBaseListRatingsResponse();
    message.ratings = object.ratings?.map((e) => Rating.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.currentPage = object.currentPage ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseUpdateRatingRequest(): UpdateRatingRequest {
  return { id: 0, rating: 0, comment: "" };
}

export const UpdateRatingRequest = {
  encode(message: UpdateRatingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.rating !== 0) {
      writer.uint32(16).int32(message.rating);
    }
    if (message.comment !== "") {
      writer.uint32(26).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateRatingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRatingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rating = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRatingRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: UpdateRatingRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRatingRequest>, I>>(base?: I): UpdateRatingRequest {
    return UpdateRatingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRatingRequest>, I>>(object: I): UpdateRatingRequest {
    const message = createBaseUpdateRatingRequest();
    message.id = object.id ?? 0;
    message.rating = object.rating ?? 0;
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseDeleteRatingRequest(): DeleteRatingRequest {
  return { id: 0 };
}

export const DeleteRatingRequest = {
  encode(message: DeleteRatingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteRatingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRatingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRatingRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteRatingRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRatingRequest>, I>>(base?: I): DeleteRatingRequest {
    return DeleteRatingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRatingRequest>, I>>(object: I): DeleteRatingRequest {
    const message = createBaseDeleteRatingRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

export interface RatingService {
  CreateRating(request: CreateRatingRequest): Promise<Rating>;
  ListRatings(request: ListRatingsRequest): Promise<ListRatingsResponse>;
  UpdateRating(request: UpdateRatingRequest): Promise<Rating>;
  DeleteRating(request: DeleteRatingRequest): Promise<Empty>;
}

export const RatingServiceServiceName = "bst.v1.RatingService";
export class RatingServiceClientImpl implements RatingService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RatingServiceServiceName;
    this.rpc = rpc;
    this.CreateRating = this.CreateRating.bind(this);
    this.ListRatings = this.ListRatings.bind(this);
    this.UpdateRating = this.UpdateRating.bind(this);
    this.DeleteRating = this.DeleteRating.bind(this);
  }
  CreateRating(request: CreateRatingRequest): Promise<Rating> {
    const data = CreateRatingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateRating", data);
    return promise.then((data) => Rating.decode(_m0.Reader.create(data)));
  }

  ListRatings(request: ListRatingsRequest): Promise<ListRatingsResponse> {
    const data = ListRatingsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListRatings", data);
    return promise.then((data) => ListRatingsResponse.decode(_m0.Reader.create(data)));
  }

  UpdateRating(request: UpdateRatingRequest): Promise<Rating> {
    const data = UpdateRatingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateRating", data);
    return promise.then((data) => Rating.decode(_m0.Reader.create(data)));
  }

  DeleteRating(request: DeleteRatingRequest): Promise<Empty> {
    const data = DeleteRatingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteRating", data);
    return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/party.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Location } from "./location";
import { User } from "./user";

export const protobufPackage = "bst.v1";

export enum PartyParticipantRole {
  PARTY_PARTICIPANT_ROLE_UNSPECIFIED = 0,
  PARTY_PARTICIPANT_ROLE_HOST = 1,
  PARTY_PARTICIPANT_ROLE_PARTICIPANT = 2,
  PARTY_PARTICIPANT_ROLE_OBSERVER = 3,
  UNRECOGNIZED = -1,
}

export function partyParticipantRoleFromJSON(object: any): PartyParticipantRole {
  switch (object) {
    case 0:
    case "PARTY_PARTICIPANT_ROLE_UNSPECIFIED":
      return PartyParticipantRole.PARTY_PARTICIPANT_ROLE_UNSPECIFIED;
    case 1:
    case "PARTY_PARTICIPANT_ROLE_HOST":
      return PartyParticipantRole.PARTY_PARTICIPANT_ROLE_HOST;
    case 2:
    case "PARTY_PARTICIPANT_ROLE_PARTICIPANT":
      return PartyParticipantRole.PARTY_PARTICIPANT_ROLE_PARTICIPANT;
    case 3:
    case "PARTY_PARTICIPANT_ROLE_OBSERVER":
      return PartyParticipantRole.PARTY_PARTICIPANT_ROLE_OBSERVER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PartyParticipantRole.UNRECOGNIZED;
  }
}

export function partyParticipantRoleToJSON(object: PartyParticipantRole): string {
  switch (object) {
    case PartyParticipantRole.PARTY_PARTICIPANT_ROLE_UNSPECIFIED:
      return "PARTY_PARTICIPANT_ROLE_UNSPECIFIED";
    case PartyParticipantRole.PARTY_PARTICIPANT_ROLE_HOST:
      return "PARTY_PARTICIPANT_ROLE_HOST";
    case PartyParticipantRole.PARTY_PARTICIPANT_ROLE_PARTICIPANT:
      return "PARTY_PARTICIPANT_ROLE_PARTICIPANT";
    case PartyParticipantRole.PARTY_PARTICIPANT_ROLE_OBSERVER:
      return "PARTY_PARTICIPANT_ROLE_OBSERVER";
    case PartyParticipantRole.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PartyParticipantStatus {
  PARTY_PARTICIPANT_STATUS_UNSPECIFIED = 0,
  PARTY_PARTICIPANT_STATUS_PENDING = 1,
  PARTY_PARTICIPANT_STATUS_CONFIRMED = 2,
  PARTY_PARTICIPANT_STATUS_CANCELLED = 3,
  UNRECOGNIZED = -1,
}

export function partyParticipantStatusFromJSON(object: any): PartyParticipantStatus {
  switch (object) {
    case 0:
    case "PARTY_PARTICIPANT_STATUS_UNSPECIFIED":
      return PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_UNSPECIFIED;
    case 1:
    case "PARTY_PARTICIPANT_STATUS_PENDING":
      return PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_PENDING;
    case 2:
    case "PARTY_PARTICIPANT_STATUS_CONFIRMED":
      return PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_CONFIRMED;
    case 3:
    case "PARTY_PARTICIPANT_STATUS_CANCELLED":
      return PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PartyParticipantStatus.UNRECOGNIZED;
  }
}

export function partyParticipantStatusToJSON(object: PartyParticipantStatus): string {
  switch (object) {
    case PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_UNSPECIFIED:
      return "PARTY_PARTICIPANT_STATUS_UNSPECIFIED";
    case PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_PENDING:
      return "PARTY_PARTICIPANT_STATUS_PENDING";
    case PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_CONFIRMED:
      return "PARTY_PARTICIPANT_STATUS_CONFIRMED";
    case PartyParticipantStatus.PARTY_PARTICIPANT_STATUS_CANCELLED:
      return "PARTY_PARTICIPANT_STATUS_CANCELLED";
    case PartyParticipantStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PartyParticipant {
  user: User | undefined;
  role: PartyParticipantRole;
  status: PartyParticipantStatus;
}

export interface Party {
  participants: PartyParticipant[];
  location: Location | undefined;
  fee: number;
  startAt: Date | undefined;
  endAt: Date | undefined;
}

function createBasePartyParticipant(): PartyParticipant {
  return { user: undefined, role: 0, status: 0 };
}

export const PartyParticipant = {
  encode(message: PartyParticipant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    if (message.role !== 0) {
      writer.uint32(16).int32(message.role);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartyParticipant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartyParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartyParticipant {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      role: isSet(object.role) ? partyParticipantRoleFromJSON(object.role) : 0,
      status: isSet(object.status) ? partyParticipantStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: PartyParticipant): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.role !== 0) {
      obj.role = partyParticipantRoleToJSON(message.role);
    }
    if (message.status !== 0) {
      obj.status = partyParticipantStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PartyParticipant>, I>>(base?: I): PartyParticipant {
    return PartyParticipant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PartyParticipant>, I>>(object: I): PartyParticipant {
    const message = createBasePartyParticipant();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.role = object.role ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseParty(): Party {
  return { participants: [], location: undefined, fee: 0, startAt: undefined, endAt: undefined };
}

export const Party = {
  encode(message: Party, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.participants) {
      PartyParticipant.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(18).fork()).ldelim();
    }
    if (message.fee !== 0) {
      writer.uint32(24).int32(message.fee);
    }
    if (message.startAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.endAt !== undefined) {
      Timestamp.encode(toTimestamp(message.endAt), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Party {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.participants.push(PartyParticipant.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fee = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Party {
    return {
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => PartyParticipant.fromJSON(e))
        : [],
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      startAt: isSet(object.startAt) ? fromJsonTimestamp(object.startAt) : undefined,
      endAt: isSet(object.endAt) ? fromJsonTimestamp(object.endAt) : undefined,
    };
  },

  toJSON(message: Party): unknown {
    const obj: any = {};
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => PartyParticipant.toJSON(e));
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.startAt !== undefined) {
      obj.startAt = message.startAt.toISOString();
    }
    if (message.endAt !== undefined) {
      obj.endAt = message.endAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Party>, I>>(base?: I): Party {
    return Party.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Party>, I>>(object: I): Party {
    const message = createBaseParty();
    message.participants = object.participants?.map((e) => PartyParticipant.fromPartial(e)) || [];
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.fee = object.fee ?? 0;
    message.startAt = object.startAt ?? undefined;
    message.endAt = object.endAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

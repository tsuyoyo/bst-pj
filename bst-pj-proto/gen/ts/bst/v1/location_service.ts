// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/location_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Area } from "./area";
import { Location } from "./location";

export const protobufPackage = "bst.v1";

export interface CreateLocationRequest {
  name: string;
  googleMapsUrl: string;
  additionalInfo: string;
  prefectureId: number;
}

export interface CreateLocationResponse {
  location: Location | undefined;
}

export interface ListLocationsRequest {
  pageSize: number;
  pageToken: string;
  area: Area | undefined;
}

export interface ListLocationsResponse {
  locations: Location[];
  nextPageToken: string;
  totalSize: number;
}

export interface GetLocationRequest {
  locationId: number;
}

export interface GetLocationResponse {
  location: Location | undefined;
}

export interface UpdateLocationRequest {
  locationId: number;
  name?: string | undefined;
  googleMapsUrl?: string | undefined;
  additionalInfo?: string | undefined;
  prefectureId?: number | undefined;
}

export interface UpdateLocationResponse {
  location: Location | undefined;
}

export interface DeleteLocationRequest {
  locationId: number;
}

export interface DeleteLocationResponse {
  success: boolean;
}

function createBaseCreateLocationRequest(): CreateLocationRequest {
  return { name: "", googleMapsUrl: "", additionalInfo: "", prefectureId: 0 };
}

export const CreateLocationRequest = {
  encode(message: CreateLocationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.googleMapsUrl !== "") {
      writer.uint32(18).string(message.googleMapsUrl);
    }
    if (message.additionalInfo !== "") {
      writer.uint32(26).string(message.additionalInfo);
    }
    if (message.prefectureId !== 0) {
      writer.uint32(32).int32(message.prefectureId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateLocationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.googleMapsUrl = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.additionalInfo = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.prefectureId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLocationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      googleMapsUrl: isSet(object.googleMapsUrl) ? globalThis.String(object.googleMapsUrl) : "",
      additionalInfo: isSet(object.additionalInfo) ? globalThis.String(object.additionalInfo) : "",
      prefectureId: isSet(object.prefectureId) ? globalThis.Number(object.prefectureId) : 0,
    };
  },

  toJSON(message: CreateLocationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.googleMapsUrl !== "") {
      obj.googleMapsUrl = message.googleMapsUrl;
    }
    if (message.additionalInfo !== "") {
      obj.additionalInfo = message.additionalInfo;
    }
    if (message.prefectureId !== 0) {
      obj.prefectureId = Math.round(message.prefectureId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLocationRequest>, I>>(base?: I): CreateLocationRequest {
    return CreateLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLocationRequest>, I>>(object: I): CreateLocationRequest {
    const message = createBaseCreateLocationRequest();
    message.name = object.name ?? "";
    message.googleMapsUrl = object.googleMapsUrl ?? "";
    message.additionalInfo = object.additionalInfo ?? "";
    message.prefectureId = object.prefectureId ?? 0;
    return message;
  },
};

function createBaseCreateLocationResponse(): CreateLocationResponse {
  return { location: undefined };
}

export const CreateLocationResponse = {
  encode(message: CreateLocationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateLocationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLocationResponse {
    return { location: isSet(object.location) ? Location.fromJSON(object.location) : undefined };
  },

  toJSON(message: CreateLocationResponse): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLocationResponse>, I>>(base?: I): CreateLocationResponse {
    return CreateLocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLocationResponse>, I>>(object: I): CreateLocationResponse {
    const message = createBaseCreateLocationResponse();
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    return message;
  },
};

function createBaseListLocationsRequest(): ListLocationsRequest {
  return { pageSize: 0, pageToken: "", area: undefined };
}

export const ListLocationsRequest = {
  encode(message: ListLocationsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.area !== undefined) {
      Area.encode(message.area, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLocationsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLocationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.area = Area.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLocationsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
    };
  },

  toJSON(message: ListLocationsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.area !== undefined) {
      obj.area = Area.toJSON(message.area);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLocationsRequest>, I>>(base?: I): ListLocationsRequest {
    return ListLocationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLocationsRequest>, I>>(object: I): ListLocationsRequest {
    const message = createBaseListLocationsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
    return message;
  },
};

function createBaseListLocationsResponse(): ListLocationsResponse {
  return { locations: [], nextPageToken: "", totalSize: 0 };
}

export const ListLocationsResponse = {
  encode(message: ListLocationsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.locations) {
      Location.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLocationsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLocationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locations.push(Location.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLocationsResponse {
    return {
      locations: globalThis.Array.isArray(object?.locations)
        ? object.locations.map((e: any) => Location.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListLocationsResponse): unknown {
    const obj: any = {};
    if (message.locations?.length) {
      obj.locations = message.locations.map((e) => Location.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLocationsResponse>, I>>(base?: I): ListLocationsResponse {
    return ListLocationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLocationsResponse>, I>>(object: I): ListLocationsResponse {
    const message = createBaseListLocationsResponse();
    message.locations = object.locations?.map((e) => Location.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGetLocationRequest(): GetLocationRequest {
  return { locationId: 0 };
}

export const GetLocationRequest = {
  encode(message: GetLocationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.locationId !== 0) {
      writer.uint32(8).int32(message.locationId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLocationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locationId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocationRequest {
    return { locationId: isSet(object.locationId) ? globalThis.Number(object.locationId) : 0 };
  },

  toJSON(message: GetLocationRequest): unknown {
    const obj: any = {};
    if (message.locationId !== 0) {
      obj.locationId = Math.round(message.locationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLocationRequest>, I>>(base?: I): GetLocationRequest {
    return GetLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLocationRequest>, I>>(object: I): GetLocationRequest {
    const message = createBaseGetLocationRequest();
    message.locationId = object.locationId ?? 0;
    return message;
  },
};

function createBaseGetLocationResponse(): GetLocationResponse {
  return { location: undefined };
}

export const GetLocationResponse = {
  encode(message: GetLocationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLocationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocationResponse {
    return { location: isSet(object.location) ? Location.fromJSON(object.location) : undefined };
  },

  toJSON(message: GetLocationResponse): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLocationResponse>, I>>(base?: I): GetLocationResponse {
    return GetLocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLocationResponse>, I>>(object: I): GetLocationResponse {
    const message = createBaseGetLocationResponse();
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    return message;
  },
};

function createBaseUpdateLocationRequest(): UpdateLocationRequest {
  return {
    locationId: 0,
    name: undefined,
    googleMapsUrl: undefined,
    additionalInfo: undefined,
    prefectureId: undefined,
  };
}

export const UpdateLocationRequest = {
  encode(message: UpdateLocationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.locationId !== 0) {
      writer.uint32(8).int32(message.locationId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.googleMapsUrl !== undefined) {
      writer.uint32(26).string(message.googleMapsUrl);
    }
    if (message.additionalInfo !== undefined) {
      writer.uint32(34).string(message.additionalInfo);
    }
    if (message.prefectureId !== undefined) {
      writer.uint32(40).int32(message.prefectureId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLocationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locationId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.googleMapsUrl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.additionalInfo = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.prefectureId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLocationRequest {
    return {
      locationId: isSet(object.locationId) ? globalThis.Number(object.locationId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      googleMapsUrl: isSet(object.googleMapsUrl) ? globalThis.String(object.googleMapsUrl) : undefined,
      additionalInfo: isSet(object.additionalInfo) ? globalThis.String(object.additionalInfo) : undefined,
      prefectureId: isSet(object.prefectureId) ? globalThis.Number(object.prefectureId) : undefined,
    };
  },

  toJSON(message: UpdateLocationRequest): unknown {
    const obj: any = {};
    if (message.locationId !== 0) {
      obj.locationId = Math.round(message.locationId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.googleMapsUrl !== undefined) {
      obj.googleMapsUrl = message.googleMapsUrl;
    }
    if (message.additionalInfo !== undefined) {
      obj.additionalInfo = message.additionalInfo;
    }
    if (message.prefectureId !== undefined) {
      obj.prefectureId = Math.round(message.prefectureId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLocationRequest>, I>>(base?: I): UpdateLocationRequest {
    return UpdateLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLocationRequest>, I>>(object: I): UpdateLocationRequest {
    const message = createBaseUpdateLocationRequest();
    message.locationId = object.locationId ?? 0;
    message.name = object.name ?? undefined;
    message.googleMapsUrl = object.googleMapsUrl ?? undefined;
    message.additionalInfo = object.additionalInfo ?? undefined;
    message.prefectureId = object.prefectureId ?? undefined;
    return message;
  },
};

function createBaseUpdateLocationResponse(): UpdateLocationResponse {
  return { location: undefined };
}

export const UpdateLocationResponse = {
  encode(message: UpdateLocationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLocationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLocationResponse {
    return { location: isSet(object.location) ? Location.fromJSON(object.location) : undefined };
  },

  toJSON(message: UpdateLocationResponse): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLocationResponse>, I>>(base?: I): UpdateLocationResponse {
    return UpdateLocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLocationResponse>, I>>(object: I): UpdateLocationResponse {
    const message = createBaseUpdateLocationResponse();
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    return message;
  },
};

function createBaseDeleteLocationRequest(): DeleteLocationRequest {
  return { locationId: 0 };
}

export const DeleteLocationRequest = {
  encode(message: DeleteLocationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.locationId !== 0) {
      writer.uint32(8).int32(message.locationId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteLocationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locationId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLocationRequest {
    return { locationId: isSet(object.locationId) ? globalThis.Number(object.locationId) : 0 };
  },

  toJSON(message: DeleteLocationRequest): unknown {
    const obj: any = {};
    if (message.locationId !== 0) {
      obj.locationId = Math.round(message.locationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteLocationRequest>, I>>(base?: I): DeleteLocationRequest {
    return DeleteLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteLocationRequest>, I>>(object: I): DeleteLocationRequest {
    const message = createBaseDeleteLocationRequest();
    message.locationId = object.locationId ?? 0;
    return message;
  },
};

function createBaseDeleteLocationResponse(): DeleteLocationResponse {
  return { success: false };
}

export const DeleteLocationResponse = {
  encode(message: DeleteLocationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteLocationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLocationResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteLocationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteLocationResponse>, I>>(base?: I): DeleteLocationResponse {
    return DeleteLocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteLocationResponse>, I>>(object: I): DeleteLocationResponse {
    const message = createBaseDeleteLocationResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface LocationService {
  /** POST /locations */
  CreateLocation(request: CreateLocationRequest): Promise<CreateLocationResponse>;
  /** GET /locations */
  ListLocations(request: ListLocationsRequest): Promise<ListLocationsResponse>;
  /** GET /locations/{id} */
  GetLocation(request: GetLocationRequest): Promise<GetLocationResponse>;
  /** PUT /locations/{id} */
  UpdateLocation(request: UpdateLocationRequest): Promise<UpdateLocationResponse>;
  /** DELETE /locations/{id} */
  DeleteLocation(request: DeleteLocationRequest): Promise<DeleteLocationResponse>;
}

export const LocationServiceServiceName = "bst.v1.LocationService";
export class LocationServiceClientImpl implements LocationService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || LocationServiceServiceName;
    this.rpc = rpc;
    this.CreateLocation = this.CreateLocation.bind(this);
    this.ListLocations = this.ListLocations.bind(this);
    this.GetLocation = this.GetLocation.bind(this);
    this.UpdateLocation = this.UpdateLocation.bind(this);
    this.DeleteLocation = this.DeleteLocation.bind(this);
  }
  CreateLocation(request: CreateLocationRequest): Promise<CreateLocationResponse> {
    const data = CreateLocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateLocation", data);
    return promise.then((data) => CreateLocationResponse.decode(_m0.Reader.create(data)));
  }

  ListLocations(request: ListLocationsRequest): Promise<ListLocationsResponse> {
    const data = ListLocationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListLocations", data);
    return promise.then((data) => ListLocationsResponse.decode(_m0.Reader.create(data)));
  }

  GetLocation(request: GetLocationRequest): Promise<GetLocationResponse> {
    const data = GetLocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLocation", data);
    return promise.then((data) => GetLocationResponse.decode(_m0.Reader.create(data)));
  }

  UpdateLocation(request: UpdateLocationRequest): Promise<UpdateLocationResponse> {
    const data = UpdateLocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateLocation", data);
    return promise.then((data) => UpdateLocationResponse.decode(_m0.Reader.create(data)));
  }

  DeleteLocation(request: DeleteLocationRequest): Promise<DeleteLocationResponse> {
    const data = DeleteLocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteLocation", data);
    return promise.then((data) => DeleteLocationResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

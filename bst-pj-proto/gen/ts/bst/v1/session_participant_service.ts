// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session_participant_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  SessionParticipant,
  SessionParticipantStatus,
  sessionParticipantStatusFromJSON,
  sessionParticipantStatusToJSON,
} from "./session";

export const protobufPackage = "bst.v1";

export interface ListSessionParticipantsRequest {
}

export interface ListSessionParticipantsResponse {
  participants: SessionParticipant[];
}

export interface AddSessionParticipantRequest {
  userId: number;
  /** When it's empty, the participant is NOT player (organizer or observer) */
  parts: AddSessionParticipantRequest_SessionParticipantPart[];
}

export interface AddSessionParticipantRequest_SessionParticipantPart {
  sessionPartId: number;
  isPrimary: boolean;
}

export interface AddSessionParticipantResponse {
  sessionParticipant: SessionParticipant | undefined;
}

export interface UpdateSessionParticipantRequest {
  comment: string;
}

export interface UpdateSessionParticipantResponse {
  sessionParticipant: SessionParticipant | undefined;
}

export interface SetSessionParticipantIsAdminRequest {
  isAdmin: boolean;
}

export interface SetSessionParticipantIsAdminResponse {
  sessionParticipant: SessionParticipant | undefined;
}

export interface AddSessionParticipantPartsRequest {
  sessionPartId: number;
}

export interface AddSessionParticipantPartsResponse {
  sessionParticipant: SessionParticipant | undefined;
}

export interface UpdateSessionParticipantStatusRequest {
  status: SessionParticipantStatus;
}

export interface UpdateSessionParticipantStatusResponse {
  sessionParticipant: SessionParticipant | undefined;
}

export interface DeleteSessionParticipantRequest {
  participantId: number;
}

export interface DeleteSessionParticipantResponse {
  success: boolean;
}

function createBaseListSessionParticipantsRequest(): ListSessionParticipantsRequest {
  return {};
}

export const ListSessionParticipantsRequest = {
  encode(_: ListSessionParticipantsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionParticipantsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionParticipantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListSessionParticipantsRequest {
    return {};
  },

  toJSON(_: ListSessionParticipantsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionParticipantsRequest>, I>>(base?: I): ListSessionParticipantsRequest {
    return ListSessionParticipantsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionParticipantsRequest>, I>>(_: I): ListSessionParticipantsRequest {
    const message = createBaseListSessionParticipantsRequest();
    return message;
  },
};

function createBaseListSessionParticipantsResponse(): ListSessionParticipantsResponse {
  return { participants: [] };
}

export const ListSessionParticipantsResponse = {
  encode(message: ListSessionParticipantsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.participants) {
      SessionParticipant.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionParticipantsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionParticipantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.participants.push(SessionParticipant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionParticipantsResponse {
    return {
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => SessionParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSessionParticipantsResponse): unknown {
    const obj: any = {};
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => SessionParticipant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionParticipantsResponse>, I>>(base?: I): ListSessionParticipantsResponse {
    return ListSessionParticipantsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionParticipantsResponse>, I>>(
    object: I,
  ): ListSessionParticipantsResponse {
    const message = createBaseListSessionParticipantsResponse();
    message.participants = object.participants?.map((e) => SessionParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSessionParticipantRequest(): AddSessionParticipantRequest {
  return { userId: 0, parts: [] };
}

export const AddSessionParticipantRequest = {
  encode(message: AddSessionParticipantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    for (const v of message.parts) {
      AddSessionParticipantRequest_SessionParticipantPart.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionParticipantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parts.push(AddSessionParticipantRequest_SessionParticipantPart.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionParticipantRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      parts: globalThis.Array.isArray(object?.parts)
        ? object.parts.map((e: any) => AddSessionParticipantRequest_SessionParticipantPart.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddSessionParticipantRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => AddSessionParticipantRequest_SessionParticipantPart.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionParticipantRequest>, I>>(base?: I): AddSessionParticipantRequest {
    return AddSessionParticipantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionParticipantRequest>, I>>(object: I): AddSessionParticipantRequest {
    const message = createBaseAddSessionParticipantRequest();
    message.userId = object.userId ?? 0;
    message.parts = object.parts?.map((e) => AddSessionParticipantRequest_SessionParticipantPart.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSessionParticipantRequest_SessionParticipantPart(): AddSessionParticipantRequest_SessionParticipantPart {
  return { sessionPartId: 0, isPrimary: false };
}

export const AddSessionParticipantRequest_SessionParticipantPart = {
  encode(
    message: AddSessionParticipantRequest_SessionParticipantPart,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sessionPartId !== 0) {
      writer.uint32(8).int32(message.sessionPartId);
    }
    if (message.isPrimary !== false) {
      writer.uint32(16).bool(message.isPrimary);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionParticipantRequest_SessionParticipantPart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionParticipantRequest_SessionParticipantPart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sessionPartId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPrimary = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionParticipantRequest_SessionParticipantPart {
    return {
      sessionPartId: isSet(object.sessionPartId) ? globalThis.Number(object.sessionPartId) : 0,
      isPrimary: isSet(object.isPrimary) ? globalThis.Boolean(object.isPrimary) : false,
    };
  },

  toJSON(message: AddSessionParticipantRequest_SessionParticipantPart): unknown {
    const obj: any = {};
    if (message.sessionPartId !== 0) {
      obj.sessionPartId = Math.round(message.sessionPartId);
    }
    if (message.isPrimary !== false) {
      obj.isPrimary = message.isPrimary;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionParticipantRequest_SessionParticipantPart>, I>>(
    base?: I,
  ): AddSessionParticipantRequest_SessionParticipantPart {
    return AddSessionParticipantRequest_SessionParticipantPart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionParticipantRequest_SessionParticipantPart>, I>>(
    object: I,
  ): AddSessionParticipantRequest_SessionParticipantPart {
    const message = createBaseAddSessionParticipantRequest_SessionParticipantPart();
    message.sessionPartId = object.sessionPartId ?? 0;
    message.isPrimary = object.isPrimary ?? false;
    return message;
  },
};

function createBaseAddSessionParticipantResponse(): AddSessionParticipantResponse {
  return { sessionParticipant: undefined };
}

export const AddSessionParticipantResponse = {
  encode(message: AddSessionParticipantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionParticipant !== undefined) {
      SessionParticipant.encode(message.sessionParticipant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionParticipantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionParticipantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionParticipant = SessionParticipant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionParticipantResponse {
    return {
      sessionParticipant: isSet(object.sessionParticipant)
        ? SessionParticipant.fromJSON(object.sessionParticipant)
        : undefined,
    };
  },

  toJSON(message: AddSessionParticipantResponse): unknown {
    const obj: any = {};
    if (message.sessionParticipant !== undefined) {
      obj.sessionParticipant = SessionParticipant.toJSON(message.sessionParticipant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionParticipantResponse>, I>>(base?: I): AddSessionParticipantResponse {
    return AddSessionParticipantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionParticipantResponse>, I>>(
    object: I,
  ): AddSessionParticipantResponse {
    const message = createBaseAddSessionParticipantResponse();
    message.sessionParticipant = (object.sessionParticipant !== undefined && object.sessionParticipant !== null)
      ? SessionParticipant.fromPartial(object.sessionParticipant)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionParticipantRequest(): UpdateSessionParticipantRequest {
  return { comment: "" };
}

export const UpdateSessionParticipantRequest = {
  encode(message: UpdateSessionParticipantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.comment !== "") {
      writer.uint32(10).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionParticipantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionParticipantRequest {
    return { comment: isSet(object.comment) ? globalThis.String(object.comment) : "" };
  },

  toJSON(message: UpdateSessionParticipantRequest): unknown {
    const obj: any = {};
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionParticipantRequest>, I>>(base?: I): UpdateSessionParticipantRequest {
    return UpdateSessionParticipantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionParticipantRequest>, I>>(
    object: I,
  ): UpdateSessionParticipantRequest {
    const message = createBaseUpdateSessionParticipantRequest();
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseUpdateSessionParticipantResponse(): UpdateSessionParticipantResponse {
  return { sessionParticipant: undefined };
}

export const UpdateSessionParticipantResponse = {
  encode(message: UpdateSessionParticipantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionParticipant !== undefined) {
      SessionParticipant.encode(message.sessionParticipant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionParticipantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionParticipantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionParticipant = SessionParticipant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionParticipantResponse {
    return {
      sessionParticipant: isSet(object.sessionParticipant)
        ? SessionParticipant.fromJSON(object.sessionParticipant)
        : undefined,
    };
  },

  toJSON(message: UpdateSessionParticipantResponse): unknown {
    const obj: any = {};
    if (message.sessionParticipant !== undefined) {
      obj.sessionParticipant = SessionParticipant.toJSON(message.sessionParticipant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionParticipantResponse>, I>>(
    base?: I,
  ): UpdateSessionParticipantResponse {
    return UpdateSessionParticipantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionParticipantResponse>, I>>(
    object: I,
  ): UpdateSessionParticipantResponse {
    const message = createBaseUpdateSessionParticipantResponse();
    message.sessionParticipant = (object.sessionParticipant !== undefined && object.sessionParticipant !== null)
      ? SessionParticipant.fromPartial(object.sessionParticipant)
      : undefined;
    return message;
  },
};

function createBaseSetSessionParticipantIsAdminRequest(): SetSessionParticipantIsAdminRequest {
  return { isAdmin: false };
}

export const SetSessionParticipantIsAdminRequest = {
  encode(message: SetSessionParticipantIsAdminRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isAdmin !== false) {
      writer.uint32(8).bool(message.isAdmin);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSessionParticipantIsAdminRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSessionParticipantIsAdminRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isAdmin = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSessionParticipantIsAdminRequest {
    return { isAdmin: isSet(object.isAdmin) ? globalThis.Boolean(object.isAdmin) : false };
  },

  toJSON(message: SetSessionParticipantIsAdminRequest): unknown {
    const obj: any = {};
    if (message.isAdmin !== false) {
      obj.isAdmin = message.isAdmin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSessionParticipantIsAdminRequest>, I>>(
    base?: I,
  ): SetSessionParticipantIsAdminRequest {
    return SetSessionParticipantIsAdminRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSessionParticipantIsAdminRequest>, I>>(
    object: I,
  ): SetSessionParticipantIsAdminRequest {
    const message = createBaseSetSessionParticipantIsAdminRequest();
    message.isAdmin = object.isAdmin ?? false;
    return message;
  },
};

function createBaseSetSessionParticipantIsAdminResponse(): SetSessionParticipantIsAdminResponse {
  return { sessionParticipant: undefined };
}

export const SetSessionParticipantIsAdminResponse = {
  encode(message: SetSessionParticipantIsAdminResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionParticipant !== undefined) {
      SessionParticipant.encode(message.sessionParticipant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSessionParticipantIsAdminResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSessionParticipantIsAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionParticipant = SessionParticipant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSessionParticipantIsAdminResponse {
    return {
      sessionParticipant: isSet(object.sessionParticipant)
        ? SessionParticipant.fromJSON(object.sessionParticipant)
        : undefined,
    };
  },

  toJSON(message: SetSessionParticipantIsAdminResponse): unknown {
    const obj: any = {};
    if (message.sessionParticipant !== undefined) {
      obj.sessionParticipant = SessionParticipant.toJSON(message.sessionParticipant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSessionParticipantIsAdminResponse>, I>>(
    base?: I,
  ): SetSessionParticipantIsAdminResponse {
    return SetSessionParticipantIsAdminResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSessionParticipantIsAdminResponse>, I>>(
    object: I,
  ): SetSessionParticipantIsAdminResponse {
    const message = createBaseSetSessionParticipantIsAdminResponse();
    message.sessionParticipant = (object.sessionParticipant !== undefined && object.sessionParticipant !== null)
      ? SessionParticipant.fromPartial(object.sessionParticipant)
      : undefined;
    return message;
  },
};

function createBaseAddSessionParticipantPartsRequest(): AddSessionParticipantPartsRequest {
  return { sessionPartId: 0 };
}

export const AddSessionParticipantPartsRequest = {
  encode(message: AddSessionParticipantPartsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionPartId !== 0) {
      writer.uint32(8).int32(message.sessionPartId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionParticipantPartsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionParticipantPartsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sessionPartId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionParticipantPartsRequest {
    return { sessionPartId: isSet(object.sessionPartId) ? globalThis.Number(object.sessionPartId) : 0 };
  },

  toJSON(message: AddSessionParticipantPartsRequest): unknown {
    const obj: any = {};
    if (message.sessionPartId !== 0) {
      obj.sessionPartId = Math.round(message.sessionPartId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionParticipantPartsRequest>, I>>(
    base?: I,
  ): AddSessionParticipantPartsRequest {
    return AddSessionParticipantPartsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionParticipantPartsRequest>, I>>(
    object: I,
  ): AddSessionParticipantPartsRequest {
    const message = createBaseAddSessionParticipantPartsRequest();
    message.sessionPartId = object.sessionPartId ?? 0;
    return message;
  },
};

function createBaseAddSessionParticipantPartsResponse(): AddSessionParticipantPartsResponse {
  return { sessionParticipant: undefined };
}

export const AddSessionParticipantPartsResponse = {
  encode(message: AddSessionParticipantPartsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionParticipant !== undefined) {
      SessionParticipant.encode(message.sessionParticipant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionParticipantPartsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionParticipantPartsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionParticipant = SessionParticipant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionParticipantPartsResponse {
    return {
      sessionParticipant: isSet(object.sessionParticipant)
        ? SessionParticipant.fromJSON(object.sessionParticipant)
        : undefined,
    };
  },

  toJSON(message: AddSessionParticipantPartsResponse): unknown {
    const obj: any = {};
    if (message.sessionParticipant !== undefined) {
      obj.sessionParticipant = SessionParticipant.toJSON(message.sessionParticipant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionParticipantPartsResponse>, I>>(
    base?: I,
  ): AddSessionParticipantPartsResponse {
    return AddSessionParticipantPartsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionParticipantPartsResponse>, I>>(
    object: I,
  ): AddSessionParticipantPartsResponse {
    const message = createBaseAddSessionParticipantPartsResponse();
    message.sessionParticipant = (object.sessionParticipant !== undefined && object.sessionParticipant !== null)
      ? SessionParticipant.fromPartial(object.sessionParticipant)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionParticipantStatusRequest(): UpdateSessionParticipantStatusRequest {
  return { status: 0 };
}

export const UpdateSessionParticipantStatusRequest = {
  encode(message: UpdateSessionParticipantStatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionParticipantStatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionParticipantStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionParticipantStatusRequest {
    return { status: isSet(object.status) ? sessionParticipantStatusFromJSON(object.status) : 0 };
  },

  toJSON(message: UpdateSessionParticipantStatusRequest): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = sessionParticipantStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionParticipantStatusRequest>, I>>(
    base?: I,
  ): UpdateSessionParticipantStatusRequest {
    return UpdateSessionParticipantStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionParticipantStatusRequest>, I>>(
    object: I,
  ): UpdateSessionParticipantStatusRequest {
    const message = createBaseUpdateSessionParticipantStatusRequest();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdateSessionParticipantStatusResponse(): UpdateSessionParticipantStatusResponse {
  return { sessionParticipant: undefined };
}

export const UpdateSessionParticipantStatusResponse = {
  encode(message: UpdateSessionParticipantStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionParticipant !== undefined) {
      SessionParticipant.encode(message.sessionParticipant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionParticipantStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionParticipantStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionParticipant = SessionParticipant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionParticipantStatusResponse {
    return {
      sessionParticipant: isSet(object.sessionParticipant)
        ? SessionParticipant.fromJSON(object.sessionParticipant)
        : undefined,
    };
  },

  toJSON(message: UpdateSessionParticipantStatusResponse): unknown {
    const obj: any = {};
    if (message.sessionParticipant !== undefined) {
      obj.sessionParticipant = SessionParticipant.toJSON(message.sessionParticipant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionParticipantStatusResponse>, I>>(
    base?: I,
  ): UpdateSessionParticipantStatusResponse {
    return UpdateSessionParticipantStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionParticipantStatusResponse>, I>>(
    object: I,
  ): UpdateSessionParticipantStatusResponse {
    const message = createBaseUpdateSessionParticipantStatusResponse();
    message.sessionParticipant = (object.sessionParticipant !== undefined && object.sessionParticipant !== null)
      ? SessionParticipant.fromPartial(object.sessionParticipant)
      : undefined;
    return message;
  },
};

function createBaseDeleteSessionParticipantRequest(): DeleteSessionParticipantRequest {
  return { participantId: 0 };
}

export const DeleteSessionParticipantRequest = {
  encode(message: DeleteSessionParticipantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.participantId !== 0) {
      writer.uint32(8).int32(message.participantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionParticipantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.participantId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionParticipantRequest {
    return { participantId: isSet(object.participantId) ? globalThis.Number(object.participantId) : 0 };
  },

  toJSON(message: DeleteSessionParticipantRequest): unknown {
    const obj: any = {};
    if (message.participantId !== 0) {
      obj.participantId = Math.round(message.participantId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionParticipantRequest>, I>>(base?: I): DeleteSessionParticipantRequest {
    return DeleteSessionParticipantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionParticipantRequest>, I>>(
    object: I,
  ): DeleteSessionParticipantRequest {
    const message = createBaseDeleteSessionParticipantRequest();
    message.participantId = object.participantId ?? 0;
    return message;
  },
};

function createBaseDeleteSessionParticipantResponse(): DeleteSessionParticipantResponse {
  return { success: false };
}

export const DeleteSessionParticipantResponse = {
  encode(message: DeleteSessionParticipantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionParticipantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionParticipantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionParticipantResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteSessionParticipantResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionParticipantResponse>, I>>(
    base?: I,
  ): DeleteSessionParticipantResponse {
    return DeleteSessionParticipantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionParticipantResponse>, I>>(
    object: I,
  ): DeleteSessionParticipantResponse {
    const message = createBaseDeleteSessionParticipantResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface SessionParticipantService {
  /** GET /sessions/{id}/participants */
  ListSessionParticipants(request: ListSessionParticipantsRequest): Promise<ListSessionParticipantsResponse>;
  /** POST /sessions/{id}/participants */
  AddSessionParticipant(request: AddSessionParticipantRequest): Promise<AddSessionParticipantResponse>;
  /** POST /sessions/{id}/participants/{participantId}/is_admin */
  SetSessionParticipantIsAdmin(
    request: SetSessionParticipantIsAdminRequest,
  ): Promise<SetSessionParticipantIsAdminResponse>;
  /** POST /sessions/{id}/participants/{participantId}/parts */
  AddSessionParticipantParts(request: AddSessionParticipantPartsRequest): Promise<AddSessionParticipantPartsResponse>;
  /** PUT /sessions/{id}/participants/{participantId} */
  UpdateSessionParticipant(request: UpdateSessionParticipantRequest): Promise<UpdateSessionParticipantResponse>;
  /** PUT /sessions/{id}/participants/{participantId}/status */
  UpdateSessionParticipantStatus(
    request: UpdateSessionParticipantStatusRequest,
  ): Promise<UpdateSessionParticipantStatusResponse>;
  /** DELETE /sessions/{id}/participants/{participantId} */
  DeleteSessionParticipant(request: DeleteSessionParticipantRequest): Promise<DeleteSessionParticipantResponse>;
}

export const SessionParticipantServiceServiceName = "bst.v1.SessionParticipantService";
export class SessionParticipantServiceClientImpl implements SessionParticipantService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionParticipantServiceServiceName;
    this.rpc = rpc;
    this.ListSessionParticipants = this.ListSessionParticipants.bind(this);
    this.AddSessionParticipant = this.AddSessionParticipant.bind(this);
    this.SetSessionParticipantIsAdmin = this.SetSessionParticipantIsAdmin.bind(this);
    this.AddSessionParticipantParts = this.AddSessionParticipantParts.bind(this);
    this.UpdateSessionParticipant = this.UpdateSessionParticipant.bind(this);
    this.UpdateSessionParticipantStatus = this.UpdateSessionParticipantStatus.bind(this);
    this.DeleteSessionParticipant = this.DeleteSessionParticipant.bind(this);
  }
  ListSessionParticipants(request: ListSessionParticipantsRequest): Promise<ListSessionParticipantsResponse> {
    const data = ListSessionParticipantsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSessionParticipants", data);
    return promise.then((data) => ListSessionParticipantsResponse.decode(_m0.Reader.create(data)));
  }

  AddSessionParticipant(request: AddSessionParticipantRequest): Promise<AddSessionParticipantResponse> {
    const data = AddSessionParticipantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSessionParticipant", data);
    return promise.then((data) => AddSessionParticipantResponse.decode(_m0.Reader.create(data)));
  }

  SetSessionParticipantIsAdmin(
    request: SetSessionParticipantIsAdminRequest,
  ): Promise<SetSessionParticipantIsAdminResponse> {
    const data = SetSessionParticipantIsAdminRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetSessionParticipantIsAdmin", data);
    return promise.then((data) => SetSessionParticipantIsAdminResponse.decode(_m0.Reader.create(data)));
  }

  AddSessionParticipantParts(request: AddSessionParticipantPartsRequest): Promise<AddSessionParticipantPartsResponse> {
    const data = AddSessionParticipantPartsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSessionParticipantParts", data);
    return promise.then((data) => AddSessionParticipantPartsResponse.decode(_m0.Reader.create(data)));
  }

  UpdateSessionParticipant(request: UpdateSessionParticipantRequest): Promise<UpdateSessionParticipantResponse> {
    const data = UpdateSessionParticipantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSessionParticipant", data);
    return promise.then((data) => UpdateSessionParticipantResponse.decode(_m0.Reader.create(data)));
  }

  UpdateSessionParticipantStatus(
    request: UpdateSessionParticipantStatusRequest,
  ): Promise<UpdateSessionParticipantStatusResponse> {
    const data = UpdateSessionParticipantStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSessionParticipantStatus", data);
    return promise.then((data) => UpdateSessionParticipantStatusResponse.decode(_m0.Reader.create(data)));
  }

  DeleteSessionParticipant(request: DeleteSessionParticipantRequest): Promise<DeleteSessionParticipantResponse> {
    const data = DeleteSessionParticipantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteSessionParticipant", data);
    return promise.then((data) => DeleteSessionParticipantResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

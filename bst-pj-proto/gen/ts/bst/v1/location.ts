// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/location.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Area } from "./area";
import { Resource } from "./content";
import { User } from "./user";

export const protobufPackage = "bst.v1";

export interface Location {
  id: number;
  name: string;
  additionalInfo: string;
  area: Area | undefined;
  mapUrl: string;
}

/** Note: Will add more fields later (e.g. capacity, price, etc) */
export interface StudioReview {
  user: User | undefined;
  review: string;
  rating: number;
  /** Photos of the studio...etc */
  resources: Resource[];
  createdAt: Date | undefined;
}

export interface Studio {
  id: number;
  location:
    | Location
    | undefined;
  /** Note: Rating logic is hidden in the backend */
  overallRating: number;
  rooms: StudioRoom[];
}

export interface StudioRoom {
  id: number;
  name: string;
  capacity: number;
  price: number;
  infos: StudioRoomInfo[];
}

export interface StudioRoomInfo {
  id: number;
  /** 情報の種類 (例: Equipment)" */
  type: string;
  /** 情報のキー (例: ギターアンプ)" */
  key: string;
  /** 情報の値 (例: Marshall)" */
  value: string;
}

function createBaseLocation(): Location {
  return { id: 0, name: "", additionalInfo: "", area: undefined, mapUrl: "" };
}

export const Location = {
  encode(message: Location, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.additionalInfo !== "") {
      writer.uint32(26).string(message.additionalInfo);
    }
    if (message.area !== undefined) {
      Area.encode(message.area, writer.uint32(34).fork()).ldelim();
    }
    if (message.mapUrl !== "") {
      writer.uint32(42).string(message.mapUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Location {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.additionalInfo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.area = Area.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mapUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      additionalInfo: isSet(object.additionalInfo) ? globalThis.String(object.additionalInfo) : "",
      area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
      mapUrl: isSet(object.mapUrl) ? globalThis.String(object.mapUrl) : "",
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.additionalInfo !== "") {
      obj.additionalInfo = message.additionalInfo;
    }
    if (message.area !== undefined) {
      obj.area = Area.toJSON(message.area);
    }
    if (message.mapUrl !== "") {
      obj.mapUrl = message.mapUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Location>, I>>(base?: I): Location {
    return Location.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Location>, I>>(object: I): Location {
    const message = createBaseLocation();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.additionalInfo = object.additionalInfo ?? "";
    message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
    message.mapUrl = object.mapUrl ?? "";
    return message;
  },
};

function createBaseStudioReview(): StudioReview {
  return { user: undefined, review: "", rating: 0, resources: [], createdAt: undefined };
}

export const StudioReview = {
  encode(message: StudioReview, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    if (message.review !== "") {
      writer.uint32(18).string(message.review);
    }
    if (message.rating !== 0) {
      writer.uint32(24).int32(message.rating);
    }
    for (const v of message.resources) {
      Resource.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StudioReview {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudioReview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.review = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.rating = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resources.push(Resource.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudioReview {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      review: isSet(object.review) ? globalThis.String(object.review) : "",
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => Resource.fromJSON(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: StudioReview): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.review !== "") {
      obj.review = message.review;
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => Resource.toJSON(e));
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudioReview>, I>>(base?: I): StudioReview {
    return StudioReview.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudioReview>, I>>(object: I): StudioReview {
    const message = createBaseStudioReview();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.review = object.review ?? "";
    message.rating = object.rating ?? 0;
    message.resources = object.resources?.map((e) => Resource.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseStudio(): Studio {
  return { id: 0, location: undefined, overallRating: 0, rooms: [] };
}

export const Studio = {
  encode(message: Studio, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(18).fork()).ldelim();
    }
    if (message.overallRating !== 0) {
      writer.uint32(24).int32(message.overallRating);
    }
    for (const v of message.rooms) {
      StudioRoom.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Studio {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudio();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.overallRating = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.rooms.push(StudioRoom.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Studio {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      overallRating: isSet(object.overallRating) ? globalThis.Number(object.overallRating) : 0,
      rooms: globalThis.Array.isArray(object?.rooms) ? object.rooms.map((e: any) => StudioRoom.fromJSON(e)) : [],
    };
  },

  toJSON(message: Studio): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.overallRating !== 0) {
      obj.overallRating = Math.round(message.overallRating);
    }
    if (message.rooms?.length) {
      obj.rooms = message.rooms.map((e) => StudioRoom.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Studio>, I>>(base?: I): Studio {
    return Studio.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Studio>, I>>(object: I): Studio {
    const message = createBaseStudio();
    message.id = object.id ?? 0;
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.overallRating = object.overallRating ?? 0;
    message.rooms = object.rooms?.map((e) => StudioRoom.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStudioRoom(): StudioRoom {
  return { id: 0, name: "", capacity: 0, price: 0, infos: [] };
}

export const StudioRoom = {
  encode(message: StudioRoom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.capacity !== 0) {
      writer.uint32(24).int32(message.capacity);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    for (const v of message.infos) {
      StudioRoomInfo.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StudioRoom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudioRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.capacity = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.infos.push(StudioRoomInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudioRoom {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      capacity: isSet(object.capacity) ? globalThis.Number(object.capacity) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      infos: globalThis.Array.isArray(object?.infos) ? object.infos.map((e: any) => StudioRoomInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: StudioRoom): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.capacity !== 0) {
      obj.capacity = Math.round(message.capacity);
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.infos?.length) {
      obj.infos = message.infos.map((e) => StudioRoomInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudioRoom>, I>>(base?: I): StudioRoom {
    return StudioRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudioRoom>, I>>(object: I): StudioRoom {
    const message = createBaseStudioRoom();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.capacity = object.capacity ?? 0;
    message.price = object.price ?? 0;
    message.infos = object.infos?.map((e) => StudioRoomInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStudioRoomInfo(): StudioRoomInfo {
  return { id: 0, type: "", key: "", value: "" };
}

export const StudioRoomInfo = {
  encode(message: StudioRoomInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StudioRoomInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudioRoomInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudioRoomInfo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StudioRoomInfo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudioRoomInfo>, I>>(base?: I): StudioRoomInfo {
    return StudioRoomInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudioRoomInfo>, I>>(object: I): StudioRoomInfo {
    const message = createBaseStudioRoomInfo();
    message.id = object.id ?? 0;
    message.type = object.type ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

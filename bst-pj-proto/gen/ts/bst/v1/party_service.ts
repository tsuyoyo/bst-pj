// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/party_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import {
  Party,
  PartyParticipantRole,
  partyParticipantRoleFromJSON,
  partyParticipantRoleToJSON,
  PartyParticipantStatus,
  partyParticipantStatusFromJSON,
  partyParticipantStatusToJSON,
} from "./party";

export const protobufPackage = "bst.v1";

export interface CreatePartyRequest {
  locationId: number;
  fee: number;
  role: PartyParticipantRole;
  startAt: Date | undefined;
  endAt: Date | undefined;
}

export interface CreatePartyResponse {
  party: Party | undefined;
}

export interface GetPartyRequest {
  sessionId: number;
}

export interface GetPartyResponse {
  party: Party | undefined;
}

export interface UpdatePartyRequest {
  locationId: number;
  fee: number;
  startAt: Date | undefined;
  endAt: Date | undefined;
}

export interface UpdatePartyResponse {
  party: Party | undefined;
}

export interface DeletePartyRequest {
  sessionId: number;
}

export interface DeletePartyResponse {
  success: boolean;
}

export interface AddPartyParticipantRequest {
  role: PartyParticipantRole;
  status: PartyParticipantStatus;
}

export interface AddPartyParticipantResponse {
  success: boolean;
}

export interface UpdatePartyParticipantRequest {
  role: PartyParticipantRole;
  status: PartyParticipantStatus;
}

export interface UpdatePartyParticipantResponse {
  success: boolean;
}

export interface RemovePartyParticipantRequest {
  userId: number;
}

export interface RemovePartyParticipantResponse {
  success: boolean;
}

function createBaseCreatePartyRequest(): CreatePartyRequest {
  return { locationId: 0, fee: 0, role: 0, startAt: undefined, endAt: undefined };
}

export const CreatePartyRequest = {
  encode(message: CreatePartyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.locationId !== 0) {
      writer.uint32(8).int32(message.locationId);
    }
    if (message.fee !== 0) {
      writer.uint32(16).int32(message.fee);
    }
    if (message.role !== 0) {
      writer.uint32(24).int32(message.role);
    }
    if (message.startAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.endAt !== undefined) {
      Timestamp.encode(toTimestamp(message.endAt), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePartyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePartyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locationId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fee = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePartyRequest {
    return {
      locationId: isSet(object.locationId) ? globalThis.Number(object.locationId) : 0,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      role: isSet(object.role) ? partyParticipantRoleFromJSON(object.role) : 0,
      startAt: isSet(object.startAt) ? fromJsonTimestamp(object.startAt) : undefined,
      endAt: isSet(object.endAt) ? fromJsonTimestamp(object.endAt) : undefined,
    };
  },

  toJSON(message: CreatePartyRequest): unknown {
    const obj: any = {};
    if (message.locationId !== 0) {
      obj.locationId = Math.round(message.locationId);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.role !== 0) {
      obj.role = partyParticipantRoleToJSON(message.role);
    }
    if (message.startAt !== undefined) {
      obj.startAt = message.startAt.toISOString();
    }
    if (message.endAt !== undefined) {
      obj.endAt = message.endAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePartyRequest>, I>>(base?: I): CreatePartyRequest {
    return CreatePartyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePartyRequest>, I>>(object: I): CreatePartyRequest {
    const message = createBaseCreatePartyRequest();
    message.locationId = object.locationId ?? 0;
    message.fee = object.fee ?? 0;
    message.role = object.role ?? 0;
    message.startAt = object.startAt ?? undefined;
    message.endAt = object.endAt ?? undefined;
    return message;
  },
};

function createBaseCreatePartyResponse(): CreatePartyResponse {
  return { party: undefined };
}

export const CreatePartyResponse = {
  encode(message: CreatePartyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.party !== undefined) {
      Party.encode(message.party, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePartyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.party = Party.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePartyResponse {
    return { party: isSet(object.party) ? Party.fromJSON(object.party) : undefined };
  },

  toJSON(message: CreatePartyResponse): unknown {
    const obj: any = {};
    if (message.party !== undefined) {
      obj.party = Party.toJSON(message.party);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePartyResponse>, I>>(base?: I): CreatePartyResponse {
    return CreatePartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePartyResponse>, I>>(object: I): CreatePartyResponse {
    const message = createBaseCreatePartyResponse();
    message.party = (object.party !== undefined && object.party !== null) ? Party.fromPartial(object.party) : undefined;
    return message;
  },
};

function createBaseGetPartyRequest(): GetPartyRequest {
  return { sessionId: 0 };
}

export const GetPartyRequest = {
  encode(message: GetPartyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionId !== 0) {
      writer.uint32(8).int32(message.sessionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPartyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sessionId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartyRequest {
    return { sessionId: isSet(object.sessionId) ? globalThis.Number(object.sessionId) : 0 };
  },

  toJSON(message: GetPartyRequest): unknown {
    const obj: any = {};
    if (message.sessionId !== 0) {
      obj.sessionId = Math.round(message.sessionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPartyRequest>, I>>(base?: I): GetPartyRequest {
    return GetPartyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPartyRequest>, I>>(object: I): GetPartyRequest {
    const message = createBaseGetPartyRequest();
    message.sessionId = object.sessionId ?? 0;
    return message;
  },
};

function createBaseGetPartyResponse(): GetPartyResponse {
  return { party: undefined };
}

export const GetPartyResponse = {
  encode(message: GetPartyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.party !== undefined) {
      Party.encode(message.party, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPartyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.party = Party.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartyResponse {
    return { party: isSet(object.party) ? Party.fromJSON(object.party) : undefined };
  },

  toJSON(message: GetPartyResponse): unknown {
    const obj: any = {};
    if (message.party !== undefined) {
      obj.party = Party.toJSON(message.party);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPartyResponse>, I>>(base?: I): GetPartyResponse {
    return GetPartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPartyResponse>, I>>(object: I): GetPartyResponse {
    const message = createBaseGetPartyResponse();
    message.party = (object.party !== undefined && object.party !== null) ? Party.fromPartial(object.party) : undefined;
    return message;
  },
};

function createBaseUpdatePartyRequest(): UpdatePartyRequest {
  return { locationId: 0, fee: 0, startAt: undefined, endAt: undefined };
}

export const UpdatePartyRequest = {
  encode(message: UpdatePartyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.locationId !== 0) {
      writer.uint32(8).int32(message.locationId);
    }
    if (message.fee !== 0) {
      writer.uint32(16).int32(message.fee);
    }
    if (message.startAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startAt), writer.uint32(26).fork()).ldelim();
    }
    if (message.endAt !== undefined) {
      Timestamp.encode(toTimestamp(message.endAt), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePartyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locationId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fee = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyRequest {
    return {
      locationId: isSet(object.locationId) ? globalThis.Number(object.locationId) : 0,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      startAt: isSet(object.startAt) ? fromJsonTimestamp(object.startAt) : undefined,
      endAt: isSet(object.endAt) ? fromJsonTimestamp(object.endAt) : undefined,
    };
  },

  toJSON(message: UpdatePartyRequest): unknown {
    const obj: any = {};
    if (message.locationId !== 0) {
      obj.locationId = Math.round(message.locationId);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.startAt !== undefined) {
      obj.startAt = message.startAt.toISOString();
    }
    if (message.endAt !== undefined) {
      obj.endAt = message.endAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyRequest>, I>>(base?: I): UpdatePartyRequest {
    return UpdatePartyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyRequest>, I>>(object: I): UpdatePartyRequest {
    const message = createBaseUpdatePartyRequest();
    message.locationId = object.locationId ?? 0;
    message.fee = object.fee ?? 0;
    message.startAt = object.startAt ?? undefined;
    message.endAt = object.endAt ?? undefined;
    return message;
  },
};

function createBaseUpdatePartyResponse(): UpdatePartyResponse {
  return { party: undefined };
}

export const UpdatePartyResponse = {
  encode(message: UpdatePartyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.party !== undefined) {
      Party.encode(message.party, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePartyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.party = Party.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyResponse {
    return { party: isSet(object.party) ? Party.fromJSON(object.party) : undefined };
  },

  toJSON(message: UpdatePartyResponse): unknown {
    const obj: any = {};
    if (message.party !== undefined) {
      obj.party = Party.toJSON(message.party);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyResponse>, I>>(base?: I): UpdatePartyResponse {
    return UpdatePartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyResponse>, I>>(object: I): UpdatePartyResponse {
    const message = createBaseUpdatePartyResponse();
    message.party = (object.party !== undefined && object.party !== null) ? Party.fromPartial(object.party) : undefined;
    return message;
  },
};

function createBaseDeletePartyRequest(): DeletePartyRequest {
  return { sessionId: 0 };
}

export const DeletePartyRequest = {
  encode(message: DeletePartyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionId !== 0) {
      writer.uint32(8).int32(message.sessionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePartyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePartyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sessionId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePartyRequest {
    return { sessionId: isSet(object.sessionId) ? globalThis.Number(object.sessionId) : 0 };
  },

  toJSON(message: DeletePartyRequest): unknown {
    const obj: any = {};
    if (message.sessionId !== 0) {
      obj.sessionId = Math.round(message.sessionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePartyRequest>, I>>(base?: I): DeletePartyRequest {
    return DeletePartyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePartyRequest>, I>>(object: I): DeletePartyRequest {
    const message = createBaseDeletePartyRequest();
    message.sessionId = object.sessionId ?? 0;
    return message;
  },
};

function createBaseDeletePartyResponse(): DeletePartyResponse {
  return { success: false };
}

export const DeletePartyResponse = {
  encode(message: DeletePartyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePartyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePartyResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeletePartyResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePartyResponse>, I>>(base?: I): DeletePartyResponse {
    return DeletePartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePartyResponse>, I>>(object: I): DeletePartyResponse {
    const message = createBaseDeletePartyResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseAddPartyParticipantRequest(): AddPartyParticipantRequest {
  return { role: 0, status: 0 };
}

export const AddPartyParticipantRequest = {
  encode(message: AddPartyParticipantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== 0) {
      writer.uint32(8).int32(message.role);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPartyParticipantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPartyParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPartyParticipantRequest {
    return {
      role: isSet(object.role) ? partyParticipantRoleFromJSON(object.role) : 0,
      status: isSet(object.status) ? partyParticipantStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: AddPartyParticipantRequest): unknown {
    const obj: any = {};
    if (message.role !== 0) {
      obj.role = partyParticipantRoleToJSON(message.role);
    }
    if (message.status !== 0) {
      obj.status = partyParticipantStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPartyParticipantRequest>, I>>(base?: I): AddPartyParticipantRequest {
    return AddPartyParticipantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPartyParticipantRequest>, I>>(object: I): AddPartyParticipantRequest {
    const message = createBaseAddPartyParticipantRequest();
    message.role = object.role ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseAddPartyParticipantResponse(): AddPartyParticipantResponse {
  return { success: false };
}

export const AddPartyParticipantResponse = {
  encode(message: AddPartyParticipantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPartyParticipantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPartyParticipantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPartyParticipantResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: AddPartyParticipantResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPartyParticipantResponse>, I>>(base?: I): AddPartyParticipantResponse {
    return AddPartyParticipantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPartyParticipantResponse>, I>>(object: I): AddPartyParticipantResponse {
    const message = createBaseAddPartyParticipantResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseUpdatePartyParticipantRequest(): UpdatePartyParticipantRequest {
  return { role: 0, status: 0 };
}

export const UpdatePartyParticipantRequest = {
  encode(message: UpdatePartyParticipantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== 0) {
      writer.uint32(8).int32(message.role);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePartyParticipantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyParticipantRequest {
    return {
      role: isSet(object.role) ? partyParticipantRoleFromJSON(object.role) : 0,
      status: isSet(object.status) ? partyParticipantStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: UpdatePartyParticipantRequest): unknown {
    const obj: any = {};
    if (message.role !== 0) {
      obj.role = partyParticipantRoleToJSON(message.role);
    }
    if (message.status !== 0) {
      obj.status = partyParticipantStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyParticipantRequest>, I>>(base?: I): UpdatePartyParticipantRequest {
    return UpdatePartyParticipantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyParticipantRequest>, I>>(
    object: I,
  ): UpdatePartyParticipantRequest {
    const message = createBaseUpdatePartyParticipantRequest();
    message.role = object.role ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdatePartyParticipantResponse(): UpdatePartyParticipantResponse {
  return { success: false };
}

export const UpdatePartyParticipantResponse = {
  encode(message: UpdatePartyParticipantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePartyParticipantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyParticipantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyParticipantResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdatePartyParticipantResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyParticipantResponse>, I>>(base?: I): UpdatePartyParticipantResponse {
    return UpdatePartyParticipantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyParticipantResponse>, I>>(
    object: I,
  ): UpdatePartyParticipantResponse {
    const message = createBaseUpdatePartyParticipantResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRemovePartyParticipantRequest(): RemovePartyParticipantRequest {
  return { userId: 0 };
}

export const RemovePartyParticipantRequest = {
  encode(message: RemovePartyParticipantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemovePartyParticipantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePartyParticipantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemovePartyParticipantRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: RemovePartyParticipantRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemovePartyParticipantRequest>, I>>(base?: I): RemovePartyParticipantRequest {
    return RemovePartyParticipantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemovePartyParticipantRequest>, I>>(
    object: I,
  ): RemovePartyParticipantRequest {
    const message = createBaseRemovePartyParticipantRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseRemovePartyParticipantResponse(): RemovePartyParticipantResponse {
  return { success: false };
}

export const RemovePartyParticipantResponse = {
  encode(message: RemovePartyParticipantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemovePartyParticipantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePartyParticipantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemovePartyParticipantResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RemovePartyParticipantResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemovePartyParticipantResponse>, I>>(base?: I): RemovePartyParticipantResponse {
    return RemovePartyParticipantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemovePartyParticipantResponse>, I>>(
    object: I,
  ): RemovePartyParticipantResponse {
    const message = createBaseRemovePartyParticipantResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface PartyService {
  CreateParty(request: CreatePartyRequest): Promise<CreatePartyResponse>;
  GetParty(request: GetPartyRequest): Promise<GetPartyRequest>;
  UpdateParty(request: UpdatePartyRequest): Promise<UpdatePartyResponse>;
  DeleteParty(request: DeletePartyRequest): Promise<DeletePartyResponse>;
  AddPartyParticipant(request: AddPartyParticipantRequest): Promise<AddPartyParticipantResponse>;
  UpdatePartyParticipant(request: UpdatePartyParticipantRequest): Promise<UpdatePartyParticipantResponse>;
  RemovePartyParticipant(request: RemovePartyParticipantRequest): Promise<RemovePartyParticipantResponse>;
}

export const PartyServiceServiceName = "bst.v1.PartyService";
export class PartyServiceClientImpl implements PartyService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PartyServiceServiceName;
    this.rpc = rpc;
    this.CreateParty = this.CreateParty.bind(this);
    this.GetParty = this.GetParty.bind(this);
    this.UpdateParty = this.UpdateParty.bind(this);
    this.DeleteParty = this.DeleteParty.bind(this);
    this.AddPartyParticipant = this.AddPartyParticipant.bind(this);
    this.UpdatePartyParticipant = this.UpdatePartyParticipant.bind(this);
    this.RemovePartyParticipant = this.RemovePartyParticipant.bind(this);
  }
  CreateParty(request: CreatePartyRequest): Promise<CreatePartyResponse> {
    const data = CreatePartyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateParty", data);
    return promise.then((data) => CreatePartyResponse.decode(_m0.Reader.create(data)));
  }

  GetParty(request: GetPartyRequest): Promise<GetPartyRequest> {
    const data = GetPartyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetParty", data);
    return promise.then((data) => GetPartyRequest.decode(_m0.Reader.create(data)));
  }

  UpdateParty(request: UpdatePartyRequest): Promise<UpdatePartyResponse> {
    const data = UpdatePartyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParty", data);
    return promise.then((data) => UpdatePartyResponse.decode(_m0.Reader.create(data)));
  }

  DeleteParty(request: DeletePartyRequest): Promise<DeletePartyResponse> {
    const data = DeletePartyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteParty", data);
    return promise.then((data) => DeletePartyResponse.decode(_m0.Reader.create(data)));
  }

  AddPartyParticipant(request: AddPartyParticipantRequest): Promise<AddPartyParticipantResponse> {
    const data = AddPartyParticipantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddPartyParticipant", data);
    return promise.then((data) => AddPartyParticipantResponse.decode(_m0.Reader.create(data)));
  }

  UpdatePartyParticipant(request: UpdatePartyParticipantRequest): Promise<UpdatePartyParticipantResponse> {
    const data = UpdatePartyParticipantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePartyParticipant", data);
    return promise.then((data) => UpdatePartyParticipantResponse.decode(_m0.Reader.create(data)));
  }

  RemovePartyParticipant(request: RemovePartyParticipantRequest): Promise<RemovePartyParticipantResponse> {
    const data = RemovePartyParticipantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemovePartyParticipant", data);
    return promise.then((data) => RemovePartyParticipantResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

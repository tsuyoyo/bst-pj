// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/follow_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { User } from "./user";

export const protobufPackage = "bst.v1";

export interface FollowUserRequest {
  followingId: number;
}

export interface FollowUserResponse {
  success: boolean;
}

export interface ListFollowersRequest {
  userId: number;
}

export interface ListFollowersResponse {
  followers: User[];
}

export interface ListFollowingRequest {
  userId: number;
}

export interface ListFollowingResponse {
  followings: User[];
}

function createBaseFollowUserRequest(): FollowUserRequest {
  return { followingId: 0 };
}

export const FollowUserRequest = {
  encode(message: FollowUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.followingId !== 0) {
      writer.uint32(8).int32(message.followingId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FollowUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.followingId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowUserRequest {
    return { followingId: isSet(object.followingId) ? globalThis.Number(object.followingId) : 0 };
  },

  toJSON(message: FollowUserRequest): unknown {
    const obj: any = {};
    if (message.followingId !== 0) {
      obj.followingId = Math.round(message.followingId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowUserRequest>, I>>(base?: I): FollowUserRequest {
    return FollowUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowUserRequest>, I>>(object: I): FollowUserRequest {
    const message = createBaseFollowUserRequest();
    message.followingId = object.followingId ?? 0;
    return message;
  },
};

function createBaseFollowUserResponse(): FollowUserResponse {
  return { success: false };
}

export const FollowUserResponse = {
  encode(message: FollowUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FollowUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowUserResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: FollowUserResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowUserResponse>, I>>(base?: I): FollowUserResponse {
    return FollowUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowUserResponse>, I>>(object: I): FollowUserResponse {
    const message = createBaseFollowUserResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListFollowersRequest(): ListFollowersRequest {
  return { userId: 0 };
}

export const ListFollowersRequest = {
  encode(message: ListFollowersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFollowersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFollowersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFollowersRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: ListFollowersRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFollowersRequest>, I>>(base?: I): ListFollowersRequest {
    return ListFollowersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFollowersRequest>, I>>(object: I): ListFollowersRequest {
    const message = createBaseListFollowersRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseListFollowersResponse(): ListFollowersResponse {
  return { followers: [] };
}

export const ListFollowersResponse = {
  encode(message: ListFollowersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.followers) {
      User.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFollowersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFollowersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.followers.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFollowersResponse {
    return {
      followers: globalThis.Array.isArray(object?.followers) ? object.followers.map((e: any) => User.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListFollowersResponse): unknown {
    const obj: any = {};
    if (message.followers?.length) {
      obj.followers = message.followers.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFollowersResponse>, I>>(base?: I): ListFollowersResponse {
    return ListFollowersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFollowersResponse>, I>>(object: I): ListFollowersResponse {
    const message = createBaseListFollowersResponse();
    message.followers = object.followers?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFollowingRequest(): ListFollowingRequest {
  return { userId: 0 };
}

export const ListFollowingRequest = {
  encode(message: ListFollowingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFollowingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFollowingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFollowingRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: ListFollowingRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFollowingRequest>, I>>(base?: I): ListFollowingRequest {
    return ListFollowingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFollowingRequest>, I>>(object: I): ListFollowingRequest {
    const message = createBaseListFollowingRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseListFollowingResponse(): ListFollowingResponse {
  return { followings: [] };
}

export const ListFollowingResponse = {
  encode(message: ListFollowingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.followings) {
      User.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFollowingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFollowingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.followings.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFollowingResponse {
    return {
      followings: globalThis.Array.isArray(object?.followings)
        ? object.followings.map((e: any) => User.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListFollowingResponse): unknown {
    const obj: any = {};
    if (message.followings?.length) {
      obj.followings = message.followings.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFollowingResponse>, I>>(base?: I): ListFollowingResponse {
    return ListFollowingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFollowingResponse>, I>>(object: I): ListFollowingResponse {
    const message = createBaseListFollowingResponse();
    message.followings = object.followings?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

export interface FollowService {
  FollowUser(request: FollowUserRequest): Promise<FollowUserResponse>;
  ListFollowers(request: ListFollowersRequest): Promise<ListFollowersResponse>;
  ListFollowing(request: ListFollowingRequest): Promise<ListFollowingResponse>;
}

export const FollowServiceServiceName = "bst.v1.FollowService";
export class FollowServiceClientImpl implements FollowService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || FollowServiceServiceName;
    this.rpc = rpc;
    this.FollowUser = this.FollowUser.bind(this);
    this.ListFollowers = this.ListFollowers.bind(this);
    this.ListFollowing = this.ListFollowing.bind(this);
  }
  FollowUser(request: FollowUserRequest): Promise<FollowUserResponse> {
    const data = FollowUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FollowUser", data);
    return promise.then((data) => FollowUserResponse.decode(_m0.Reader.create(data)));
  }

  ListFollowers(request: ListFollowersRequest): Promise<ListFollowersResponse> {
    const data = ListFollowersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListFollowers", data);
    return promise.then((data) => ListFollowersResponse.decode(_m0.Reader.create(data)));
  }

  ListFollowing(request: ListFollowingRequest): Promise<ListFollowingResponse> {
    const data = ListFollowingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListFollowing", data);
    return promise.then((data) => ListFollowingResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

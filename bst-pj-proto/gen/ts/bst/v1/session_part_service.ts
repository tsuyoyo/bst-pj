// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session_part_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { SessionPart } from "./session";

export const protobufPackage = "bst.v1";

/** GET /sessions/{id}/parts */
export interface ListSessionPartsRequest {
}

export interface ListSessionPartsResponse {
  parts: SessionPart[];
}

/** POST /sessions/{id}/parts */
export interface AddSessionPartRequest {
  partId: number;
  /** Part name in the session (e.g. "Gt1", "Gt2") */
  name: string;
  /** Display order in the session */
  displayOrder: number;
  /** Max number of entries user can make */
  maxEntry: number;
  /** Setting up the equipment...etc */
  transitionCost: number;
}

export interface AddSessionPartResponse {
  part: SessionPart | undefined;
}

/** PUT /sessions/{id}/parts/{sessionPartId} */
export interface UpdateSessionPartRequest {
  partId: number;
  name: string;
  displayOrder: number;
  maxEntry: number;
}

export interface UpdateSessionPartResponse {
  part: SessionPart | undefined;
}

/** DELETE /sessions/{id}/parts/{sessionPartId} */
export interface DeleteSessionPartRequest {
}

export interface DeleteSessionPartResponse {
  success: boolean;
}

function createBaseListSessionPartsRequest(): ListSessionPartsRequest {
  return {};
}

export const ListSessionPartsRequest = {
  encode(_: ListSessionPartsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionPartsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionPartsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListSessionPartsRequest {
    return {};
  },

  toJSON(_: ListSessionPartsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionPartsRequest>, I>>(base?: I): ListSessionPartsRequest {
    return ListSessionPartsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionPartsRequest>, I>>(_: I): ListSessionPartsRequest {
    const message = createBaseListSessionPartsRequest();
    return message;
  },
};

function createBaseListSessionPartsResponse(): ListSessionPartsResponse {
  return { parts: [] };
}

export const ListSessionPartsResponse = {
  encode(message: ListSessionPartsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.parts) {
      SessionPart.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionPartsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionPartsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parts.push(SessionPart.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionPartsResponse {
    return {
      parts: globalThis.Array.isArray(object?.parts) ? object.parts.map((e: any) => SessionPart.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSessionPartsResponse): unknown {
    const obj: any = {};
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => SessionPart.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionPartsResponse>, I>>(base?: I): ListSessionPartsResponse {
    return ListSessionPartsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionPartsResponse>, I>>(object: I): ListSessionPartsResponse {
    const message = createBaseListSessionPartsResponse();
    message.parts = object.parts?.map((e) => SessionPart.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSessionPartRequest(): AddSessionPartRequest {
  return { partId: 0, name: "", displayOrder: 0, maxEntry: 0, transitionCost: 0 };
}

export const AddSessionPartRequest = {
  encode(message: AddSessionPartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.partId !== 0) {
      writer.uint32(8).int32(message.partId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.displayOrder !== 0) {
      writer.uint32(24).int32(message.displayOrder);
    }
    if (message.maxEntry !== 0) {
      writer.uint32(32).int32(message.maxEntry);
    }
    if (message.transitionCost !== 0) {
      writer.uint32(40).int32(message.transitionCost);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionPartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionPartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.partId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.displayOrder = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxEntry = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.transitionCost = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionPartRequest {
    return {
      partId: isSet(object.partId) ? globalThis.Number(object.partId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayOrder: isSet(object.displayOrder) ? globalThis.Number(object.displayOrder) : 0,
      maxEntry: isSet(object.maxEntry) ? globalThis.Number(object.maxEntry) : 0,
      transitionCost: isSet(object.transitionCost) ? globalThis.Number(object.transitionCost) : 0,
    };
  },

  toJSON(message: AddSessionPartRequest): unknown {
    const obj: any = {};
    if (message.partId !== 0) {
      obj.partId = Math.round(message.partId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayOrder !== 0) {
      obj.displayOrder = Math.round(message.displayOrder);
    }
    if (message.maxEntry !== 0) {
      obj.maxEntry = Math.round(message.maxEntry);
    }
    if (message.transitionCost !== 0) {
      obj.transitionCost = Math.round(message.transitionCost);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionPartRequest>, I>>(base?: I): AddSessionPartRequest {
    return AddSessionPartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionPartRequest>, I>>(object: I): AddSessionPartRequest {
    const message = createBaseAddSessionPartRequest();
    message.partId = object.partId ?? 0;
    message.name = object.name ?? "";
    message.displayOrder = object.displayOrder ?? 0;
    message.maxEntry = object.maxEntry ?? 0;
    message.transitionCost = object.transitionCost ?? 0;
    return message;
  },
};

function createBaseAddSessionPartResponse(): AddSessionPartResponse {
  return { part: undefined };
}

export const AddSessionPartResponse = {
  encode(message: AddSessionPartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      SessionPart.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionPartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionPartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = SessionPart.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionPartResponse {
    return { part: isSet(object.part) ? SessionPart.fromJSON(object.part) : undefined };
  },

  toJSON(message: AddSessionPartResponse): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = SessionPart.toJSON(message.part);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionPartResponse>, I>>(base?: I): AddSessionPartResponse {
    return AddSessionPartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionPartResponse>, I>>(object: I): AddSessionPartResponse {
    const message = createBaseAddSessionPartResponse();
    message.part = (object.part !== undefined && object.part !== null)
      ? SessionPart.fromPartial(object.part)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionPartRequest(): UpdateSessionPartRequest {
  return { partId: 0, name: "", displayOrder: 0, maxEntry: 0 };
}

export const UpdateSessionPartRequest = {
  encode(message: UpdateSessionPartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.partId !== 0) {
      writer.uint32(8).int32(message.partId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.displayOrder !== 0) {
      writer.uint32(24).int32(message.displayOrder);
    }
    if (message.maxEntry !== 0) {
      writer.uint32(32).int32(message.maxEntry);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionPartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionPartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.partId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.displayOrder = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxEntry = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionPartRequest {
    return {
      partId: isSet(object.partId) ? globalThis.Number(object.partId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayOrder: isSet(object.displayOrder) ? globalThis.Number(object.displayOrder) : 0,
      maxEntry: isSet(object.maxEntry) ? globalThis.Number(object.maxEntry) : 0,
    };
  },

  toJSON(message: UpdateSessionPartRequest): unknown {
    const obj: any = {};
    if (message.partId !== 0) {
      obj.partId = Math.round(message.partId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayOrder !== 0) {
      obj.displayOrder = Math.round(message.displayOrder);
    }
    if (message.maxEntry !== 0) {
      obj.maxEntry = Math.round(message.maxEntry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionPartRequest>, I>>(base?: I): UpdateSessionPartRequest {
    return UpdateSessionPartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionPartRequest>, I>>(object: I): UpdateSessionPartRequest {
    const message = createBaseUpdateSessionPartRequest();
    message.partId = object.partId ?? 0;
    message.name = object.name ?? "";
    message.displayOrder = object.displayOrder ?? 0;
    message.maxEntry = object.maxEntry ?? 0;
    return message;
  },
};

function createBaseUpdateSessionPartResponse(): UpdateSessionPartResponse {
  return { part: undefined };
}

export const UpdateSessionPartResponse = {
  encode(message: UpdateSessionPartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      SessionPart.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSessionPartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionPartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = SessionPart.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionPartResponse {
    return { part: isSet(object.part) ? SessionPart.fromJSON(object.part) : undefined };
  },

  toJSON(message: UpdateSessionPartResponse): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = SessionPart.toJSON(message.part);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSessionPartResponse>, I>>(base?: I): UpdateSessionPartResponse {
    return UpdateSessionPartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSessionPartResponse>, I>>(object: I): UpdateSessionPartResponse {
    const message = createBaseUpdateSessionPartResponse();
    message.part = (object.part !== undefined && object.part !== null)
      ? SessionPart.fromPartial(object.part)
      : undefined;
    return message;
  },
};

function createBaseDeleteSessionPartRequest(): DeleteSessionPartRequest {
  return {};
}

export const DeleteSessionPartRequest = {
  encode(_: DeleteSessionPartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionPartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionPartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteSessionPartRequest {
    return {};
  },

  toJSON(_: DeleteSessionPartRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionPartRequest>, I>>(base?: I): DeleteSessionPartRequest {
    return DeleteSessionPartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionPartRequest>, I>>(_: I): DeleteSessionPartRequest {
    const message = createBaseDeleteSessionPartRequest();
    return message;
  },
};

function createBaseDeleteSessionPartResponse(): DeleteSessionPartResponse {
  return { success: false };
}

export const DeleteSessionPartResponse = {
  encode(message: DeleteSessionPartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionPartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionPartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionPartResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteSessionPartResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionPartResponse>, I>>(base?: I): DeleteSessionPartResponse {
    return DeleteSessionPartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionPartResponse>, I>>(object: I): DeleteSessionPartResponse {
    const message = createBaseDeleteSessionPartResponse();
    message.success = object.success ?? false;
    return message;
  },
};

/** Session Part Service */
export interface SessionPartService {
  /** GET /sessions/{id}/parts */
  ListSessionParts(request: ListSessionPartsRequest): Promise<ListSessionPartsResponse>;
  /** POST /sessions/{id}/parts */
  AddSessionPart(request: AddSessionPartRequest): Promise<AddSessionPartResponse>;
  /** PUT /sessions/{id}/parts/{partId} */
  UpdateSessionPart(request: UpdateSessionPartRequest): Promise<UpdateSessionPartResponse>;
  /** DELETE /sessions/{id}/parts/{partId} */
  DeleteSessionPart(request: DeleteSessionPartRequest): Promise<DeleteSessionPartResponse>;
}

export const SessionPartServiceServiceName = "bst.v1.SessionPartService";
export class SessionPartServiceClientImpl implements SessionPartService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionPartServiceServiceName;
    this.rpc = rpc;
    this.ListSessionParts = this.ListSessionParts.bind(this);
    this.AddSessionPart = this.AddSessionPart.bind(this);
    this.UpdateSessionPart = this.UpdateSessionPart.bind(this);
    this.DeleteSessionPart = this.DeleteSessionPart.bind(this);
  }
  ListSessionParts(request: ListSessionPartsRequest): Promise<ListSessionPartsResponse> {
    const data = ListSessionPartsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSessionParts", data);
    return promise.then((data) => ListSessionPartsResponse.decode(_m0.Reader.create(data)));
  }

  AddSessionPart(request: AddSessionPartRequest): Promise<AddSessionPartResponse> {
    const data = AddSessionPartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSessionPart", data);
    return promise.then((data) => AddSessionPartResponse.decode(_m0.Reader.create(data)));
  }

  UpdateSessionPart(request: UpdateSessionPartRequest): Promise<UpdateSessionPartResponse> {
    const data = UpdateSessionPartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSessionPart", data);
    return promise.then((data) => UpdateSessionPartResponse.decode(_m0.Reader.create(data)));
  }

  DeleteSessionPart(request: DeleteSessionPartRequest): Promise<DeleteSessionPartResponse> {
    const data = DeleteSessionPartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteSessionPart", data);
    return promise.then((data) => DeleteSessionPartResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

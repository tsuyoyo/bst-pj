// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: artist-service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Artist, Genre, Song } from "./content";

export const protobufPackage = "bst.v1";

export interface CreateArtistRequest {
  name: string;
  description: string;
  genre: Genre | undefined;
  website: string;
}

export interface CreateArtistResponse {
  artist: Artist | undefined;
}

export interface ListArtistsRequest {
  pageSize: number;
  pageToken: number;
  query: string;
  genre: Genre | undefined;
}

export interface ListArtistsResponse {
  artists: Artist[];
  nextPageToken: string;
  totalSize: number;
}

export interface GetArtistRequest {
  artistId: number;
}

export interface GetArtistResponse {
  artist: Artist | undefined;
}

export interface UpdateArtistRequest {
  artistId: number;
  name: string;
  description: string;
  genre: Genre | undefined;
  website: string;
}

export interface UpdateArtistResponse {
  artist: Artist | undefined;
}

export interface DeleteArtistRequest {
  artistId: number;
}

export interface DeleteArtistResponse {
  success: boolean;
}

export interface ListArtistSongsRequest {
  artistId: number;
  pageSize: number;
  pageToken: number;
}

export interface ListArtistSongsResponse {
  songs: Song[];
  nextPageToken: string;
  totalSize: number;
}

function createBaseCreateArtistRequest(): CreateArtistRequest {
  return { name: "", description: "", genre: undefined, website: "" };
}

export const CreateArtistRequest = {
  encode(message: CreateArtistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.genre !== undefined) {
      Genre.encode(message.genre, writer.uint32(26).fork()).ldelim();
    }
    if (message.website !== "") {
      writer.uint32(34).string(message.website);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateArtistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.genre = Genre.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.website = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArtistRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      genre: isSet(object.genre) ? Genre.fromJSON(object.genre) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : "",
    };
  },

  toJSON(message: CreateArtistRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.genre !== undefined) {
      obj.genre = Genre.toJSON(message.genre);
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateArtistRequest>, I>>(base?: I): CreateArtistRequest {
    return CreateArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateArtistRequest>, I>>(object: I): CreateArtistRequest {
    const message = createBaseCreateArtistRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.genre = (object.genre !== undefined && object.genre !== null) ? Genre.fromPartial(object.genre) : undefined;
    message.website = object.website ?? "";
    return message;
  },
};

function createBaseCreateArtistResponse(): CreateArtistResponse {
  return { artist: undefined };
}

export const CreateArtistResponse = {
  encode(message: CreateArtistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artist !== undefined) {
      Artist.encode(message.artist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateArtistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArtistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artist = Artist.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArtistResponse {
    return { artist: isSet(object.artist) ? Artist.fromJSON(object.artist) : undefined };
  },

  toJSON(message: CreateArtistResponse): unknown {
    const obj: any = {};
    if (message.artist !== undefined) {
      obj.artist = Artist.toJSON(message.artist);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateArtistResponse>, I>>(base?: I): CreateArtistResponse {
    return CreateArtistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateArtistResponse>, I>>(object: I): CreateArtistResponse {
    const message = createBaseCreateArtistResponse();
    message.artist = (object.artist !== undefined && object.artist !== null)
      ? Artist.fromPartial(object.artist)
      : undefined;
    return message;
  },
};

function createBaseListArtistsRequest(): ListArtistsRequest {
  return { pageSize: 0, pageToken: 0, query: "", genre: undefined };
}

export const ListArtistsRequest = {
  encode(message: ListArtistsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== 0) {
      writer.uint32(16).int32(message.pageToken);
    }
    if (message.query !== "") {
      writer.uint32(26).string(message.query);
    }
    if (message.genre !== undefined) {
      Genre.encode(message.genre, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListArtistsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtistsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageToken = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.genre = Genre.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtistsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.Number(object.pageToken) : 0,
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      genre: isSet(object.genre) ? Genre.fromJSON(object.genre) : undefined,
    };
  },

  toJSON(message: ListArtistsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== 0) {
      obj.pageToken = Math.round(message.pageToken);
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.genre !== undefined) {
      obj.genre = Genre.toJSON(message.genre);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListArtistsRequest>, I>>(base?: I): ListArtistsRequest {
    return ListArtistsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListArtistsRequest>, I>>(object: I): ListArtistsRequest {
    const message = createBaseListArtistsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? 0;
    message.query = object.query ?? "";
    message.genre = (object.genre !== undefined && object.genre !== null) ? Genre.fromPartial(object.genre) : undefined;
    return message;
  },
};

function createBaseListArtistsResponse(): ListArtistsResponse {
  return { artists: [], nextPageToken: "", totalSize: 0 };
}

export const ListArtistsResponse = {
  encode(message: ListArtistsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.artists) {
      Artist.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListArtistsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtistsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artists.push(Artist.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtistsResponse {
    return {
      artists: globalThis.Array.isArray(object?.artists) ? object.artists.map((e: any) => Artist.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListArtistsResponse): unknown {
    const obj: any = {};
    if (message.artists?.length) {
      obj.artists = message.artists.map((e) => Artist.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListArtistsResponse>, I>>(base?: I): ListArtistsResponse {
    return ListArtistsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListArtistsResponse>, I>>(object: I): ListArtistsResponse {
    const message = createBaseListArtistsResponse();
    message.artists = object.artists?.map((e) => Artist.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGetArtistRequest(): GetArtistRequest {
  return { artistId: 0 };
}

export const GetArtistRequest = {
  encode(message: GetArtistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artistId !== 0) {
      writer.uint32(8).int32(message.artistId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetArtistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.artistId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArtistRequest {
    return { artistId: isSet(object.artistId) ? globalThis.Number(object.artistId) : 0 };
  },

  toJSON(message: GetArtistRequest): unknown {
    const obj: any = {};
    if (message.artistId !== 0) {
      obj.artistId = Math.round(message.artistId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArtistRequest>, I>>(base?: I): GetArtistRequest {
    return GetArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArtistRequest>, I>>(object: I): GetArtistRequest {
    const message = createBaseGetArtistRequest();
    message.artistId = object.artistId ?? 0;
    return message;
  },
};

function createBaseGetArtistResponse(): GetArtistResponse {
  return { artist: undefined };
}

export const GetArtistResponse = {
  encode(message: GetArtistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artist !== undefined) {
      Artist.encode(message.artist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetArtistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArtistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artist = Artist.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArtistResponse {
    return { artist: isSet(object.artist) ? Artist.fromJSON(object.artist) : undefined };
  },

  toJSON(message: GetArtistResponse): unknown {
    const obj: any = {};
    if (message.artist !== undefined) {
      obj.artist = Artist.toJSON(message.artist);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArtistResponse>, I>>(base?: I): GetArtistResponse {
    return GetArtistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArtistResponse>, I>>(object: I): GetArtistResponse {
    const message = createBaseGetArtistResponse();
    message.artist = (object.artist !== undefined && object.artist !== null)
      ? Artist.fromPartial(object.artist)
      : undefined;
    return message;
  },
};

function createBaseUpdateArtistRequest(): UpdateArtistRequest {
  return { artistId: 0, name: "", description: "", genre: undefined, website: "" };
}

export const UpdateArtistRequest = {
  encode(message: UpdateArtistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artistId !== 0) {
      writer.uint32(8).int32(message.artistId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.genre !== undefined) {
      Genre.encode(message.genre, writer.uint32(34).fork()).ldelim();
    }
    if (message.website !== "") {
      writer.uint32(42).string(message.website);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateArtistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.artistId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.genre = Genre.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.website = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateArtistRequest {
    return {
      artistId: isSet(object.artistId) ? globalThis.Number(object.artistId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      genre: isSet(object.genre) ? Genre.fromJSON(object.genre) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : "",
    };
  },

  toJSON(message: UpdateArtistRequest): unknown {
    const obj: any = {};
    if (message.artistId !== 0) {
      obj.artistId = Math.round(message.artistId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.genre !== undefined) {
      obj.genre = Genre.toJSON(message.genre);
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateArtistRequest>, I>>(base?: I): UpdateArtistRequest {
    return UpdateArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateArtistRequest>, I>>(object: I): UpdateArtistRequest {
    const message = createBaseUpdateArtistRequest();
    message.artistId = object.artistId ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.genre = (object.genre !== undefined && object.genre !== null) ? Genre.fromPartial(object.genre) : undefined;
    message.website = object.website ?? "";
    return message;
  },
};

function createBaseUpdateArtistResponse(): UpdateArtistResponse {
  return { artist: undefined };
}

export const UpdateArtistResponse = {
  encode(message: UpdateArtistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artist !== undefined) {
      Artist.encode(message.artist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateArtistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateArtistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artist = Artist.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateArtistResponse {
    return { artist: isSet(object.artist) ? Artist.fromJSON(object.artist) : undefined };
  },

  toJSON(message: UpdateArtistResponse): unknown {
    const obj: any = {};
    if (message.artist !== undefined) {
      obj.artist = Artist.toJSON(message.artist);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateArtistResponse>, I>>(base?: I): UpdateArtistResponse {
    return UpdateArtistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateArtistResponse>, I>>(object: I): UpdateArtistResponse {
    const message = createBaseUpdateArtistResponse();
    message.artist = (object.artist !== undefined && object.artist !== null)
      ? Artist.fromPartial(object.artist)
      : undefined;
    return message;
  },
};

function createBaseDeleteArtistRequest(): DeleteArtistRequest {
  return { artistId: 0 };
}

export const DeleteArtistRequest = {
  encode(message: DeleteArtistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artistId !== 0) {
      writer.uint32(8).int32(message.artistId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteArtistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.artistId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteArtistRequest {
    return { artistId: isSet(object.artistId) ? globalThis.Number(object.artistId) : 0 };
  },

  toJSON(message: DeleteArtistRequest): unknown {
    const obj: any = {};
    if (message.artistId !== 0) {
      obj.artistId = Math.round(message.artistId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteArtistRequest>, I>>(base?: I): DeleteArtistRequest {
    return DeleteArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteArtistRequest>, I>>(object: I): DeleteArtistRequest {
    const message = createBaseDeleteArtistRequest();
    message.artistId = object.artistId ?? 0;
    return message;
  },
};

function createBaseDeleteArtistResponse(): DeleteArtistResponse {
  return { success: false };
}

export const DeleteArtistResponse = {
  encode(message: DeleteArtistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteArtistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArtistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteArtistResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteArtistResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteArtistResponse>, I>>(base?: I): DeleteArtistResponse {
    return DeleteArtistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteArtistResponse>, I>>(object: I): DeleteArtistResponse {
    const message = createBaseDeleteArtistResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListArtistSongsRequest(): ListArtistSongsRequest {
  return { artistId: 0, pageSize: 0, pageToken: 0 };
}

export const ListArtistSongsRequest = {
  encode(message: ListArtistSongsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.artistId !== 0) {
      writer.uint32(8).int32(message.artistId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== 0) {
      writer.uint32(24).int32(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListArtistSongsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtistSongsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.artistId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageToken = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtistSongsRequest {
    return {
      artistId: isSet(object.artistId) ? globalThis.Number(object.artistId) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.Number(object.pageToken) : 0,
    };
  },

  toJSON(message: ListArtistSongsRequest): unknown {
    const obj: any = {};
    if (message.artistId !== 0) {
      obj.artistId = Math.round(message.artistId);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== 0) {
      obj.pageToken = Math.round(message.pageToken);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListArtistSongsRequest>, I>>(base?: I): ListArtistSongsRequest {
    return ListArtistSongsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListArtistSongsRequest>, I>>(object: I): ListArtistSongsRequest {
    const message = createBaseListArtistSongsRequest();
    message.artistId = object.artistId ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? 0;
    return message;
  },
};

function createBaseListArtistSongsResponse(): ListArtistSongsResponse {
  return { songs: [], nextPageToken: "", totalSize: 0 };
}

export const ListArtistSongsResponse = {
  encode(message: ListArtistSongsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.songs) {
      Song.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListArtistSongsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtistSongsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.songs.push(Song.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtistSongsResponse {
    return {
      songs: globalThis.Array.isArray(object?.songs) ? object.songs.map((e: any) => Song.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListArtistSongsResponse): unknown {
    const obj: any = {};
    if (message.songs?.length) {
      obj.songs = message.songs.map((e) => Song.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListArtistSongsResponse>, I>>(base?: I): ListArtistSongsResponse {
    return ListArtistSongsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListArtistSongsResponse>, I>>(object: I): ListArtistSongsResponse {
    const message = createBaseListArtistSongsResponse();
    message.songs = object.songs?.map((e) => Song.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

export interface ArtistService {
  /** POST /artists */
  CreateArtist(request: CreateArtistRequest): Promise<CreateArtistResponse>;
  /** GET /artists */
  ListArtists(request: ListArtistsRequest): Promise<ListArtistsResponse>;
  /** GET /artists/{id} */
  GetArtist(request: GetArtistRequest): Promise<GetArtistResponse>;
  /** PUT /artists/{id} */
  UpdateArtist(request: UpdateArtistRequest): Promise<UpdateArtistResponse>;
  /** DELETE /artists/{id} */
  DeleteArtist(request: DeleteArtistRequest): Promise<DeleteArtistResponse>;
  /** GET /artists/{id}/songs */
  ListArtistSongs(request: ListArtistSongsRequest): Promise<ListArtistSongsResponse>;
}

export const ArtistServiceServiceName = "bst.v1.ArtistService";
export class ArtistServiceClientImpl implements ArtistService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ArtistServiceServiceName;
    this.rpc = rpc;
    this.CreateArtist = this.CreateArtist.bind(this);
    this.ListArtists = this.ListArtists.bind(this);
    this.GetArtist = this.GetArtist.bind(this);
    this.UpdateArtist = this.UpdateArtist.bind(this);
    this.DeleteArtist = this.DeleteArtist.bind(this);
    this.ListArtistSongs = this.ListArtistSongs.bind(this);
  }
  CreateArtist(request: CreateArtistRequest): Promise<CreateArtistResponse> {
    const data = CreateArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateArtist", data);
    return promise.then((data) => CreateArtistResponse.decode(_m0.Reader.create(data)));
  }

  ListArtists(request: ListArtistsRequest): Promise<ListArtistsResponse> {
    const data = ListArtistsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListArtists", data);
    return promise.then((data) => ListArtistsResponse.decode(_m0.Reader.create(data)));
  }

  GetArtist(request: GetArtistRequest): Promise<GetArtistResponse> {
    const data = GetArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetArtist", data);
    return promise.then((data) => GetArtistResponse.decode(_m0.Reader.create(data)));
  }

  UpdateArtist(request: UpdateArtistRequest): Promise<UpdateArtistResponse> {
    const data = UpdateArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateArtist", data);
    return promise.then((data) => UpdateArtistResponse.decode(_m0.Reader.create(data)));
  }

  DeleteArtist(request: DeleteArtistRequest): Promise<DeleteArtistResponse> {
    const data = DeleteArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteArtist", data);
    return promise.then((data) => DeleteArtistResponse.decode(_m0.Reader.create(data)));
  }

  ListArtistSongs(request: ListArtistSongsRequest): Promise<ListArtistSongsResponse> {
    const data = ListArtistSongsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListArtistSongs", data);
    return promise.then((data) => ListArtistSongsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

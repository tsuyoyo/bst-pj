// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: user-rating-service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { UserRatingBadge } from "./user";

export const protobufPackage = "bst.v1";

export interface RateUserRequest {
  userId: number;
  /** The session ID of the session where the user was rated */
  sessionId: number;
  score: number;
  comment: string;
}

export interface RateUserResponse {
}

export interface GetUserRatingBadgesRequest {
  userId: number;
}

export interface GetUserRatingBadgesResponse {
  badges: UserRatingBadge[];
}

function createBaseRateUserRequest(): RateUserRequest {
  return { userId: 0, sessionId: 0, score: 0, comment: "" };
}

export const RateUserRequest = {
  encode(message: RateUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.sessionId !== 0) {
      writer.uint32(16).int32(message.sessionId);
    }
    if (message.score !== 0) {
      writer.uint32(24).int32(message.score);
    }
    if (message.comment !== "") {
      writer.uint32(34).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RateUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sessionId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.score = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      sessionId: isSet(object.sessionId) ? globalThis.Number(object.sessionId) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: RateUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.sessionId !== 0) {
      obj.sessionId = Math.round(message.sessionId);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateUserRequest>, I>>(base?: I): RateUserRequest {
    return RateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateUserRequest>, I>>(object: I): RateUserRequest {
    const message = createBaseRateUserRequest();
    message.userId = object.userId ?? 0;
    message.sessionId = object.sessionId ?? 0;
    message.score = object.score ?? 0;
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseRateUserResponse(): RateUserResponse {
  return {};
}

export const RateUserResponse = {
  encode(_: RateUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RateUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RateUserResponse {
    return {};
  },

  toJSON(_: RateUserResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RateUserResponse>, I>>(base?: I): RateUserResponse {
    return RateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateUserResponse>, I>>(_: I): RateUserResponse {
    const message = createBaseRateUserResponse();
    return message;
  },
};

function createBaseGetUserRatingBadgesRequest(): GetUserRatingBadgesRequest {
  return { userId: 0 };
}

export const GetUserRatingBadgesRequest = {
  encode(message: GetUserRatingBadgesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserRatingBadgesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRatingBadgesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRatingBadgesRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: GetUserRatingBadgesRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRatingBadgesRequest>, I>>(base?: I): GetUserRatingBadgesRequest {
    return GetUserRatingBadgesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRatingBadgesRequest>, I>>(object: I): GetUserRatingBadgesRequest {
    const message = createBaseGetUserRatingBadgesRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseGetUserRatingBadgesResponse(): GetUserRatingBadgesResponse {
  return { badges: [] };
}

export const GetUserRatingBadgesResponse = {
  encode(message: GetUserRatingBadgesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.badges) {
      UserRatingBadge.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserRatingBadgesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRatingBadgesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.badges.push(UserRatingBadge.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRatingBadgesResponse {
    return {
      badges: globalThis.Array.isArray(object?.badges)
        ? object.badges.map((e: any) => UserRatingBadge.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserRatingBadgesResponse): unknown {
    const obj: any = {};
    if (message.badges?.length) {
      obj.badges = message.badges.map((e) => UserRatingBadge.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRatingBadgesResponse>, I>>(base?: I): GetUserRatingBadgesResponse {
    return GetUserRatingBadgesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRatingBadgesResponse>, I>>(object: I): GetUserRatingBadgesResponse {
    const message = createBaseGetUserRatingBadgesResponse();
    message.badges = object.badges?.map((e) => UserRatingBadge.fromPartial(e)) || [];
    return message;
  },
};

export interface UserRatingService {
  /** POST /user/{id}/ratings */
  RateUser(request: RateUserRequest): Promise<RateUserResponse>;
  /** GET /user/{id}/ratings/badges */
  GetUserRatingBadges(request: GetUserRatingBadgesRequest): Promise<GetUserRatingBadgesResponse>;
}

export const UserRatingServiceServiceName = "bst.v1.UserRatingService";
export class UserRatingServiceClientImpl implements UserRatingService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserRatingServiceServiceName;
    this.rpc = rpc;
    this.RateUser = this.RateUser.bind(this);
    this.GetUserRatingBadges = this.GetUserRatingBadges.bind(this);
  }
  RateUser(request: RateUserRequest): Promise<RateUserResponse> {
    const data = RateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RateUser", data);
    return promise.then((data) => RateUserResponse.decode(_m0.Reader.create(data)));
  }

  GetUserRatingBadges(request: GetUserRatingBadgesRequest): Promise<GetUserRatingBadgesResponse> {
    const data = GetUserRatingBadgesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserRatingBadges", data);
    return promise.then((data) => GetUserRatingBadgesResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

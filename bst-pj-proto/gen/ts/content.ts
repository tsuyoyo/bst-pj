// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: content.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "bst.v1";

export interface Resource {
  type: Resource_ResourceType;
  id: number;
  url: string;
  name: string;
  description: string;
}

export enum Resource_ResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0,
  RESOURCE_TYPE_IMAGE = 1,
  RESOURCE_TYPE_VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function resource_ResourceTypeFromJSON(object: any): Resource_ResourceType {
  switch (object) {
    case 0:
    case "RESOURCE_TYPE_UNSPECIFIED":
      return Resource_ResourceType.RESOURCE_TYPE_UNSPECIFIED;
    case 1:
    case "RESOURCE_TYPE_IMAGE":
      return Resource_ResourceType.RESOURCE_TYPE_IMAGE;
    case 2:
    case "RESOURCE_TYPE_VIDEO":
      return Resource_ResourceType.RESOURCE_TYPE_VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Resource_ResourceType.UNRECOGNIZED;
  }
}

export function resource_ResourceTypeToJSON(object: Resource_ResourceType): string {
  switch (object) {
    case Resource_ResourceType.RESOURCE_TYPE_UNSPECIFIED:
      return "RESOURCE_TYPE_UNSPECIFIED";
    case Resource_ResourceType.RESOURCE_TYPE_IMAGE:
      return "RESOURCE_TYPE_IMAGE";
    case Resource_ResourceType.RESOURCE_TYPE_VIDEO:
      return "RESOURCE_TYPE_VIDEO";
    case Resource_ResourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Song {
  id: number;
  title: string;
  artist: Artist | undefined;
  resources: Resource[];
}

export interface Genre {
  id: number;
  name: string;
}

export interface Artist {
  id: number;
  name: string;
  genre: Genre | undefined;
  website: string;
}

export interface Part {
  id: number;
  name: string;
  description: string;
}

export interface Area {
  name: string;
  /** 1~47 */
  prefectureId: number;
}

export interface Location {
  id: number;
  name: string;
  additionalInfo: string;
  area: Area | undefined;
  mapUrl: string;
}

function createBaseResource(): Resource {
  return { type: 0, id: 0, url: "", name: "", description: "" };
}

export const Resource = {
  encode(message: Resource, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Resource {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resource {
    return {
      type: isSet(object.type) ? resource_ResourceTypeFromJSON(object.type) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Resource): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = resource_ResourceTypeToJSON(message.type);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Resource>, I>>(base?: I): Resource {
    return Resource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Resource>, I>>(object: I): Resource {
    const message = createBaseResource();
    message.type = object.type ?? 0;
    message.id = object.id ?? 0;
    message.url = object.url ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseSong(): Song {
  return { id: 0, title: "", artist: undefined, resources: [] };
}

export const Song = {
  encode(message: Song, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.artist !== undefined) {
      Artist.encode(message.artist, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.resources) {
      Resource.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Song {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.artist = Artist.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resources.push(Resource.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Song {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      artist: isSet(object.artist) ? Artist.fromJSON(object.artist) : undefined,
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => Resource.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Song): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.artist !== undefined) {
      obj.artist = Artist.toJSON(message.artist);
    }
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => Resource.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Song>, I>>(base?: I): Song {
    return Song.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Song>, I>>(object: I): Song {
    const message = createBaseSong();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.artist = (object.artist !== undefined && object.artist !== null)
      ? Artist.fromPartial(object.artist)
      : undefined;
    message.resources = object.resources?.map((e) => Resource.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGenre(): Genre {
  return { id: 0, name: "" };
}

export const Genre = {
  encode(message: Genre, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Genre {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenre();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Genre {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Genre): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Genre>, I>>(base?: I): Genre {
    return Genre.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Genre>, I>>(object: I): Genre {
    const message = createBaseGenre();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseArtist(): Artist {
  return { id: 0, name: "", genre: undefined, website: "" };
}

export const Artist = {
  encode(message: Artist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.genre !== undefined) {
      Genre.encode(message.genre, writer.uint32(26).fork()).ldelim();
    }
    if (message.website !== "") {
      writer.uint32(34).string(message.website);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Artist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.genre = Genre.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.website = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Artist {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      genre: isSet(object.genre) ? Genre.fromJSON(object.genre) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : "",
    };
  },

  toJSON(message: Artist): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.genre !== undefined) {
      obj.genre = Genre.toJSON(message.genre);
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Artist>, I>>(base?: I): Artist {
    return Artist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Artist>, I>>(object: I): Artist {
    const message = createBaseArtist();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.genre = (object.genre !== undefined && object.genre !== null) ? Genre.fromPartial(object.genre) : undefined;
    message.website = object.website ?? "";
    return message;
  },
};

function createBasePart(): Part {
  return { id: 0, name: "", description: "" };
}

export const Part = {
  encode(message: Part, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Part {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Part {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Part): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Part>, I>>(base?: I): Part {
    return Part.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Part>, I>>(object: I): Part {
    const message = createBasePart();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseArea(): Area {
  return { name: "", prefectureId: 0 };
}

export const Area = {
  encode(message: Area, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.prefectureId !== 0) {
      writer.uint32(16).int32(message.prefectureId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Area {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.prefectureId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Area {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      prefectureId: isSet(object.prefectureId) ? globalThis.Number(object.prefectureId) : 0,
    };
  },

  toJSON(message: Area): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.prefectureId !== 0) {
      obj.prefectureId = Math.round(message.prefectureId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Area>, I>>(base?: I): Area {
    return Area.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Area>, I>>(object: I): Area {
    const message = createBaseArea();
    message.name = object.name ?? "";
    message.prefectureId = object.prefectureId ?? 0;
    return message;
  },
};

function createBaseLocation(): Location {
  return { id: 0, name: "", additionalInfo: "", area: undefined, mapUrl: "" };
}

export const Location = {
  encode(message: Location, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.additionalInfo !== "") {
      writer.uint32(26).string(message.additionalInfo);
    }
    if (message.area !== undefined) {
      Area.encode(message.area, writer.uint32(34).fork()).ldelim();
    }
    if (message.mapUrl !== "") {
      writer.uint32(42).string(message.mapUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Location {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.additionalInfo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.area = Area.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mapUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      additionalInfo: isSet(object.additionalInfo) ? globalThis.String(object.additionalInfo) : "",
      area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
      mapUrl: isSet(object.mapUrl) ? globalThis.String(object.mapUrl) : "",
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.additionalInfo !== "") {
      obj.additionalInfo = message.additionalInfo;
    }
    if (message.area !== undefined) {
      obj.area = Area.toJSON(message.area);
    }
    if (message.mapUrl !== "") {
      obj.mapUrl = message.mapUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Location>, I>>(base?: I): Location {
    return Location.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Location>, I>>(object: I): Location {
    const message = createBaseLocation();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.additionalInfo = object.additionalInfo ?? "";
    message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
    message.mapUrl = object.mapUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

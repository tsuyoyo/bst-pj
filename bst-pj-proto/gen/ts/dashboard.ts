// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: dashboard.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "bst.v1";

/** Dashboard data model */
export interface DashboardData {
  id: number;
  content: string;
  userId: number;
  updatedAt: Date | undefined;
}

/** Search index model */
export interface SearchIndex {
  id: number;
  keywords: string;
  targetType: string;
  targetId: number;
  indexedAt: Date | undefined;
}

/** Search result model */
export interface SearchResult {
  targetType: string;
  targetId: number;
  title: string;
  description: string;
  relevanceScore: number;
}

function createBaseDashboardData(): DashboardData {
  return { id: 0, content: "", userId: 0, updatedAt: undefined };
}

export const DashboardData = {
  encode(message: DashboardData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DashboardData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardData {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: DashboardData): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardData>, I>>(base?: I): DashboardData {
    return DashboardData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardData>, I>>(object: I): DashboardData {
    const message = createBaseDashboardData();
    message.id = object.id ?? 0;
    message.content = object.content ?? "";
    message.userId = object.userId ?? 0;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseSearchIndex(): SearchIndex {
  return { id: 0, keywords: "", targetType: "", targetId: 0, indexedAt: undefined };
}

export const SearchIndex = {
  encode(message: SearchIndex, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.keywords !== "") {
      writer.uint32(18).string(message.keywords);
    }
    if (message.targetType !== "") {
      writer.uint32(26).string(message.targetType);
    }
    if (message.targetId !== 0) {
      writer.uint32(32).int32(message.targetId);
    }
    if (message.indexedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.indexedAt), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchIndex {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keywords = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetType = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.indexedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchIndex {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      keywords: isSet(object.keywords) ? globalThis.String(object.keywords) : "",
      targetType: isSet(object.targetType) ? globalThis.String(object.targetType) : "",
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      indexedAt: isSet(object.indexedAt) ? fromJsonTimestamp(object.indexedAt) : undefined,
    };
  },

  toJSON(message: SearchIndex): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.keywords !== "") {
      obj.keywords = message.keywords;
    }
    if (message.targetType !== "") {
      obj.targetType = message.targetType;
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.indexedAt !== undefined) {
      obj.indexedAt = message.indexedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchIndex>, I>>(base?: I): SearchIndex {
    return SearchIndex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchIndex>, I>>(object: I): SearchIndex {
    const message = createBaseSearchIndex();
    message.id = object.id ?? 0;
    message.keywords = object.keywords ?? "";
    message.targetType = object.targetType ?? "";
    message.targetId = object.targetId ?? 0;
    message.indexedAt = object.indexedAt ?? undefined;
    return message;
  },
};

function createBaseSearchResult(): SearchResult {
  return { targetType: "", targetId: 0, title: "", description: "", relevanceScore: 0 };
}

export const SearchResult = {
  encode(message: SearchResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetType !== "") {
      writer.uint32(10).string(message.targetType);
    }
    if (message.targetId !== 0) {
      writer.uint32(16).int32(message.targetId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.relevanceScore !== 0) {
      writer.uint32(45).float(message.relevanceScore);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetType = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.relevanceScore = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResult {
    return {
      targetType: isSet(object.targetType) ? globalThis.String(object.targetType) : "",
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      relevanceScore: isSet(object.relevanceScore) ? globalThis.Number(object.relevanceScore) : 0,
    };
  },

  toJSON(message: SearchResult): unknown {
    const obj: any = {};
    if (message.targetType !== "") {
      obj.targetType = message.targetType;
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.relevanceScore !== 0) {
      obj.relevanceScore = message.relevanceScore;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchResult>, I>>(base?: I): SearchResult {
    return SearchResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchResult>, I>>(object: I): SearchResult {
    const message = createBaseSearchResult();
    message.targetType = object.targetType ?? "";
    message.targetId = object.targetId ?? 0;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.relevanceScore = object.relevanceScore ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "bst.v1";

export enum UserParticipantStatus {
  USER_PARTICIPANT_STATUS_UNSPECIFIED = 0,
  USER_PARTICIPANT_STATUS_PARTICIPANT = 1,
  USER_PARTICIPANT_STATUS_CANCEL = 2,
  UNRECOGNIZED = -1,
}

export function userParticipantStatusFromJSON(object: any): UserParticipantStatus {
  switch (object) {
    case 0:
    case "USER_PARTICIPANT_STATUS_UNSPECIFIED":
      return UserParticipantStatus.USER_PARTICIPANT_STATUS_UNSPECIFIED;
    case 1:
    case "USER_PARTICIPANT_STATUS_PARTICIPANT":
      return UserParticipantStatus.USER_PARTICIPANT_STATUS_PARTICIPANT;
    case 2:
    case "USER_PARTICIPANT_STATUS_CANCEL":
      return UserParticipantStatus.USER_PARTICIPANT_STATUS_CANCEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserParticipantStatus.UNRECOGNIZED;
  }
}

export function userParticipantStatusToJSON(object: UserParticipantStatus): string {
  switch (object) {
    case UserParticipantStatus.USER_PARTICIPANT_STATUS_UNSPECIFIED:
      return "USER_PARTICIPANT_STATUS_UNSPECIFIED";
    case UserParticipantStatus.USER_PARTICIPANT_STATUS_PARTICIPANT:
      return "USER_PARTICIPANT_STATUS_PARTICIPANT";
    case UserParticipantStatus.USER_PARTICIPANT_STATUS_CANCEL:
      return "USER_PARTICIPANT_STATUS_CANCEL";
    case UserParticipantStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** User role enumeration */
export enum UserRole {
  USER_ROLE_UNSPECIFIED = 0,
  USER_ROLE_ADMIN = 1,
  USER_ROLE_ORGANIZER = 2,
  USER_ROLE_MEMBER = 3,
  UNRECOGNIZED = -1,
}

export function userRoleFromJSON(object: any): UserRole {
  switch (object) {
    case 0:
    case "USER_ROLE_UNSPECIFIED":
      return UserRole.USER_ROLE_UNSPECIFIED;
    case 1:
    case "USER_ROLE_ADMIN":
      return UserRole.USER_ROLE_ADMIN;
    case 2:
    case "USER_ROLE_ORGANIZER":
      return UserRole.USER_ROLE_ORGANIZER;
    case 3:
    case "USER_ROLE_MEMBER":
      return UserRole.USER_ROLE_MEMBER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserRole.UNRECOGNIZED;
  }
}

export function userRoleToJSON(object: UserRole): string {
  switch (object) {
    case UserRole.USER_ROLE_UNSPECIFIED:
      return "USER_ROLE_UNSPECIFIED";
    case UserRole.USER_ROLE_ADMIN:
      return "USER_ROLE_ADMIN";
    case UserRole.USER_ROLE_ORGANIZER:
      return "USER_ROLE_ORGANIZER";
    case UserRole.USER_ROLE_MEMBER:
      return "USER_ROLE_MEMBER";
    case UserRole.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** User model */
export interface User {
  id: number;
  name: string;
  email: string;
  role: UserRole;
  status: UserParticipantStatus;
  profile: Profile | undefined;
}

/** Profile model */
export interface Profile {
  id: number;
  bio: string;
  avatar: string;
  userId: number;
}

/** Rating model */
export interface Rating {
  id: number;
  score: number;
  userId: number;
  targetId: number;
  targetType: string;
  createdAt: Date | undefined;
}

/** Rating history model */
export interface RatingHistory {
  id: number;
  ratingId: number;
  previousScore: number;
  createdAt: Date | undefined;
}

function createBaseUser(): User {
  return { id: 0, name: "", email: "", role: 0, status: 0, profile: undefined };
}

export const User = {
  encode(message: User, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.role !== 0) {
      writer.uint32(32).int32(message.role);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): User {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? userRoleFromJSON(object.role) : 0,
      status: isSet(object.status) ? userParticipantStatusFromJSON(object.status) : 0,
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== 0) {
      obj.role = userRoleToJSON(message.role);
    }
    if (message.status !== 0) {
      obj.status = userParticipantStatusToJSON(message.status);
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? 0;
    message.status = object.status ?? 0;
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseProfile(): Profile {
  return { id: 0, bio: "", avatar: "", userId: 0 };
}

export const Profile = {
  encode(message: Profile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.bio !== "") {
      writer.uint32(18).string(message.bio);
    }
    if (message.avatar !== "") {
      writer.uint32(26).string(message.avatar);
    }
    if (message.userId !== 0) {
      writer.uint32(32).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Profile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bio = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.id = object.id ?? 0;
    message.bio = object.bio ?? "";
    message.avatar = object.avatar ?? "";
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseRating(): Rating {
  return { id: 0, score: 0, userId: 0, targetId: 0, targetType: "", createdAt: undefined };
}

export const Rating = {
  encode(message: Rating, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.targetId !== 0) {
      writer.uint32(32).int32(message.targetId);
    }
    if (message.targetType !== "") {
      writer.uint32(42).string(message.targetType);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Rating {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRating();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.targetType = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rating {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      targetType: isSet(object.targetType) ? globalThis.String(object.targetType) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Rating): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.targetType !== "") {
      obj.targetType = message.targetType;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Rating>, I>>(base?: I): Rating {
    return Rating.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Rating>, I>>(object: I): Rating {
    const message = createBaseRating();
    message.id = object.id ?? 0;
    message.score = object.score ?? 0;
    message.userId = object.userId ?? 0;
    message.targetId = object.targetId ?? 0;
    message.targetType = object.targetType ?? "";
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseRatingHistory(): RatingHistory {
  return { id: 0, ratingId: 0, previousScore: 0, createdAt: undefined };
}

export const RatingHistory = {
  encode(message: RatingHistory, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.ratingId !== 0) {
      writer.uint32(16).int32(message.ratingId);
    }
    if (message.previousScore !== 0) {
      writer.uint32(24).int32(message.previousScore);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RatingHistory {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRatingHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ratingId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.previousScore = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RatingHistory {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      ratingId: isSet(object.ratingId) ? globalThis.Number(object.ratingId) : 0,
      previousScore: isSet(object.previousScore) ? globalThis.Number(object.previousScore) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: RatingHistory): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.ratingId !== 0) {
      obj.ratingId = Math.round(message.ratingId);
    }
    if (message.previousScore !== 0) {
      obj.previousScore = Math.round(message.previousScore);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RatingHistory>, I>>(base?: I): RatingHistory {
    return RatingHistory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RatingHistory>, I>>(object: I): RatingHistory {
    const message = createBaseRatingHistory();
    message.id = object.id ?? 0;
    message.ratingId = object.ratingId ?? 0;
    message.previousScore = object.previousScore ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

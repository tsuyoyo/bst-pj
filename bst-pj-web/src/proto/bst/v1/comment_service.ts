// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/comment_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Comment } from "./communication";

export const protobufPackage = "bst.v1";

export interface GetCommentRequest {
  id: number;
}

export interface PostCommentRequest {
  content: string;
  userId: number;
  threadId: number;
}

export interface UpdateCommentRequest {
  id: number;
  content: string;
}

export interface DeleteCommentRequest {
  id: number;
}

export interface DeleteCommentResponse {
  success: boolean;
}

function createBaseGetCommentRequest(): GetCommentRequest {
  return { id: 0 };
}

export const GetCommentRequest = {
  encode(message: GetCommentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCommentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCommentRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetCommentRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCommentRequest>, I>>(base?: I): GetCommentRequest {
    return GetCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCommentRequest>, I>>(object: I): GetCommentRequest {
    const message = createBaseGetCommentRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBasePostCommentRequest(): PostCommentRequest {
  return { content: "", userId: 0, threadId: 0 };
}

export const PostCommentRequest = {
  encode(message: PostCommentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.threadId !== 0) {
      writer.uint32(24).int32(message.threadId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PostCommentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.threadId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostCommentRequest {
    return {
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      threadId: isSet(object.threadId) ? globalThis.Number(object.threadId) : 0,
    };
  },

  toJSON(message: PostCommentRequest): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.threadId !== 0) {
      obj.threadId = Math.round(message.threadId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostCommentRequest>, I>>(base?: I): PostCommentRequest {
    return PostCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostCommentRequest>, I>>(object: I): PostCommentRequest {
    const message = createBasePostCommentRequest();
    message.content = object.content ?? "";
    message.userId = object.userId ?? 0;
    message.threadId = object.threadId ?? 0;
    return message;
  },
};

function createBaseUpdateCommentRequest(): UpdateCommentRequest {
  return { id: 0, content: "" };
}

export const UpdateCommentRequest = {
  encode(message: UpdateCommentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCommentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCommentRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: UpdateCommentRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCommentRequest>, I>>(base?: I): UpdateCommentRequest {
    return UpdateCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCommentRequest>, I>>(object: I): UpdateCommentRequest {
    const message = createBaseUpdateCommentRequest();
    message.id = object.id ?? 0;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseDeleteCommentRequest(): DeleteCommentRequest {
  return { id: 0 };
}

export const DeleteCommentRequest = {
  encode(message: DeleteCommentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteCommentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCommentRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteCommentRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCommentRequest>, I>>(base?: I): DeleteCommentRequest {
    return DeleteCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCommentRequest>, I>>(object: I): DeleteCommentRequest {
    const message = createBaseDeleteCommentRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteCommentResponse(): DeleteCommentResponse {
  return { success: false };
}

export const DeleteCommentResponse = {
  encode(message: DeleteCommentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteCommentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCommentResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteCommentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCommentResponse>, I>>(base?: I): DeleteCommentResponse {
    return DeleteCommentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCommentResponse>, I>>(object: I): DeleteCommentResponse {
    const message = createBaseDeleteCommentResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface CommentService {
  GetComment(request: GetCommentRequest): Promise<Comment>;
  PostComment(request: PostCommentRequest): Promise<Comment>;
  UpdateComment(request: UpdateCommentRequest): Promise<Comment>;
  DeleteComment(request: DeleteCommentRequest): Promise<DeleteCommentResponse>;
}

export const CommentServiceServiceName = "bst.v1.CommentService";
export class CommentServiceClientImpl implements CommentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CommentServiceServiceName;
    this.rpc = rpc;
    this.GetComment = this.GetComment.bind(this);
    this.PostComment = this.PostComment.bind(this);
    this.UpdateComment = this.UpdateComment.bind(this);
    this.DeleteComment = this.DeleteComment.bind(this);
  }
  GetComment(request: GetCommentRequest): Promise<Comment> {
    const data = GetCommentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetComment", data);
    return promise.then((data) => Comment.decode(_m0.Reader.create(data)));
  }

  PostComment(request: PostCommentRequest): Promise<Comment> {
    const data = PostCommentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PostComment", data);
    return promise.then((data) => Comment.decode(_m0.Reader.create(data)));
  }

  UpdateComment(request: UpdateCommentRequest): Promise<Comment> {
    const data = UpdateCommentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateComment", data);
    return promise.then((data) => Comment.decode(_m0.Reader.create(data)));
  }

  DeleteComment(request: DeleteCommentRequest): Promise<DeleteCommentResponse> {
    const data = DeleteCommentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteComment", data);
    return promise.then((data) => DeleteCommentResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session_song_entry_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { SessionSongEntry } from "./session";

export const protobufPackage = "bst.v1";

export interface AddSongEntryRequest {
  sessionPartId: number;
  comment: string;
}

export interface AddSongEntryResponse {
  entry: SessionSongEntry | undefined;
}

export interface UpdateSongEntryRequest {
  comment: string;
}

export interface UpdateSongEntryResponse {
  entry: SessionSongEntry | undefined;
}

export interface DeleteSongEntryRequest {
}

export interface DeleteSongEntryResponse {
  success: boolean;
}

function createBaseAddSongEntryRequest(): AddSongEntryRequest {
  return { sessionPartId: 0, comment: "" };
}

export const AddSongEntryRequest = {
  encode(message: AddSongEntryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionPartId !== 0) {
      writer.uint32(8).int32(message.sessionPartId);
    }
    if (message.comment !== "") {
      writer.uint32(18).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSongEntryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSongEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sessionPartId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSongEntryRequest {
    return {
      sessionPartId: isSet(object.sessionPartId) ? globalThis.Number(object.sessionPartId) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: AddSongEntryRequest): unknown {
    const obj: any = {};
    if (message.sessionPartId !== 0) {
      obj.sessionPartId = Math.round(message.sessionPartId);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSongEntryRequest>, I>>(base?: I): AddSongEntryRequest {
    return AddSongEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSongEntryRequest>, I>>(object: I): AddSongEntryRequest {
    const message = createBaseAddSongEntryRequest();
    message.sessionPartId = object.sessionPartId ?? 0;
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseAddSongEntryResponse(): AddSongEntryResponse {
  return { entry: undefined };
}

export const AddSongEntryResponse = {
  encode(message: AddSongEntryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entry !== undefined) {
      SessionSongEntry.encode(message.entry, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSongEntryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSongEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entry = SessionSongEntry.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSongEntryResponse {
    return { entry: isSet(object.entry) ? SessionSongEntry.fromJSON(object.entry) : undefined };
  },

  toJSON(message: AddSongEntryResponse): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = SessionSongEntry.toJSON(message.entry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSongEntryResponse>, I>>(base?: I): AddSongEntryResponse {
    return AddSongEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSongEntryResponse>, I>>(object: I): AddSongEntryResponse {
    const message = createBaseAddSongEntryResponse();
    message.entry = (object.entry !== undefined && object.entry !== null)
      ? SessionSongEntry.fromPartial(object.entry)
      : undefined;
    return message;
  },
};

function createBaseUpdateSongEntryRequest(): UpdateSongEntryRequest {
  return { comment: "" };
}

export const UpdateSongEntryRequest = {
  encode(message: UpdateSongEntryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.comment !== "") {
      writer.uint32(10).string(message.comment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSongEntryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSongEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSongEntryRequest {
    return { comment: isSet(object.comment) ? globalThis.String(object.comment) : "" };
  },

  toJSON(message: UpdateSongEntryRequest): unknown {
    const obj: any = {};
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSongEntryRequest>, I>>(base?: I): UpdateSongEntryRequest {
    return UpdateSongEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSongEntryRequest>, I>>(object: I): UpdateSongEntryRequest {
    const message = createBaseUpdateSongEntryRequest();
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseUpdateSongEntryResponse(): UpdateSongEntryResponse {
  return { entry: undefined };
}

export const UpdateSongEntryResponse = {
  encode(message: UpdateSongEntryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entry !== undefined) {
      SessionSongEntry.encode(message.entry, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSongEntryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSongEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entry = SessionSongEntry.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSongEntryResponse {
    return { entry: isSet(object.entry) ? SessionSongEntry.fromJSON(object.entry) : undefined };
  },

  toJSON(message: UpdateSongEntryResponse): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = SessionSongEntry.toJSON(message.entry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSongEntryResponse>, I>>(base?: I): UpdateSongEntryResponse {
    return UpdateSongEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSongEntryResponse>, I>>(object: I): UpdateSongEntryResponse {
    const message = createBaseUpdateSongEntryResponse();
    message.entry = (object.entry !== undefined && object.entry !== null)
      ? SessionSongEntry.fromPartial(object.entry)
      : undefined;
    return message;
  },
};

function createBaseDeleteSongEntryRequest(): DeleteSongEntryRequest {
  return {};
}

export const DeleteSongEntryRequest = {
  encode(_: DeleteSongEntryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSongEntryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSongEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteSongEntryRequest {
    return {};
  },

  toJSON(_: DeleteSongEntryRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSongEntryRequest>, I>>(base?: I): DeleteSongEntryRequest {
    return DeleteSongEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSongEntryRequest>, I>>(_: I): DeleteSongEntryRequest {
    const message = createBaseDeleteSongEntryRequest();
    return message;
  },
};

function createBaseDeleteSongEntryResponse(): DeleteSongEntryResponse {
  return { success: false };
}

export const DeleteSongEntryResponse = {
  encode(message: DeleteSongEntryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSongEntryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSongEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSongEntryResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteSongEntryResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSongEntryResponse>, I>>(base?: I): DeleteSongEntryResponse {
    return DeleteSongEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSongEntryResponse>, I>>(object: I): DeleteSongEntryResponse {
    const message = createBaseDeleteSongEntryResponse();
    message.success = object.success ?? false;
    return message;
  },
};

/** Session Song Entry Service */
export interface SessionSongEntryService {
  /** POST /sessions/{id}/songs/{songId}/entries */
  AddSongEntry(request: AddSongEntryRequest): Promise<AddSongEntryResponse>;
  /** PUT /sessions/{id}/songs/{songId}/entries/{entryId} */
  UpdateSongEntry(request: UpdateSongEntryRequest): Promise<UpdateSongEntryResponse>;
  /** DELETE /sessions/{id}/songs/{songId}/entries/{entryId} */
  DeleteSongEntry(request: DeleteSongEntryRequest): Promise<DeleteSongEntryResponse>;
}

export const SessionSongEntryServiceServiceName = "bst.v1.SessionSongEntryService";
export class SessionSongEntryServiceClientImpl implements SessionSongEntryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionSongEntryServiceServiceName;
    this.rpc = rpc;
    this.AddSongEntry = this.AddSongEntry.bind(this);
    this.UpdateSongEntry = this.UpdateSongEntry.bind(this);
    this.DeleteSongEntry = this.DeleteSongEntry.bind(this);
  }
  AddSongEntry(request: AddSongEntryRequest): Promise<AddSongEntryResponse> {
    const data = AddSongEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSongEntry", data);
    return promise.then((data) => AddSongEntryResponse.decode(_m0.Reader.create(data)));
  }

  UpdateSongEntry(request: UpdateSongEntryRequest): Promise<UpdateSongEntryResponse> {
    const data = UpdateSongEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSongEntry", data);
    return promise.then((data) => UpdateSongEntryResponse.decode(_m0.Reader.create(data)));
  }

  DeleteSongEntry(request: DeleteSongEntryRequest): Promise<DeleteSongEntryResponse> {
    const data = DeleteSongEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteSongEntry", data);
    return promise.then((data) => DeleteSongEntryResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/user.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Area } from "./area";
import { Artist, Genre, Part } from "./content";

export const protobufPackage = "bst.v1";

/** User model */
export interface User {
  id: number;
  name: string;
  icon: string;
}

export interface UserFavorite {
  genres: Genre[];
  artists: Artist[];
  parts: Part[];
}

export interface UserProfile {
  user: User | undefined;
  introduction: string;
  areas: Area[];
  favorite: UserFavorite | undefined;
  createdAt:
    | Date
    | undefined;
  /** When the user is well evaluated, the badge is given. */
  badges: UserRatingBadge[];
}

export interface MyProfile {
  profile: UserProfile | undefined;
  email: string;
}

export interface UserRatingBadge {
  id: number;
  name: string;
  color: string;
}

function createBaseUser(): User {
  return { id: 0, name: "", icon: "" };
}

export const User = {
  encode(message: User, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.icon !== "") {
      writer.uint32(26).string(message.icon);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): User {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.icon = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.icon = object.icon ?? "";
    return message;
  },
};

function createBaseUserFavorite(): UserFavorite {
  return { genres: [], artists: [], parts: [] };
}

export const UserFavorite = {
  encode(message: UserFavorite, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.genres) {
      Genre.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.artists) {
      Artist.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.parts) {
      Part.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserFavorite {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserFavorite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genres.push(Genre.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artists.push(Artist.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parts.push(Part.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserFavorite {
    return {
      genres: globalThis.Array.isArray(object?.genres) ? object.genres.map((e: any) => Genre.fromJSON(e)) : [],
      artists: globalThis.Array.isArray(object?.artists) ? object.artists.map((e: any) => Artist.fromJSON(e)) : [],
      parts: globalThis.Array.isArray(object?.parts) ? object.parts.map((e: any) => Part.fromJSON(e)) : [],
    };
  },

  toJSON(message: UserFavorite): unknown {
    const obj: any = {};
    if (message.genres?.length) {
      obj.genres = message.genres.map((e) => Genre.toJSON(e));
    }
    if (message.artists?.length) {
      obj.artists = message.artists.map((e) => Artist.toJSON(e));
    }
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => Part.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserFavorite>, I>>(base?: I): UserFavorite {
    return UserFavorite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserFavorite>, I>>(object: I): UserFavorite {
    const message = createBaseUserFavorite();
    message.genres = object.genres?.map((e) => Genre.fromPartial(e)) || [];
    message.artists = object.artists?.map((e) => Artist.fromPartial(e)) || [];
    message.parts = object.parts?.map((e) => Part.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserProfile(): UserProfile {
  return { user: undefined, introduction: "", areas: [], favorite: undefined, createdAt: undefined, badges: [] };
}

export const UserProfile = {
  encode(message: UserProfile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    if (message.introduction !== "") {
      writer.uint32(18).string(message.introduction);
    }
    for (const v of message.areas) {
      Area.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.favorite !== undefined) {
      UserFavorite.encode(message.favorite, writer.uint32(34).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.badges) {
      UserRatingBadge.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserProfile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.introduction = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.areas.push(Area.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.favorite = UserFavorite.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.badges.push(UserRatingBadge.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      introduction: isSet(object.introduction) ? globalThis.String(object.introduction) : "",
      areas: globalThis.Array.isArray(object?.areas) ? object.areas.map((e: any) => Area.fromJSON(e)) : [],
      favorite: isSet(object.favorite) ? UserFavorite.fromJSON(object.favorite) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      badges: globalThis.Array.isArray(object?.badges)
        ? object.badges.map((e: any) => UserRatingBadge.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UserProfile): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.introduction !== "") {
      obj.introduction = message.introduction;
    }
    if (message.areas?.length) {
      obj.areas = message.areas.map((e) => Area.toJSON(e));
    }
    if (message.favorite !== undefined) {
      obj.favorite = UserFavorite.toJSON(message.favorite);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.badges?.length) {
      obj.badges = message.badges.map((e) => UserRatingBadge.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile>, I>>(base?: I): UserProfile {
    return UserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile>, I>>(object: I): UserProfile {
    const message = createBaseUserProfile();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.introduction = object.introduction ?? "";
    message.areas = object.areas?.map((e) => Area.fromPartial(e)) || [];
    message.favorite = (object.favorite !== undefined && object.favorite !== null)
      ? UserFavorite.fromPartial(object.favorite)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.badges = object.badges?.map((e) => UserRatingBadge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMyProfile(): MyProfile {
  return { profile: undefined, email: "" };
}

export const MyProfile = {
  encode(message: MyProfile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.profile !== undefined) {
      UserProfile.encode(message.profile, writer.uint32(10).fork()).ldelim();
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MyProfile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMyProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profile = UserProfile.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MyProfile {
    return {
      profile: isSet(object.profile) ? UserProfile.fromJSON(object.profile) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: MyProfile): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = UserProfile.toJSON(message.profile);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MyProfile>, I>>(base?: I): MyProfile {
    return MyProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MyProfile>, I>>(object: I): MyProfile {
    const message = createBaseMyProfile();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? UserProfile.fromPartial(object.profile)
      : undefined;
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseUserRatingBadge(): UserRatingBadge {
  return { id: 0, name: "", color: "" };
}

export const UserRatingBadge = {
  encode(message: UserRatingBadge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserRatingBadge {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRatingBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRatingBadge {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
    };
  },

  toJSON(message: UserRatingBadge): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRatingBadge>, I>>(base?: I): UserRatingBadge {
    return UserRatingBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRatingBadge>, I>>(object: I): UserRatingBadge {
    const message = createBaseUserRatingBadge();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.color = object.color ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

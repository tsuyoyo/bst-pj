// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/communication.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { User } from "./user";

export const protobufPackage = "bst.v1";

export interface Comment {
  id: number;
  content: string;
  userId: number;
  threadId: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  mentions: Mention[];
}

export interface Thread {
  id: number;
  title: string;
  description: string;
  createdBy: User | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Mention {
  type: Mention_MentionType;
  /** text to show in the comment */
  text: string;
  /** Only for MENTION_TYPE_USER */
  userId: number;
  /** Only for MENTION_TYPE_ALL_SESSION_PARTICIPANTS */
  sessionId: number;
  /** Only for MENTION_TYPE_ALL_THREAD_PARTICIPANTS */
  threadId: number;
}

export enum Mention_MentionType {
  MENTION_TYPE_UNSPECIFIED = 0,
  MENTION_TYPE_USER = 1,
  MENTION_TYPE_ALL_SESSION_PARTICIPANTS = 2,
  MENTION_TYPE_ALL_THREAD_PARTICIPANTS = 3,
  UNRECOGNIZED = -1,
}

export function mention_MentionTypeFromJSON(object: any): Mention_MentionType {
  switch (object) {
    case 0:
    case "MENTION_TYPE_UNSPECIFIED":
      return Mention_MentionType.MENTION_TYPE_UNSPECIFIED;
    case 1:
    case "MENTION_TYPE_USER":
      return Mention_MentionType.MENTION_TYPE_USER;
    case 2:
    case "MENTION_TYPE_ALL_SESSION_PARTICIPANTS":
      return Mention_MentionType.MENTION_TYPE_ALL_SESSION_PARTICIPANTS;
    case 3:
    case "MENTION_TYPE_ALL_THREAD_PARTICIPANTS":
      return Mention_MentionType.MENTION_TYPE_ALL_THREAD_PARTICIPANTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Mention_MentionType.UNRECOGNIZED;
  }
}

export function mention_MentionTypeToJSON(object: Mention_MentionType): string {
  switch (object) {
    case Mention_MentionType.MENTION_TYPE_UNSPECIFIED:
      return "MENTION_TYPE_UNSPECIFIED";
    case Mention_MentionType.MENTION_TYPE_USER:
      return "MENTION_TYPE_USER";
    case Mention_MentionType.MENTION_TYPE_ALL_SESSION_PARTICIPANTS:
      return "MENTION_TYPE_ALL_SESSION_PARTICIPANTS";
    case Mention_MentionType.MENTION_TYPE_ALL_THREAD_PARTICIPANTS:
      return "MENTION_TYPE_ALL_THREAD_PARTICIPANTS";
    case Mention_MentionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ReactionType {
  id: number;
  name: string;
  description: string;
  iconUrl: string;
  updatedUserId: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Reaction {
  id: number;
  user: User | undefined;
  reactionTypeId: number;
  updatedUserId: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

function createBaseComment(): Comment {
  return { id: 0, content: "", userId: 0, threadId: 0, createdAt: undefined, updatedAt: undefined, mentions: [] };
}

export const Comment = {
  encode(message: Comment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.threadId !== 0) {
      writer.uint32(32).int32(message.threadId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.mentions) {
      Mention.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Comment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.threadId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.mentions.push(Mention.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      threadId: isSet(object.threadId) ? globalThis.Number(object.threadId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      mentions: globalThis.Array.isArray(object?.mentions) ? object.mentions.map((e: any) => Mention.fromJSON(e)) : [],
    };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.threadId !== 0) {
      obj.threadId = Math.round(message.threadId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.mentions?.length) {
      obj.mentions = message.mentions.map((e) => Mention.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Comment>, I>>(base?: I): Comment {
    return Comment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Comment>, I>>(object: I): Comment {
    const message = createBaseComment();
    message.id = object.id ?? 0;
    message.content = object.content ?? "";
    message.userId = object.userId ?? 0;
    message.threadId = object.threadId ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.mentions = object.mentions?.map((e) => Mention.fromPartial(e)) || [];
    return message;
  },
};

function createBaseThread(): Thread {
  return { id: 0, title: "", description: "", createdBy: undefined, createdAt: undefined, updatedAt: undefined };
}

export const Thread = {
  encode(message: Thread, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdBy !== undefined) {
      User.encode(message.createdBy, writer.uint32(34).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Thread {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThread();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdBy = User.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Thread {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdBy: isSet(object.createdBy) ? User.fromJSON(object.createdBy) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Thread): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = User.toJSON(message.createdBy);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Thread>, I>>(base?: I): Thread {
    return Thread.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Thread>, I>>(object: I): Thread {
    const message = createBaseThread();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.createdBy = (object.createdBy !== undefined && object.createdBy !== null)
      ? User.fromPartial(object.createdBy)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseMention(): Mention {
  return { type: 0, text: "", userId: 0, sessionId: 0, threadId: 0 };
}

export const Mention = {
  encode(message: Mention, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.sessionId !== 0) {
      writer.uint32(32).int32(message.sessionId);
    }
    if (message.threadId !== 0) {
      writer.uint32(40).int32(message.threadId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Mention {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMention();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.sessionId = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.threadId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mention {
    return {
      type: isSet(object.type) ? mention_MentionTypeFromJSON(object.type) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      sessionId: isSet(object.sessionId) ? globalThis.Number(object.sessionId) : 0,
      threadId: isSet(object.threadId) ? globalThis.Number(object.threadId) : 0,
    };
  },

  toJSON(message: Mention): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = mention_MentionTypeToJSON(message.type);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.sessionId !== 0) {
      obj.sessionId = Math.round(message.sessionId);
    }
    if (message.threadId !== 0) {
      obj.threadId = Math.round(message.threadId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mention>, I>>(base?: I): Mention {
    return Mention.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mention>, I>>(object: I): Mention {
    const message = createBaseMention();
    message.type = object.type ?? 0;
    message.text = object.text ?? "";
    message.userId = object.userId ?? 0;
    message.sessionId = object.sessionId ?? 0;
    message.threadId = object.threadId ?? 0;
    return message;
  },
};

function createBaseReactionType(): ReactionType {
  return {
    id: 0,
    name: "",
    description: "",
    iconUrl: "",
    updatedUserId: 0,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const ReactionType = {
  encode(message: ReactionType, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.iconUrl !== "") {
      writer.uint32(34).string(message.iconUrl);
    }
    if (message.updatedUserId !== 0) {
      writer.uint32(40).int32(message.updatedUserId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactionType {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactionType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.updatedUserId = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactionType {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : "",
      updatedUserId: isSet(object.updatedUserId) ? globalThis.Number(object.updatedUserId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: ReactionType): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.iconUrl !== "") {
      obj.iconUrl = message.iconUrl;
    }
    if (message.updatedUserId !== 0) {
      obj.updatedUserId = Math.round(message.updatedUserId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactionType>, I>>(base?: I): ReactionType {
    return ReactionType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactionType>, I>>(object: I): ReactionType {
    const message = createBaseReactionType();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.iconUrl = object.iconUrl ?? "";
    message.updatedUserId = object.updatedUserId ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseReaction(): Reaction {
  return { id: 0, user: undefined, reactionTypeId: 0, updatedUserId: 0, createdAt: undefined, updatedAt: undefined };
}

export const Reaction = {
  encode(message: Reaction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).ldelim();
    }
    if (message.reactionTypeId !== 0) {
      writer.uint32(24).int32(message.reactionTypeId);
    }
    if (message.updatedUserId !== 0) {
      writer.uint32(32).int32(message.updatedUserId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Reaction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reactionTypeId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.updatedUserId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reaction {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      reactionTypeId: isSet(object.reactionTypeId) ? globalThis.Number(object.reactionTypeId) : 0,
      updatedUserId: isSet(object.updatedUserId) ? globalThis.Number(object.updatedUserId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Reaction): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.reactionTypeId !== 0) {
      obj.reactionTypeId = Math.round(message.reactionTypeId);
    }
    if (message.updatedUserId !== 0) {
      obj.updatedUserId = Math.round(message.updatedUserId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reaction>, I>>(base?: I): Reaction {
    return Reaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reaction>, I>>(object: I): Reaction {
    const message = createBaseReaction();
    message.id = object.id ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.reactionTypeId = object.reactionTypeId ?? 0;
    message.updatedUserId = object.updatedUserId ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

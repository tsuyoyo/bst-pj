// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/studio_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Area } from "./area";
import { Studio } from "./location";

export const protobufPackage = "bst.v1";

export interface CreateStudioRequest {
  name: string;
  description: string;
  googleMapsUrl: string;
  additionalInfo: string;
  prefectureId: number;
}

export interface CreateStudioResponse {
  studio: Studio | undefined;
}

export interface ListStudiosRequest {
  pageSize: number;
  pageToken: number;
  area: Area | undefined;
}

export interface ListStudiosResponse {
  studios: Studio[];
  nextPageToken: string;
  totalSize: number;
}

export interface GetStudioRequest {
  studioId: number;
}

export interface GetStudioResponse {
  studio: Studio | undefined;
}

export interface UpdateStudioRequest {
  studioId: number;
  name?: string | undefined;
  description?: string | undefined;
  googleMapsUrl?: string | undefined;
  additionalInfo?: string | undefined;
  prefectureId?: number | undefined;
}

export interface UpdateStudioResponse {
  studio: Studio | undefined;
}

export interface DeleteStudioRequest {
  studioId: number;
}

export interface DeleteStudioResponse {
  success: boolean;
}

function createBaseCreateStudioRequest(): CreateStudioRequest {
  return { name: "", description: "", googleMapsUrl: "", additionalInfo: "", prefectureId: 0 };
}

export const CreateStudioRequest = {
  encode(message: CreateStudioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.googleMapsUrl !== "") {
      writer.uint32(26).string(message.googleMapsUrl);
    }
    if (message.additionalInfo !== "") {
      writer.uint32(34).string(message.additionalInfo);
    }
    if (message.prefectureId !== 0) {
      writer.uint32(40).int32(message.prefectureId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateStudioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.googleMapsUrl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.additionalInfo = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.prefectureId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStudioRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      googleMapsUrl: isSet(object.googleMapsUrl) ? globalThis.String(object.googleMapsUrl) : "",
      additionalInfo: isSet(object.additionalInfo) ? globalThis.String(object.additionalInfo) : "",
      prefectureId: isSet(object.prefectureId) ? globalThis.Number(object.prefectureId) : 0,
    };
  },

  toJSON(message: CreateStudioRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.googleMapsUrl !== "") {
      obj.googleMapsUrl = message.googleMapsUrl;
    }
    if (message.additionalInfo !== "") {
      obj.additionalInfo = message.additionalInfo;
    }
    if (message.prefectureId !== 0) {
      obj.prefectureId = Math.round(message.prefectureId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateStudioRequest>, I>>(base?: I): CreateStudioRequest {
    return CreateStudioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateStudioRequest>, I>>(object: I): CreateStudioRequest {
    const message = createBaseCreateStudioRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.googleMapsUrl = object.googleMapsUrl ?? "";
    message.additionalInfo = object.additionalInfo ?? "";
    message.prefectureId = object.prefectureId ?? 0;
    return message;
  },
};

function createBaseCreateStudioResponse(): CreateStudioResponse {
  return { studio: undefined };
}

export const CreateStudioResponse = {
  encode(message: CreateStudioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.studio !== undefined) {
      Studio.encode(message.studio, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateStudioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studio = Studio.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStudioResponse {
    return { studio: isSet(object.studio) ? Studio.fromJSON(object.studio) : undefined };
  },

  toJSON(message: CreateStudioResponse): unknown {
    const obj: any = {};
    if (message.studio !== undefined) {
      obj.studio = Studio.toJSON(message.studio);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateStudioResponse>, I>>(base?: I): CreateStudioResponse {
    return CreateStudioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateStudioResponse>, I>>(object: I): CreateStudioResponse {
    const message = createBaseCreateStudioResponse();
    message.studio = (object.studio !== undefined && object.studio !== null)
      ? Studio.fromPartial(object.studio)
      : undefined;
    return message;
  },
};

function createBaseListStudiosRequest(): ListStudiosRequest {
  return { pageSize: 0, pageToken: 0, area: undefined };
}

export const ListStudiosRequest = {
  encode(message: ListStudiosRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== 0) {
      writer.uint32(16).int32(message.pageToken);
    }
    if (message.area !== undefined) {
      Area.encode(message.area, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListStudiosRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudiosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageToken = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.area = Area.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudiosRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.Number(object.pageToken) : 0,
      area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
    };
  },

  toJSON(message: ListStudiosRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== 0) {
      obj.pageToken = Math.round(message.pageToken);
    }
    if (message.area !== undefined) {
      obj.area = Area.toJSON(message.area);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStudiosRequest>, I>>(base?: I): ListStudiosRequest {
    return ListStudiosRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStudiosRequest>, I>>(object: I): ListStudiosRequest {
    const message = createBaseListStudiosRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? 0;
    message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
    return message;
  },
};

function createBaseListStudiosResponse(): ListStudiosResponse {
  return { studios: [], nextPageToken: "", totalSize: 0 };
}

export const ListStudiosResponse = {
  encode(message: ListStudiosResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.studios) {
      Studio.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListStudiosResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudiosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studios.push(Studio.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudiosResponse {
    return {
      studios: globalThis.Array.isArray(object?.studios) ? object.studios.map((e: any) => Studio.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListStudiosResponse): unknown {
    const obj: any = {};
    if (message.studios?.length) {
      obj.studios = message.studios.map((e) => Studio.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStudiosResponse>, I>>(base?: I): ListStudiosResponse {
    return ListStudiosResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStudiosResponse>, I>>(object: I): ListStudiosResponse {
    const message = createBaseListStudiosResponse();
    message.studios = object.studios?.map((e) => Studio.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGetStudioRequest(): GetStudioRequest {
  return { studioId: 0 };
}

export const GetStudioRequest = {
  encode(message: GetStudioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.studioId !== 0) {
      writer.uint32(8).int32(message.studioId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetStudioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.studioId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudioRequest {
    return { studioId: isSet(object.studioId) ? globalThis.Number(object.studioId) : 0 };
  },

  toJSON(message: GetStudioRequest): unknown {
    const obj: any = {};
    if (message.studioId !== 0) {
      obj.studioId = Math.round(message.studioId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudioRequest>, I>>(base?: I): GetStudioRequest {
    return GetStudioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudioRequest>, I>>(object: I): GetStudioRequest {
    const message = createBaseGetStudioRequest();
    message.studioId = object.studioId ?? 0;
    return message;
  },
};

function createBaseGetStudioResponse(): GetStudioResponse {
  return { studio: undefined };
}

export const GetStudioResponse = {
  encode(message: GetStudioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.studio !== undefined) {
      Studio.encode(message.studio, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetStudioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studio = Studio.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudioResponse {
    return { studio: isSet(object.studio) ? Studio.fromJSON(object.studio) : undefined };
  },

  toJSON(message: GetStudioResponse): unknown {
    const obj: any = {};
    if (message.studio !== undefined) {
      obj.studio = Studio.toJSON(message.studio);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudioResponse>, I>>(base?: I): GetStudioResponse {
    return GetStudioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudioResponse>, I>>(object: I): GetStudioResponse {
    const message = createBaseGetStudioResponse();
    message.studio = (object.studio !== undefined && object.studio !== null)
      ? Studio.fromPartial(object.studio)
      : undefined;
    return message;
  },
};

function createBaseUpdateStudioRequest(): UpdateStudioRequest {
  return {
    studioId: 0,
    name: undefined,
    description: undefined,
    googleMapsUrl: undefined,
    additionalInfo: undefined,
    prefectureId: undefined,
  };
}

export const UpdateStudioRequest = {
  encode(message: UpdateStudioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.studioId !== 0) {
      writer.uint32(8).int32(message.studioId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.googleMapsUrl !== undefined) {
      writer.uint32(34).string(message.googleMapsUrl);
    }
    if (message.additionalInfo !== undefined) {
      writer.uint32(42).string(message.additionalInfo);
    }
    if (message.prefectureId !== undefined) {
      writer.uint32(48).int32(message.prefectureId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStudioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.studioId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.googleMapsUrl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.additionalInfo = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.prefectureId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStudioRequest {
    return {
      studioId: isSet(object.studioId) ? globalThis.Number(object.studioId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      googleMapsUrl: isSet(object.googleMapsUrl) ? globalThis.String(object.googleMapsUrl) : undefined,
      additionalInfo: isSet(object.additionalInfo) ? globalThis.String(object.additionalInfo) : undefined,
      prefectureId: isSet(object.prefectureId) ? globalThis.Number(object.prefectureId) : undefined,
    };
  },

  toJSON(message: UpdateStudioRequest): unknown {
    const obj: any = {};
    if (message.studioId !== 0) {
      obj.studioId = Math.round(message.studioId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.googleMapsUrl !== undefined) {
      obj.googleMapsUrl = message.googleMapsUrl;
    }
    if (message.additionalInfo !== undefined) {
      obj.additionalInfo = message.additionalInfo;
    }
    if (message.prefectureId !== undefined) {
      obj.prefectureId = Math.round(message.prefectureId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStudioRequest>, I>>(base?: I): UpdateStudioRequest {
    return UpdateStudioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStudioRequest>, I>>(object: I): UpdateStudioRequest {
    const message = createBaseUpdateStudioRequest();
    message.studioId = object.studioId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.googleMapsUrl = object.googleMapsUrl ?? undefined;
    message.additionalInfo = object.additionalInfo ?? undefined;
    message.prefectureId = object.prefectureId ?? undefined;
    return message;
  },
};

function createBaseUpdateStudioResponse(): UpdateStudioResponse {
  return { studio: undefined };
}

export const UpdateStudioResponse = {
  encode(message: UpdateStudioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.studio !== undefined) {
      Studio.encode(message.studio, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStudioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studio = Studio.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStudioResponse {
    return { studio: isSet(object.studio) ? Studio.fromJSON(object.studio) : undefined };
  },

  toJSON(message: UpdateStudioResponse): unknown {
    const obj: any = {};
    if (message.studio !== undefined) {
      obj.studio = Studio.toJSON(message.studio);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStudioResponse>, I>>(base?: I): UpdateStudioResponse {
    return UpdateStudioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStudioResponse>, I>>(object: I): UpdateStudioResponse {
    const message = createBaseUpdateStudioResponse();
    message.studio = (object.studio !== undefined && object.studio !== null)
      ? Studio.fromPartial(object.studio)
      : undefined;
    return message;
  },
};

function createBaseDeleteStudioRequest(): DeleteStudioRequest {
  return { studioId: 0 };
}

export const DeleteStudioRequest = {
  encode(message: DeleteStudioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.studioId !== 0) {
      writer.uint32(8).int32(message.studioId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteStudioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.studioId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteStudioRequest {
    return { studioId: isSet(object.studioId) ? globalThis.Number(object.studioId) : 0 };
  },

  toJSON(message: DeleteStudioRequest): unknown {
    const obj: any = {};
    if (message.studioId !== 0) {
      obj.studioId = Math.round(message.studioId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteStudioRequest>, I>>(base?: I): DeleteStudioRequest {
    return DeleteStudioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteStudioRequest>, I>>(object: I): DeleteStudioRequest {
    const message = createBaseDeleteStudioRequest();
    message.studioId = object.studioId ?? 0;
    return message;
  },
};

function createBaseDeleteStudioResponse(): DeleteStudioResponse {
  return { success: false };
}

export const DeleteStudioResponse = {
  encode(message: DeleteStudioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteStudioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteStudioResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteStudioResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteStudioResponse>, I>>(base?: I): DeleteStudioResponse {
    return DeleteStudioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteStudioResponse>, I>>(object: I): DeleteStudioResponse {
    const message = createBaseDeleteStudioResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface StudioService {
  /** POST /studios */
  CreateStudio(request: CreateStudioRequest): Promise<CreateStudioResponse>;
  /** GET /studios */
  ListStudios(request: ListStudiosRequest): Promise<ListStudiosResponse>;
  /** GET /studios/{id} */
  GetStudio(request: GetStudioRequest): Promise<GetStudioResponse>;
  /** PUT /studios/{id} */
  UpdateStudio(request: UpdateStudioRequest): Promise<UpdateStudioResponse>;
  /** DELETE /studios/{id} */
  DeleteStudio(request: DeleteStudioRequest): Promise<DeleteStudioResponse>;
}

export const StudioServiceServiceName = "bst.v1.StudioService";
export class StudioServiceClientImpl implements StudioService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || StudioServiceServiceName;
    this.rpc = rpc;
    this.CreateStudio = this.CreateStudio.bind(this);
    this.ListStudios = this.ListStudios.bind(this);
    this.GetStudio = this.GetStudio.bind(this);
    this.UpdateStudio = this.UpdateStudio.bind(this);
    this.DeleteStudio = this.DeleteStudio.bind(this);
  }
  CreateStudio(request: CreateStudioRequest): Promise<CreateStudioResponse> {
    const data = CreateStudioRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateStudio", data);
    return promise.then((data) => CreateStudioResponse.decode(_m0.Reader.create(data)));
  }

  ListStudios(request: ListStudiosRequest): Promise<ListStudiosResponse> {
    const data = ListStudiosRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListStudios", data);
    return promise.then((data) => ListStudiosResponse.decode(_m0.Reader.create(data)));
  }

  GetStudio(request: GetStudioRequest): Promise<GetStudioResponse> {
    const data = GetStudioRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStudio", data);
    return promise.then((data) => GetStudioResponse.decode(_m0.Reader.create(data)));
  }

  UpdateStudio(request: UpdateStudioRequest): Promise<UpdateStudioResponse> {
    const data = UpdateStudioRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateStudio", data);
    return promise.then((data) => UpdateStudioResponse.decode(_m0.Reader.create(data)));
  }

  DeleteStudio(request: DeleteStudioRequest): Promise<DeleteStudioResponse> {
    const data = DeleteStudioRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteStudio", data);
    return promise.then((data) => DeleteStudioResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

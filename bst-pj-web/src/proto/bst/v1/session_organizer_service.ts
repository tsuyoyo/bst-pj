// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session_organizer_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { SessionParticipant } from "./session";

export const protobufPackage = "bst.v1";

export interface ListSessionOrganizersRequest {
}

export interface ListSessionOrganizersResponse {
  organizers: SessionParticipant[];
}

export interface AddSessionOrganizerRequest {
  userId: number;
}

export interface AddSessionOrganizerResponse {
  organizer: SessionParticipant | undefined;
}

export interface DeleteSessionOrganizerRequest {
  userId: number;
}

export interface DeleteSessionOrganizerResponse {
  success: boolean;
}

function createBaseListSessionOrganizersRequest(): ListSessionOrganizersRequest {
  return {};
}

export const ListSessionOrganizersRequest = {
  encode(_: ListSessionOrganizersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionOrganizersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionOrganizersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListSessionOrganizersRequest {
    return {};
  },

  toJSON(_: ListSessionOrganizersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionOrganizersRequest>, I>>(base?: I): ListSessionOrganizersRequest {
    return ListSessionOrganizersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionOrganizersRequest>, I>>(_: I): ListSessionOrganizersRequest {
    const message = createBaseListSessionOrganizersRequest();
    return message;
  },
};

function createBaseListSessionOrganizersResponse(): ListSessionOrganizersResponse {
  return { organizers: [] };
}

export const ListSessionOrganizersResponse = {
  encode(message: ListSessionOrganizersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.organizers) {
      SessionParticipant.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionOrganizersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionOrganizersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizers.push(SessionParticipant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionOrganizersResponse {
    return {
      organizers: globalThis.Array.isArray(object?.organizers)
        ? object.organizers.map((e: any) => SessionParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSessionOrganizersResponse): unknown {
    const obj: any = {};
    if (message.organizers?.length) {
      obj.organizers = message.organizers.map((e) => SessionParticipant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionOrganizersResponse>, I>>(base?: I): ListSessionOrganizersResponse {
    return ListSessionOrganizersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionOrganizersResponse>, I>>(
    object: I,
  ): ListSessionOrganizersResponse {
    const message = createBaseListSessionOrganizersResponse();
    message.organizers = object.organizers?.map((e) => SessionParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSessionOrganizerRequest(): AddSessionOrganizerRequest {
  return { userId: 0 };
}

export const AddSessionOrganizerRequest = {
  encode(message: AddSessionOrganizerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionOrganizerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionOrganizerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionOrganizerRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: AddSessionOrganizerRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionOrganizerRequest>, I>>(base?: I): AddSessionOrganizerRequest {
    return AddSessionOrganizerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionOrganizerRequest>, I>>(object: I): AddSessionOrganizerRequest {
    const message = createBaseAddSessionOrganizerRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseAddSessionOrganizerResponse(): AddSessionOrganizerResponse {
  return { organizer: undefined };
}

export const AddSessionOrganizerResponse = {
  encode(message: AddSessionOrganizerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.organizer !== undefined) {
      SessionParticipant.encode(message.organizer, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionOrganizerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionOrganizerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizer = SessionParticipant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionOrganizerResponse {
    return { organizer: isSet(object.organizer) ? SessionParticipant.fromJSON(object.organizer) : undefined };
  },

  toJSON(message: AddSessionOrganizerResponse): unknown {
    const obj: any = {};
    if (message.organizer !== undefined) {
      obj.organizer = SessionParticipant.toJSON(message.organizer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionOrganizerResponse>, I>>(base?: I): AddSessionOrganizerResponse {
    return AddSessionOrganizerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionOrganizerResponse>, I>>(object: I): AddSessionOrganizerResponse {
    const message = createBaseAddSessionOrganizerResponse();
    message.organizer = (object.organizer !== undefined && object.organizer !== null)
      ? SessionParticipant.fromPartial(object.organizer)
      : undefined;
    return message;
  },
};

function createBaseDeleteSessionOrganizerRequest(): DeleteSessionOrganizerRequest {
  return { userId: 0 };
}

export const DeleteSessionOrganizerRequest = {
  encode(message: DeleteSessionOrganizerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionOrganizerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionOrganizerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionOrganizerRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: DeleteSessionOrganizerRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionOrganizerRequest>, I>>(base?: I): DeleteSessionOrganizerRequest {
    return DeleteSessionOrganizerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionOrganizerRequest>, I>>(
    object: I,
  ): DeleteSessionOrganizerRequest {
    const message = createBaseDeleteSessionOrganizerRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseDeleteSessionOrganizerResponse(): DeleteSessionOrganizerResponse {
  return { success: false };
}

export const DeleteSessionOrganizerResponse = {
  encode(message: DeleteSessionOrganizerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSessionOrganizerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionOrganizerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionOrganizerResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteSessionOrganizerResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSessionOrganizerResponse>, I>>(base?: I): DeleteSessionOrganizerResponse {
    return DeleteSessionOrganizerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSessionOrganizerResponse>, I>>(
    object: I,
  ): DeleteSessionOrganizerResponse {
    const message = createBaseDeleteSessionOrganizerResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface SessionOrganizerService {
  /** GET /sessions/{id}/organizers */
  ListSessionOrganizers(request: ListSessionOrganizersRequest): Promise<ListSessionOrganizersResponse>;
  /** POST /sessions/{id}/organizers */
  AddSessionOrganizer(request: AddSessionOrganizerRequest): Promise<AddSessionOrganizerResponse>;
  /** DELETE /sessions/{id}/organizers/ */
  DeleteSessionOrganizer(request: DeleteSessionOrganizerRequest): Promise<DeleteSessionOrganizerResponse>;
}

export const SessionOrganizerServiceServiceName = "bst.v1.SessionOrganizerService";
export class SessionOrganizerServiceClientImpl implements SessionOrganizerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionOrganizerServiceServiceName;
    this.rpc = rpc;
    this.ListSessionOrganizers = this.ListSessionOrganizers.bind(this);
    this.AddSessionOrganizer = this.AddSessionOrganizer.bind(this);
    this.DeleteSessionOrganizer = this.DeleteSessionOrganizer.bind(this);
  }
  ListSessionOrganizers(request: ListSessionOrganizersRequest): Promise<ListSessionOrganizersResponse> {
    const data = ListSessionOrganizersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSessionOrganizers", data);
    return promise.then((data) => ListSessionOrganizersResponse.decode(_m0.Reader.create(data)));
  }

  AddSessionOrganizer(request: AddSessionOrganizerRequest): Promise<AddSessionOrganizerResponse> {
    const data = AddSessionOrganizerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSessionOrganizer", data);
    return promise.then((data) => AddSessionOrganizerResponse.decode(_m0.Reader.create(data)));
  }

  DeleteSessionOrganizer(request: DeleteSessionOrganizerRequest): Promise<DeleteSessionOrganizerResponse> {
    const data = DeleteSessionOrganizerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteSessionOrganizer", data);
    return promise.then((data) => DeleteSessionOrganizerResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

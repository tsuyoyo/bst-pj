// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/session_feedback_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { SessionFeedback } from "./session";

export const protobufPackage = "bst.v1";

export interface AddSessionFeedbackRequest {
  feedback: SessionFeedback | undefined;
}

export interface AddSessionFeedbackResponse {
  success: boolean;
}

export interface ListSessionFeedbacksRequest {
  sessionId: number;
}

export interface ListSessionFeedbacksResponse {
  feedbacks: SessionFeedback[];
}

function createBaseAddSessionFeedbackRequest(): AddSessionFeedbackRequest {
  return { feedback: undefined };
}

export const AddSessionFeedbackRequest = {
  encode(message: AddSessionFeedbackRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedback !== undefined) {
      SessionFeedback.encode(message.feedback, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionFeedbackRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionFeedbackRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.feedback = SessionFeedback.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionFeedbackRequest {
    return { feedback: isSet(object.feedback) ? SessionFeedback.fromJSON(object.feedback) : undefined };
  },

  toJSON(message: AddSessionFeedbackRequest): unknown {
    const obj: any = {};
    if (message.feedback !== undefined) {
      obj.feedback = SessionFeedback.toJSON(message.feedback);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionFeedbackRequest>, I>>(base?: I): AddSessionFeedbackRequest {
    return AddSessionFeedbackRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionFeedbackRequest>, I>>(object: I): AddSessionFeedbackRequest {
    const message = createBaseAddSessionFeedbackRequest();
    message.feedback = (object.feedback !== undefined && object.feedback !== null)
      ? SessionFeedback.fromPartial(object.feedback)
      : undefined;
    return message;
  },
};

function createBaseAddSessionFeedbackResponse(): AddSessionFeedbackResponse {
  return { success: false };
}

export const AddSessionFeedbackResponse = {
  encode(message: AddSessionFeedbackResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSessionFeedbackResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSessionFeedbackResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSessionFeedbackResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: AddSessionFeedbackResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSessionFeedbackResponse>, I>>(base?: I): AddSessionFeedbackResponse {
    return AddSessionFeedbackResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSessionFeedbackResponse>, I>>(object: I): AddSessionFeedbackResponse {
    const message = createBaseAddSessionFeedbackResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListSessionFeedbacksRequest(): ListSessionFeedbacksRequest {
  return { sessionId: 0 };
}

export const ListSessionFeedbacksRequest = {
  encode(message: ListSessionFeedbacksRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionId !== 0) {
      writer.uint32(8).int32(message.sessionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionFeedbacksRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionFeedbacksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sessionId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionFeedbacksRequest {
    return { sessionId: isSet(object.sessionId) ? globalThis.Number(object.sessionId) : 0 };
  },

  toJSON(message: ListSessionFeedbacksRequest): unknown {
    const obj: any = {};
    if (message.sessionId !== 0) {
      obj.sessionId = Math.round(message.sessionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionFeedbacksRequest>, I>>(base?: I): ListSessionFeedbacksRequest {
    return ListSessionFeedbacksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionFeedbacksRequest>, I>>(object: I): ListSessionFeedbacksRequest {
    const message = createBaseListSessionFeedbacksRequest();
    message.sessionId = object.sessionId ?? 0;
    return message;
  },
};

function createBaseListSessionFeedbacksResponse(): ListSessionFeedbacksResponse {
  return { feedbacks: [] };
}

export const ListSessionFeedbacksResponse = {
  encode(message: ListSessionFeedbacksResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.feedbacks) {
      SessionFeedback.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSessionFeedbacksResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionFeedbacksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.feedbacks.push(SessionFeedback.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionFeedbacksResponse {
    return {
      feedbacks: globalThis.Array.isArray(object?.feedbacks)
        ? object.feedbacks.map((e: any) => SessionFeedback.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSessionFeedbacksResponse): unknown {
    const obj: any = {};
    if (message.feedbacks?.length) {
      obj.feedbacks = message.feedbacks.map((e) => SessionFeedback.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSessionFeedbacksResponse>, I>>(base?: I): ListSessionFeedbacksResponse {
    return ListSessionFeedbacksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSessionFeedbacksResponse>, I>>(object: I): ListSessionFeedbacksResponse {
    const message = createBaseListSessionFeedbacksResponse();
    message.feedbacks = object.feedbacks?.map((e) => SessionFeedback.fromPartial(e)) || [];
    return message;
  },
};

export interface SessionFeedbackService {
  /** POST /sessions/{id}/feedbacks */
  AddSessionFeedback(request: AddSessionFeedbackRequest): Promise<AddSessionFeedbackResponse>;
  /** GET /sessions/{id}/ratings */
  ListSessionFeedbacks(request: ListSessionFeedbacksRequest): Promise<ListSessionFeedbacksResponse>;
}

export const SessionFeedbackServiceServiceName = "bst.v1.SessionFeedbackService";
export class SessionFeedbackServiceClientImpl implements SessionFeedbackService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionFeedbackServiceServiceName;
    this.rpc = rpc;
    this.AddSessionFeedback = this.AddSessionFeedback.bind(this);
    this.ListSessionFeedbacks = this.ListSessionFeedbacks.bind(this);
  }
  AddSessionFeedback(request: AddSessionFeedbackRequest): Promise<AddSessionFeedbackResponse> {
    const data = AddSessionFeedbackRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSessionFeedback", data);
    return promise.then((data) => AddSessionFeedbackResponse.decode(_m0.Reader.create(data)));
  }

  ListSessionFeedbacks(request: ListSessionFeedbacksRequest): Promise<ListSessionFeedbacksResponse> {
    const data = ListSessionFeedbacksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSessionFeedbacks", data);
    return promise.then((data) => ListSessionFeedbacksResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

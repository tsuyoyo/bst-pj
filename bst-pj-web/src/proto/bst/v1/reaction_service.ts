// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/reaction_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Reaction, ReactionType } from "./communication";

export const protobufPackage = "bst.v1";

/** ReactionType messages */
export interface CreateReactionTypeRequest {
  name: string;
  description: string;
  iconUrl: string;
}

export interface CreateReactionTypeResponse {
  reactionType: ReactionType | undefined;
}

export interface GetReactionTypeRequest {
  reactionTypeId: number;
}

export interface GetReactionTypeResponse {
  reactionType: ReactionType | undefined;
}

export interface ListReactionTypesRequest {
  pageSize: number;
  pageToken: string;
}

export interface ListReactionTypesResponse {
  reactionTypes: ReactionType[];
  nextPageToken: string;
  totalSize: number;
}

export interface UpdateReactionTypeRequest {
  reactionTypeId: number;
  name?: string | undefined;
  description?: string | undefined;
  iconUrl?: string | undefined;
}

export interface UpdateReactionTypeResponse {
  reactionType: ReactionType | undefined;
}

export interface DeleteReactionTypeRequest {
  reactionTypeId: number;
}

export interface DeleteReactionTypeResponse {
  success: boolean;
}

/** Reaction messages */
export interface CreateReactionRequest {
  targetId: number;
  reactionTypeId: number;
}

export interface CreateReactionResponse {
  reaction: Reaction | undefined;
}

export interface GetReactionRequest {
  reactionId: number;
}

export interface GetReactionResponse {
  reaction: Reaction | undefined;
}

export interface ListReactionsRequest {
  pageSize: number;
  pageToken: string;
  targetId: number;
}

export interface ListReactionsResponse {
  reactions: Reaction[];
  nextPageToken: string;
  totalSize: number;
}

export interface UpdateReactionRequest {
  reactionId: number;
  reactionTypeId: number;
}

export interface UpdateReactionResponse {
  reaction: Reaction | undefined;
}

export interface DeleteReactionRequest {
  reactionId: number;
}

export interface DeleteReactionResponse {
  success: boolean;
}

function createBaseCreateReactionTypeRequest(): CreateReactionTypeRequest {
  return { name: "", description: "", iconUrl: "" };
}

export const CreateReactionTypeRequest = {
  encode(message: CreateReactionTypeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.iconUrl !== "") {
      writer.uint32(26).string(message.iconUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateReactionTypeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReactionTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReactionTypeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : "",
    };
  },

  toJSON(message: CreateReactionTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.iconUrl !== "") {
      obj.iconUrl = message.iconUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReactionTypeRequest>, I>>(base?: I): CreateReactionTypeRequest {
    return CreateReactionTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReactionTypeRequest>, I>>(object: I): CreateReactionTypeRequest {
    const message = createBaseCreateReactionTypeRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.iconUrl = object.iconUrl ?? "";
    return message;
  },
};

function createBaseCreateReactionTypeResponse(): CreateReactionTypeResponse {
  return { reactionType: undefined };
}

export const CreateReactionTypeResponse = {
  encode(message: CreateReactionTypeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionType !== undefined) {
      ReactionType.encode(message.reactionType, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateReactionTypeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReactionTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reactionType = ReactionType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReactionTypeResponse {
    return { reactionType: isSet(object.reactionType) ? ReactionType.fromJSON(object.reactionType) : undefined };
  },

  toJSON(message: CreateReactionTypeResponse): unknown {
    const obj: any = {};
    if (message.reactionType !== undefined) {
      obj.reactionType = ReactionType.toJSON(message.reactionType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReactionTypeResponse>, I>>(base?: I): CreateReactionTypeResponse {
    return CreateReactionTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReactionTypeResponse>, I>>(object: I): CreateReactionTypeResponse {
    const message = createBaseCreateReactionTypeResponse();
    message.reactionType = (object.reactionType !== undefined && object.reactionType !== null)
      ? ReactionType.fromPartial(object.reactionType)
      : undefined;
    return message;
  },
};

function createBaseGetReactionTypeRequest(): GetReactionTypeRequest {
  return { reactionTypeId: 0 };
}

export const GetReactionTypeRequest = {
  encode(message: GetReactionTypeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionTypeId !== 0) {
      writer.uint32(8).int32(message.reactionTypeId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetReactionTypeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReactionTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reactionTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReactionTypeRequest {
    return { reactionTypeId: isSet(object.reactionTypeId) ? globalThis.Number(object.reactionTypeId) : 0 };
  },

  toJSON(message: GetReactionTypeRequest): unknown {
    const obj: any = {};
    if (message.reactionTypeId !== 0) {
      obj.reactionTypeId = Math.round(message.reactionTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReactionTypeRequest>, I>>(base?: I): GetReactionTypeRequest {
    return GetReactionTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReactionTypeRequest>, I>>(object: I): GetReactionTypeRequest {
    const message = createBaseGetReactionTypeRequest();
    message.reactionTypeId = object.reactionTypeId ?? 0;
    return message;
  },
};

function createBaseGetReactionTypeResponse(): GetReactionTypeResponse {
  return { reactionType: undefined };
}

export const GetReactionTypeResponse = {
  encode(message: GetReactionTypeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionType !== undefined) {
      ReactionType.encode(message.reactionType, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetReactionTypeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReactionTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reactionType = ReactionType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReactionTypeResponse {
    return { reactionType: isSet(object.reactionType) ? ReactionType.fromJSON(object.reactionType) : undefined };
  },

  toJSON(message: GetReactionTypeResponse): unknown {
    const obj: any = {};
    if (message.reactionType !== undefined) {
      obj.reactionType = ReactionType.toJSON(message.reactionType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReactionTypeResponse>, I>>(base?: I): GetReactionTypeResponse {
    return GetReactionTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReactionTypeResponse>, I>>(object: I): GetReactionTypeResponse {
    const message = createBaseGetReactionTypeResponse();
    message.reactionType = (object.reactionType !== undefined && object.reactionType !== null)
      ? ReactionType.fromPartial(object.reactionType)
      : undefined;
    return message;
  },
};

function createBaseListReactionTypesRequest(): ListReactionTypesRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListReactionTypesRequest = {
  encode(message: ListReactionTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListReactionTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReactionTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReactionTypesRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListReactionTypesRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListReactionTypesRequest>, I>>(base?: I): ListReactionTypesRequest {
    return ListReactionTypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListReactionTypesRequest>, I>>(object: I): ListReactionTypesRequest {
    const message = createBaseListReactionTypesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListReactionTypesResponse(): ListReactionTypesResponse {
  return { reactionTypes: [], nextPageToken: "", totalSize: 0 };
}

export const ListReactionTypesResponse = {
  encode(message: ListReactionTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.reactionTypes) {
      ReactionType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListReactionTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReactionTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reactionTypes.push(ReactionType.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReactionTypesResponse {
    return {
      reactionTypes: globalThis.Array.isArray(object?.reactionTypes)
        ? object.reactionTypes.map((e: any) => ReactionType.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListReactionTypesResponse): unknown {
    const obj: any = {};
    if (message.reactionTypes?.length) {
      obj.reactionTypes = message.reactionTypes.map((e) => ReactionType.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListReactionTypesResponse>, I>>(base?: I): ListReactionTypesResponse {
    return ListReactionTypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListReactionTypesResponse>, I>>(object: I): ListReactionTypesResponse {
    const message = createBaseListReactionTypesResponse();
    message.reactionTypes = object.reactionTypes?.map((e) => ReactionType.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseUpdateReactionTypeRequest(): UpdateReactionTypeRequest {
  return { reactionTypeId: 0, name: undefined, description: undefined, iconUrl: undefined };
}

export const UpdateReactionTypeRequest = {
  encode(message: UpdateReactionTypeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionTypeId !== 0) {
      writer.uint32(8).int32(message.reactionTypeId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.iconUrl !== undefined) {
      writer.uint32(34).string(message.iconUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateReactionTypeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReactionTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reactionTypeId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReactionTypeRequest {
    return {
      reactionTypeId: isSet(object.reactionTypeId) ? globalThis.Number(object.reactionTypeId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
    };
  },

  toJSON(message: UpdateReactionTypeRequest): unknown {
    const obj: any = {};
    if (message.reactionTypeId !== 0) {
      obj.reactionTypeId = Math.round(message.reactionTypeId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.iconUrl !== undefined) {
      obj.iconUrl = message.iconUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReactionTypeRequest>, I>>(base?: I): UpdateReactionTypeRequest {
    return UpdateReactionTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReactionTypeRequest>, I>>(object: I): UpdateReactionTypeRequest {
    const message = createBaseUpdateReactionTypeRequest();
    message.reactionTypeId = object.reactionTypeId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.iconUrl = object.iconUrl ?? undefined;
    return message;
  },
};

function createBaseUpdateReactionTypeResponse(): UpdateReactionTypeResponse {
  return { reactionType: undefined };
}

export const UpdateReactionTypeResponse = {
  encode(message: UpdateReactionTypeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionType !== undefined) {
      ReactionType.encode(message.reactionType, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateReactionTypeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReactionTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reactionType = ReactionType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReactionTypeResponse {
    return { reactionType: isSet(object.reactionType) ? ReactionType.fromJSON(object.reactionType) : undefined };
  },

  toJSON(message: UpdateReactionTypeResponse): unknown {
    const obj: any = {};
    if (message.reactionType !== undefined) {
      obj.reactionType = ReactionType.toJSON(message.reactionType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReactionTypeResponse>, I>>(base?: I): UpdateReactionTypeResponse {
    return UpdateReactionTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReactionTypeResponse>, I>>(object: I): UpdateReactionTypeResponse {
    const message = createBaseUpdateReactionTypeResponse();
    message.reactionType = (object.reactionType !== undefined && object.reactionType !== null)
      ? ReactionType.fromPartial(object.reactionType)
      : undefined;
    return message;
  },
};

function createBaseDeleteReactionTypeRequest(): DeleteReactionTypeRequest {
  return { reactionTypeId: 0 };
}

export const DeleteReactionTypeRequest = {
  encode(message: DeleteReactionTypeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionTypeId !== 0) {
      writer.uint32(8).int32(message.reactionTypeId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteReactionTypeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReactionTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reactionTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReactionTypeRequest {
    return { reactionTypeId: isSet(object.reactionTypeId) ? globalThis.Number(object.reactionTypeId) : 0 };
  },

  toJSON(message: DeleteReactionTypeRequest): unknown {
    const obj: any = {};
    if (message.reactionTypeId !== 0) {
      obj.reactionTypeId = Math.round(message.reactionTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReactionTypeRequest>, I>>(base?: I): DeleteReactionTypeRequest {
    return DeleteReactionTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReactionTypeRequest>, I>>(object: I): DeleteReactionTypeRequest {
    const message = createBaseDeleteReactionTypeRequest();
    message.reactionTypeId = object.reactionTypeId ?? 0;
    return message;
  },
};

function createBaseDeleteReactionTypeResponse(): DeleteReactionTypeResponse {
  return { success: false };
}

export const DeleteReactionTypeResponse = {
  encode(message: DeleteReactionTypeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteReactionTypeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReactionTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReactionTypeResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteReactionTypeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReactionTypeResponse>, I>>(base?: I): DeleteReactionTypeResponse {
    return DeleteReactionTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReactionTypeResponse>, I>>(object: I): DeleteReactionTypeResponse {
    const message = createBaseDeleteReactionTypeResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCreateReactionRequest(): CreateReactionRequest {
  return { targetId: 0, reactionTypeId: 0 };
}

export const CreateReactionRequest = {
  encode(message: CreateReactionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetId !== 0) {
      writer.uint32(8).int32(message.targetId);
    }
    if (message.reactionTypeId !== 0) {
      writer.uint32(16).int32(message.reactionTypeId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateReactionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reactionTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReactionRequest {
    return {
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      reactionTypeId: isSet(object.reactionTypeId) ? globalThis.Number(object.reactionTypeId) : 0,
    };
  },

  toJSON(message: CreateReactionRequest): unknown {
    const obj: any = {};
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.reactionTypeId !== 0) {
      obj.reactionTypeId = Math.round(message.reactionTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReactionRequest>, I>>(base?: I): CreateReactionRequest {
    return CreateReactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReactionRequest>, I>>(object: I): CreateReactionRequest {
    const message = createBaseCreateReactionRequest();
    message.targetId = object.targetId ?? 0;
    message.reactionTypeId = object.reactionTypeId ?? 0;
    return message;
  },
};

function createBaseCreateReactionResponse(): CreateReactionResponse {
  return { reaction: undefined };
}

export const CreateReactionResponse = {
  encode(message: CreateReactionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reaction !== undefined) {
      Reaction.encode(message.reaction, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateReactionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reaction = Reaction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReactionResponse {
    return { reaction: isSet(object.reaction) ? Reaction.fromJSON(object.reaction) : undefined };
  },

  toJSON(message: CreateReactionResponse): unknown {
    const obj: any = {};
    if (message.reaction !== undefined) {
      obj.reaction = Reaction.toJSON(message.reaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReactionResponse>, I>>(base?: I): CreateReactionResponse {
    return CreateReactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReactionResponse>, I>>(object: I): CreateReactionResponse {
    const message = createBaseCreateReactionResponse();
    message.reaction = (object.reaction !== undefined && object.reaction !== null)
      ? Reaction.fromPartial(object.reaction)
      : undefined;
    return message;
  },
};

function createBaseGetReactionRequest(): GetReactionRequest {
  return { reactionId: 0 };
}

export const GetReactionRequest = {
  encode(message: GetReactionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionId !== 0) {
      writer.uint32(8).int32(message.reactionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetReactionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reactionId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReactionRequest {
    return { reactionId: isSet(object.reactionId) ? globalThis.Number(object.reactionId) : 0 };
  },

  toJSON(message: GetReactionRequest): unknown {
    const obj: any = {};
    if (message.reactionId !== 0) {
      obj.reactionId = Math.round(message.reactionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReactionRequest>, I>>(base?: I): GetReactionRequest {
    return GetReactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReactionRequest>, I>>(object: I): GetReactionRequest {
    const message = createBaseGetReactionRequest();
    message.reactionId = object.reactionId ?? 0;
    return message;
  },
};

function createBaseGetReactionResponse(): GetReactionResponse {
  return { reaction: undefined };
}

export const GetReactionResponse = {
  encode(message: GetReactionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reaction !== undefined) {
      Reaction.encode(message.reaction, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetReactionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reaction = Reaction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReactionResponse {
    return { reaction: isSet(object.reaction) ? Reaction.fromJSON(object.reaction) : undefined };
  },

  toJSON(message: GetReactionResponse): unknown {
    const obj: any = {};
    if (message.reaction !== undefined) {
      obj.reaction = Reaction.toJSON(message.reaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReactionResponse>, I>>(base?: I): GetReactionResponse {
    return GetReactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReactionResponse>, I>>(object: I): GetReactionResponse {
    const message = createBaseGetReactionResponse();
    message.reaction = (object.reaction !== undefined && object.reaction !== null)
      ? Reaction.fromPartial(object.reaction)
      : undefined;
    return message;
  },
};

function createBaseListReactionsRequest(): ListReactionsRequest {
  return { pageSize: 0, pageToken: "", targetId: 0 };
}

export const ListReactionsRequest = {
  encode(message: ListReactionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.targetId !== 0) {
      writer.uint32(24).int32(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListReactionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.targetId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReactionsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
    };
  },

  toJSON(message: ListReactionsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListReactionsRequest>, I>>(base?: I): ListReactionsRequest {
    return ListReactionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListReactionsRequest>, I>>(object: I): ListReactionsRequest {
    const message = createBaseListReactionsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.targetId = object.targetId ?? 0;
    return message;
  },
};

function createBaseListReactionsResponse(): ListReactionsResponse {
  return { reactions: [], nextPageToken: "", totalSize: 0 };
}

export const ListReactionsResponse = {
  encode(message: ListReactionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.reactions) {
      Reaction.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListReactionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reactions.push(Reaction.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReactionsResponse {
    return {
      reactions: globalThis.Array.isArray(object?.reactions)
        ? object.reactions.map((e: any) => Reaction.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListReactionsResponse): unknown {
    const obj: any = {};
    if (message.reactions?.length) {
      obj.reactions = message.reactions.map((e) => Reaction.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListReactionsResponse>, I>>(base?: I): ListReactionsResponse {
    return ListReactionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListReactionsResponse>, I>>(object: I): ListReactionsResponse {
    const message = createBaseListReactionsResponse();
    message.reactions = object.reactions?.map((e) => Reaction.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseUpdateReactionRequest(): UpdateReactionRequest {
  return { reactionId: 0, reactionTypeId: 0 };
}

export const UpdateReactionRequest = {
  encode(message: UpdateReactionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionId !== 0) {
      writer.uint32(8).int32(message.reactionId);
    }
    if (message.reactionTypeId !== 0) {
      writer.uint32(16).int32(message.reactionTypeId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateReactionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reactionId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reactionTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReactionRequest {
    return {
      reactionId: isSet(object.reactionId) ? globalThis.Number(object.reactionId) : 0,
      reactionTypeId: isSet(object.reactionTypeId) ? globalThis.Number(object.reactionTypeId) : 0,
    };
  },

  toJSON(message: UpdateReactionRequest): unknown {
    const obj: any = {};
    if (message.reactionId !== 0) {
      obj.reactionId = Math.round(message.reactionId);
    }
    if (message.reactionTypeId !== 0) {
      obj.reactionTypeId = Math.round(message.reactionTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReactionRequest>, I>>(base?: I): UpdateReactionRequest {
    return UpdateReactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReactionRequest>, I>>(object: I): UpdateReactionRequest {
    const message = createBaseUpdateReactionRequest();
    message.reactionId = object.reactionId ?? 0;
    message.reactionTypeId = object.reactionTypeId ?? 0;
    return message;
  },
};

function createBaseUpdateReactionResponse(): UpdateReactionResponse {
  return { reaction: undefined };
}

export const UpdateReactionResponse = {
  encode(message: UpdateReactionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reaction !== undefined) {
      Reaction.encode(message.reaction, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateReactionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reaction = Reaction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReactionResponse {
    return { reaction: isSet(object.reaction) ? Reaction.fromJSON(object.reaction) : undefined };
  },

  toJSON(message: UpdateReactionResponse): unknown {
    const obj: any = {};
    if (message.reaction !== undefined) {
      obj.reaction = Reaction.toJSON(message.reaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReactionResponse>, I>>(base?: I): UpdateReactionResponse {
    return UpdateReactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReactionResponse>, I>>(object: I): UpdateReactionResponse {
    const message = createBaseUpdateReactionResponse();
    message.reaction = (object.reaction !== undefined && object.reaction !== null)
      ? Reaction.fromPartial(object.reaction)
      : undefined;
    return message;
  },
};

function createBaseDeleteReactionRequest(): DeleteReactionRequest {
  return { reactionId: 0 };
}

export const DeleteReactionRequest = {
  encode(message: DeleteReactionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reactionId !== 0) {
      writer.uint32(8).int32(message.reactionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteReactionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reactionId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReactionRequest {
    return { reactionId: isSet(object.reactionId) ? globalThis.Number(object.reactionId) : 0 };
  },

  toJSON(message: DeleteReactionRequest): unknown {
    const obj: any = {};
    if (message.reactionId !== 0) {
      obj.reactionId = Math.round(message.reactionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReactionRequest>, I>>(base?: I): DeleteReactionRequest {
    return DeleteReactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReactionRequest>, I>>(object: I): DeleteReactionRequest {
    const message = createBaseDeleteReactionRequest();
    message.reactionId = object.reactionId ?? 0;
    return message;
  },
};

function createBaseDeleteReactionResponse(): DeleteReactionResponse {
  return { success: false };
}

export const DeleteReactionResponse = {
  encode(message: DeleteReactionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteReactionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReactionResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteReactionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReactionResponse>, I>>(base?: I): DeleteReactionResponse {
    return DeleteReactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReactionResponse>, I>>(object: I): DeleteReactionResponse {
    const message = createBaseDeleteReactionResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface ReactionService {
  /** ReactionType endpoints */
  CreateReactionType(request: CreateReactionTypeRequest): Promise<CreateReactionTypeResponse>;
  GetReactionType(request: GetReactionTypeRequest): Promise<GetReactionTypeResponse>;
  ListReactionTypes(request: ListReactionTypesRequest): Promise<ListReactionTypesResponse>;
  UpdateReactionType(request: UpdateReactionTypeRequest): Promise<UpdateReactionTypeResponse>;
  DeleteReactionType(request: DeleteReactionTypeRequest): Promise<DeleteReactionTypeResponse>;
  /** Reaction endpoints */
  CreateReaction(request: CreateReactionRequest): Promise<CreateReactionResponse>;
  GetReaction(request: GetReactionRequest): Promise<GetReactionResponse>;
  ListReactions(request: ListReactionsRequest): Promise<ListReactionsResponse>;
  UpdateReaction(request: UpdateReactionRequest): Promise<UpdateReactionResponse>;
  DeleteReaction(request: DeleteReactionRequest): Promise<DeleteReactionResponse>;
}

export const ReactionServiceServiceName = "bst.v1.ReactionService";
export class ReactionServiceClientImpl implements ReactionService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ReactionServiceServiceName;
    this.rpc = rpc;
    this.CreateReactionType = this.CreateReactionType.bind(this);
    this.GetReactionType = this.GetReactionType.bind(this);
    this.ListReactionTypes = this.ListReactionTypes.bind(this);
    this.UpdateReactionType = this.UpdateReactionType.bind(this);
    this.DeleteReactionType = this.DeleteReactionType.bind(this);
    this.CreateReaction = this.CreateReaction.bind(this);
    this.GetReaction = this.GetReaction.bind(this);
    this.ListReactions = this.ListReactions.bind(this);
    this.UpdateReaction = this.UpdateReaction.bind(this);
    this.DeleteReaction = this.DeleteReaction.bind(this);
  }
  CreateReactionType(request: CreateReactionTypeRequest): Promise<CreateReactionTypeResponse> {
    const data = CreateReactionTypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateReactionType", data);
    return promise.then((data) => CreateReactionTypeResponse.decode(_m0.Reader.create(data)));
  }

  GetReactionType(request: GetReactionTypeRequest): Promise<GetReactionTypeResponse> {
    const data = GetReactionTypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReactionType", data);
    return promise.then((data) => GetReactionTypeResponse.decode(_m0.Reader.create(data)));
  }

  ListReactionTypes(request: ListReactionTypesRequest): Promise<ListReactionTypesResponse> {
    const data = ListReactionTypesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListReactionTypes", data);
    return promise.then((data) => ListReactionTypesResponse.decode(_m0.Reader.create(data)));
  }

  UpdateReactionType(request: UpdateReactionTypeRequest): Promise<UpdateReactionTypeResponse> {
    const data = UpdateReactionTypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateReactionType", data);
    return promise.then((data) => UpdateReactionTypeResponse.decode(_m0.Reader.create(data)));
  }

  DeleteReactionType(request: DeleteReactionTypeRequest): Promise<DeleteReactionTypeResponse> {
    const data = DeleteReactionTypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteReactionType", data);
    return promise.then((data) => DeleteReactionTypeResponse.decode(_m0.Reader.create(data)));
  }

  CreateReaction(request: CreateReactionRequest): Promise<CreateReactionResponse> {
    const data = CreateReactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateReaction", data);
    return promise.then((data) => CreateReactionResponse.decode(_m0.Reader.create(data)));
  }

  GetReaction(request: GetReactionRequest): Promise<GetReactionResponse> {
    const data = GetReactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReaction", data);
    return promise.then((data) => GetReactionResponse.decode(_m0.Reader.create(data)));
  }

  ListReactions(request: ListReactionsRequest): Promise<ListReactionsResponse> {
    const data = ListReactionsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListReactions", data);
    return promise.then((data) => ListReactionsResponse.decode(_m0.Reader.create(data)));
  }

  UpdateReaction(request: UpdateReactionRequest): Promise<UpdateReactionResponse> {
    const data = UpdateReactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateReaction", data);
    return promise.then((data) => UpdateReactionResponse.decode(_m0.Reader.create(data)));
  }

  DeleteReaction(request: DeleteReactionRequest): Promise<DeleteReactionResponse> {
    const data = DeleteReactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteReaction", data);
    return promise.then((data) => DeleteReactionResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/rating.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "bst.v1";

export enum RatingTargetType {
  RATING_TARGET_TYPE_UNSPECIFIED = 0,
  RATING_TARGET_TYPE_SESSION = 1,
  RATING_TARGET_TYPE_USER = 2,
  RATING_TARGET_TYPE_SONG_PERFORMANCE = 3,
  RATING_TARGET_TYPE_PARTY = 4,
  UNRECOGNIZED = -1,
}

export function ratingTargetTypeFromJSON(object: any): RatingTargetType {
  switch (object) {
    case 0:
    case "RATING_TARGET_TYPE_UNSPECIFIED":
      return RatingTargetType.RATING_TARGET_TYPE_UNSPECIFIED;
    case 1:
    case "RATING_TARGET_TYPE_SESSION":
      return RatingTargetType.RATING_TARGET_TYPE_SESSION;
    case 2:
    case "RATING_TARGET_TYPE_USER":
      return RatingTargetType.RATING_TARGET_TYPE_USER;
    case 3:
    case "RATING_TARGET_TYPE_SONG_PERFORMANCE":
      return RatingTargetType.RATING_TARGET_TYPE_SONG_PERFORMANCE;
    case 4:
    case "RATING_TARGET_TYPE_PARTY":
      return RatingTargetType.RATING_TARGET_TYPE_PARTY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RatingTargetType.UNRECOGNIZED;
  }
}

export function ratingTargetTypeToJSON(object: RatingTargetType): string {
  switch (object) {
    case RatingTargetType.RATING_TARGET_TYPE_UNSPECIFIED:
      return "RATING_TARGET_TYPE_UNSPECIFIED";
    case RatingTargetType.RATING_TARGET_TYPE_SESSION:
      return "RATING_TARGET_TYPE_SESSION";
    case RatingTargetType.RATING_TARGET_TYPE_USER:
      return "RATING_TARGET_TYPE_USER";
    case RatingTargetType.RATING_TARGET_TYPE_SONG_PERFORMANCE:
      return "RATING_TARGET_TYPE_SONG_PERFORMANCE";
    case RatingTargetType.RATING_TARGET_TYPE_PARTY:
      return "RATING_TARGET_TYPE_PARTY";
    case RatingTargetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Rating {
  id: number;
  userId: number;
  targetType: RatingTargetType;
  targetId: number;
  rating: number;
  comment: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

function createBaseRating(): Rating {
  return {
    id: 0,
    userId: 0,
    targetType: 0,
    targetId: 0,
    rating: 0,
    comment: "",
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Rating = {
  encode(message: Rating, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.targetType !== 0) {
      writer.uint32(24).int32(message.targetType);
    }
    if (message.targetId !== 0) {
      writer.uint32(32).int32(message.targetId);
    }
    if (message.rating !== 0) {
      writer.uint32(40).int32(message.rating);
    }
    if (message.comment !== "") {
      writer.uint32(50).string(message.comment);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Rating {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRating();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.targetType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.rating = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.comment = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rating {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      targetType: isSet(object.targetType) ? ratingTargetTypeFromJSON(object.targetType) : 0,
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Rating): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.targetType !== 0) {
      obj.targetType = ratingTargetTypeToJSON(message.targetType);
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Rating>, I>>(base?: I): Rating {
    return Rating.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Rating>, I>>(object: I): Rating {
    const message = createBaseRating();
    message.id = object.id ?? 0;
    message.userId = object.userId ?? 0;
    message.targetType = object.targetType ?? 0;
    message.targetId = object.targetId ?? 0;
    message.rating = object.rating ?? 0;
    message.comment = object.comment ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

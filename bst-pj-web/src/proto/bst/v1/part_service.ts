// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: bst/v1/part_service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Part } from "./content";

export const protobufPackage = "bst.v1";

export interface CreatePartRequest {
  name: string;
  description: string;
}

export interface CreatePartResponse {
  part: Part | undefined;
}

export interface ListPartsRequest {
  pageSize: number;
  pageToken: string;
}

export interface ListPartsResponse {
  parts: Part[];
  nextPageToken: string;
  totalSize: number;
}

export interface GetPartRequest {
  partId: number;
}

export interface GetPartResponse {
  part: Part | undefined;
}

export interface UpdatePartRequest {
  partId: number;
  name?: string | undefined;
  description?: string | undefined;
}

export interface UpdatePartResponse {
  part: Part | undefined;
}

export interface DeletePartRequest {
  partId: number;
}

export interface DeletePartResponse {
  success: boolean;
}

function createBaseCreatePartRequest(): CreatePartRequest {
  return { name: "", description: "" };
}

export const CreatePartRequest = {
  encode(message: CreatePartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePartRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreatePartRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePartRequest>, I>>(base?: I): CreatePartRequest {
    return CreatePartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePartRequest>, I>>(object: I): CreatePartRequest {
    const message = createBaseCreatePartRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCreatePartResponse(): CreatePartResponse {
  return { part: undefined };
}

export const CreatePartResponse = {
  encode(message: CreatePartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      Part.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = Part.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePartResponse {
    return { part: isSet(object.part) ? Part.fromJSON(object.part) : undefined };
  },

  toJSON(message: CreatePartResponse): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = Part.toJSON(message.part);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePartResponse>, I>>(base?: I): CreatePartResponse {
    return CreatePartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePartResponse>, I>>(object: I): CreatePartResponse {
    const message = createBaseCreatePartResponse();
    message.part = (object.part !== undefined && object.part !== null) ? Part.fromPartial(object.part) : undefined;
    return message;
  },
};

function createBaseListPartsRequest(): ListPartsRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListPartsRequest = {
  encode(message: ListPartsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPartsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPartsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPartsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPartsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPartsRequest>, I>>(base?: I): ListPartsRequest {
    return ListPartsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPartsRequest>, I>>(object: I): ListPartsRequest {
    const message = createBaseListPartsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPartsResponse(): ListPartsResponse {
  return { parts: [], nextPageToken: "", totalSize: 0 };
}

export const ListPartsResponse = {
  encode(message: ListPartsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.parts) {
      Part.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPartsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPartsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parts.push(Part.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPartsResponse {
    return {
      parts: globalThis.Array.isArray(object?.parts) ? object.parts.map((e: any) => Part.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListPartsResponse): unknown {
    const obj: any = {};
    if (message.parts?.length) {
      obj.parts = message.parts.map((e) => Part.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPartsResponse>, I>>(base?: I): ListPartsResponse {
    return ListPartsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPartsResponse>, I>>(object: I): ListPartsResponse {
    const message = createBaseListPartsResponse();
    message.parts = object.parts?.map((e) => Part.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGetPartRequest(): GetPartRequest {
  return { partId: 0 };
}

export const GetPartRequest = {
  encode(message: GetPartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.partId !== 0) {
      writer.uint32(8).int32(message.partId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.partId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartRequest {
    return { partId: isSet(object.partId) ? globalThis.Number(object.partId) : 0 };
  },

  toJSON(message: GetPartRequest): unknown {
    const obj: any = {};
    if (message.partId !== 0) {
      obj.partId = Math.round(message.partId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPartRequest>, I>>(base?: I): GetPartRequest {
    return GetPartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPartRequest>, I>>(object: I): GetPartRequest {
    const message = createBaseGetPartRequest();
    message.partId = object.partId ?? 0;
    return message;
  },
};

function createBaseGetPartResponse(): GetPartResponse {
  return { part: undefined };
}

export const GetPartResponse = {
  encode(message: GetPartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      Part.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = Part.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartResponse {
    return { part: isSet(object.part) ? Part.fromJSON(object.part) : undefined };
  },

  toJSON(message: GetPartResponse): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = Part.toJSON(message.part);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPartResponse>, I>>(base?: I): GetPartResponse {
    return GetPartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPartResponse>, I>>(object: I): GetPartResponse {
    const message = createBaseGetPartResponse();
    message.part = (object.part !== undefined && object.part !== null) ? Part.fromPartial(object.part) : undefined;
    return message;
  },
};

function createBaseUpdatePartRequest(): UpdatePartRequest {
  return { partId: 0, name: undefined, description: undefined };
}

export const UpdatePartRequest = {
  encode(message: UpdatePartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.partId !== 0) {
      writer.uint32(8).int32(message.partId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.partId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartRequest {
    return {
      partId: isSet(object.partId) ? globalThis.Number(object.partId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: UpdatePartRequest): unknown {
    const obj: any = {};
    if (message.partId !== 0) {
      obj.partId = Math.round(message.partId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartRequest>, I>>(base?: I): UpdatePartRequest {
    return UpdatePartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartRequest>, I>>(object: I): UpdatePartRequest {
    const message = createBaseUpdatePartRequest();
    message.partId = object.partId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseUpdatePartResponse(): UpdatePartResponse {
  return { part: undefined };
}

export const UpdatePartResponse = {
  encode(message: UpdatePartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.part !== undefined) {
      Part.encode(message.part, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.part = Part.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartResponse {
    return { part: isSet(object.part) ? Part.fromJSON(object.part) : undefined };
  },

  toJSON(message: UpdatePartResponse): unknown {
    const obj: any = {};
    if (message.part !== undefined) {
      obj.part = Part.toJSON(message.part);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartResponse>, I>>(base?: I): UpdatePartResponse {
    return UpdatePartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartResponse>, I>>(object: I): UpdatePartResponse {
    const message = createBaseUpdatePartResponse();
    message.part = (object.part !== undefined && object.part !== null) ? Part.fromPartial(object.part) : undefined;
    return message;
  },
};

function createBaseDeletePartRequest(): DeletePartRequest {
  return { partId: 0 };
}

export const DeletePartRequest = {
  encode(message: DeletePartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.partId !== 0) {
      writer.uint32(8).int32(message.partId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.partId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePartRequest {
    return { partId: isSet(object.partId) ? globalThis.Number(object.partId) : 0 };
  },

  toJSON(message: DeletePartRequest): unknown {
    const obj: any = {};
    if (message.partId !== 0) {
      obj.partId = Math.round(message.partId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePartRequest>, I>>(base?: I): DeletePartRequest {
    return DeletePartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePartRequest>, I>>(object: I): DeletePartRequest {
    const message = createBaseDeletePartRequest();
    message.partId = object.partId ?? 0;
    return message;
  },
};

function createBaseDeletePartResponse(): DeletePartResponse {
  return { success: false };
}

export const DeletePartResponse = {
  encode(message: DeletePartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePartResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeletePartResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePartResponse>, I>>(base?: I): DeletePartResponse {
    return DeletePartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePartResponse>, I>>(object: I): DeletePartResponse {
    const message = createBaseDeletePartResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface PartService {
  /** POST /parts */
  CreatePart(request: CreatePartRequest): Promise<CreatePartResponse>;
  /** GET /parts */
  ListParts(request: ListPartsRequest): Promise<ListPartsResponse>;
  /** GET /parts/{id} */
  GetPart(request: GetPartRequest): Promise<GetPartResponse>;
  /** PUT /parts/{id} */
  UpdatePart(request: UpdatePartRequest): Promise<UpdatePartResponse>;
  /** DELETE /parts/{id} */
  DeletePart(request: DeletePartRequest): Promise<DeletePartResponse>;
}

export const PartServiceServiceName = "bst.v1.PartService";
export class PartServiceClientImpl implements PartService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PartServiceServiceName;
    this.rpc = rpc;
    this.CreatePart = this.CreatePart.bind(this);
    this.ListParts = this.ListParts.bind(this);
    this.GetPart = this.GetPart.bind(this);
    this.UpdatePart = this.UpdatePart.bind(this);
    this.DeletePart = this.DeletePart.bind(this);
  }
  CreatePart(request: CreatePartRequest): Promise<CreatePartResponse> {
    const data = CreatePartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePart", data);
    return promise.then((data) => CreatePartResponse.decode(_m0.Reader.create(data)));
  }

  ListParts(request: ListPartsRequest): Promise<ListPartsResponse> {
    const data = ListPartsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListParts", data);
    return promise.then((data) => ListPartsResponse.decode(_m0.Reader.create(data)));
  }

  GetPart(request: GetPartRequest): Promise<GetPartResponse> {
    const data = GetPartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPart", data);
    return promise.then((data) => GetPartResponse.decode(_m0.Reader.create(data)));
  }

  UpdatePart(request: UpdatePartRequest): Promise<UpdatePartResponse> {
    const data = UpdatePartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePart", data);
    return promise.then((data) => UpdatePartResponse.decode(_m0.Reader.create(data)));
  }

  DeletePart(request: DeletePartRequest): Promise<DeletePartResponse> {
    const data = DeletePartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeletePart", data);
    return promise.then((data) => DeletePartResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
